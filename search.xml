<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[C函数中返回字符数组]]></title>
      <url>/2019/05/10/C%E5%87%BD%E6%95%B0%E4%B8%AD%E8%BF%94%E5%9B%9E%E5%AD%97%E7%AC%A6%E6%95%B0%E7%BB%84/</url>
      <content type="html"><![CDATA[<h2 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h2><p>在阅读本篇文章之前，建议大家看一下下面2篇文章：</p>
<ul>
<li><a href="http://www.veryitman.com/2019/03/07/%E4%B8%8D%E8%A7%81%E5%BE%97%E4%BD%A0%E4%BC%9A%E8%AE%A1%E7%AE%97C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/" target="_blank" rel="noopener">不见得你会计算C字符串长度</a></li>
<li><a href="http://www.veryitman.com/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/" target="_blank" rel="noopener">双宿双飞的 malloc 和 free</a></li>
</ul>
<p>这篇文章主要分享三个点：</p>
<p>1、为什么作为局部变量的字符数组不能直接返回，而字符指针却可以?</p>
<p>2、当字符数组是局部变量的时候，函数如何返回它？</p>
<p>3、字符数组(char [])和字符指针(char *)如何互转？</p>
<h2 id="局部变量的字符数组"><a href="#局部变量的字符数组" class="headerlink" title="局部变量的字符数组"></a>局部变量的字符数组</h2><p>在C中如果我们直接返回字符数组，编译会直接报警告。如下示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fork_user_name</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> name[] = <span class="string">"veryitman"</span>;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Xcode中编译警告信息是这样的：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Address of stack memory associated with local variable 'name' returned</div></pre></td></tr></table></figure>
<p>在Linux上面GCC编译显示警告是这样的：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">warning: function returns address of local variable [-Wreturn-local-addr]</div></pre></td></tr></table></figure>
<p>无论哪种警告信息，基本意思都是告诉我们不应该返回一个局部变量 <code>name</code> 的地址（函数内部的变量在栈内存上）。</p>
<p>如果我们修改一下代码，将 <code>char</code> 改为指针变量 <code>char *</code> ，示例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fork_user_name2</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> *name = <span class="string">"veryitman"</span>;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无论是Linux的GCC还是Xcode的Clang编译器都不会报出警告。</p>
<p>首先我们要知道，常量是放在数据段里面的。</p>
<p>这里比较特殊，局部变量 <code>name</code> 保存在栈中，但是字符串 <code>veryitman</code> 的值是一个常量，保存在常量区。即便函数返回了，数据段里面的常量数据也还不会消亡，它会直到程序结束才会消失，其内存空间直到程序运行结束才会被释放。 所以，返回的地址是一个实际存在的有效地址。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fork_user_name</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> name[] = <span class="string">"veryitman"</span>;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">fork_user_name2</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> *name = <span class="string">"veryitman"</span>;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fork_user_name: %s\n"</span>, fork_user_name());</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"fork_user_name2: %s\n"</span>, fork_user_name2());</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用GCC编译、运行后的打印结果，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fork_user_name: (null)</div><div class="line">fork_user_name2: veryitman</div></pre></td></tr></table></figure>
<p>总之，在函数中的局部变量只要是返回类似 <code>int[]</code>、<code>char[]</code>、<code>long[]</code> 地址的，都是不正确的做法。</p>
<h2 id="一切皆有可能"><a href="#一切皆有可能" class="headerlink" title="一切皆有可能"></a>一切皆有可能</h2><p>下面例子是不正确的，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">v_string</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> rest[<span class="number">10</span>] = &#123;<span class="string">'\0'</span>&#125;;</div><div class="line">    <span class="keyword">return</span> rest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>1、使用 static</strong></p>
<p>在C语言中，用 <code>static</code> 限定外部变量与函数，该外部变量或者函数除了对该所在的文件可见外，其他文件都无法访问。 而用 <code>static</code> 声明内部变量，则该变量是某个特定函数的局部变量，只能在该函数中使用。但它与自动变量不同的是，不管其所在函数是否被调用，它一直存在，而不像自动变量那样，随着所在函数的被调用和退出而存在和消失。换句话说，<code>static</code> 类型的内部变量是一种只能在某个特定函数中使用但一直占据存储空间的变量。</p>
<p>所以使用static修饰一下，就没有问题了。示例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">v_string</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> rest[<span class="number">10</span>] = &#123;<span class="string">'\0'</span>&#125;;</div><div class="line">    <span class="keyword">return</span> rest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2、使用 malloc</strong></p>
<p>这种方式可以解决这个问题，是因为使用 <code>malloc</code> 分配的内存是在堆上而不是在栈内存上面。但是要记得将其在调用方使用 <code>free</code> 释放申请的内存空间，否则容易造成内存泄漏问题。</p>
<p>具体可以看看 <a href="[http://www.veryitman.com/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/](http://www.veryitman.com/2019/05/02/双宿双飞的-malloc-和-free/">双宿双飞的 malloc 和 free</a>) 这篇文章。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">v_string</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> *p = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    p = <span class="string">"\0"</span>;</div><div class="line">    <span class="keyword">return</span> p;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>3、全局变量</strong></p>
<p>这个很好理解。全局变量在程序真个生命周期中都是有效的，所以使用全局变量也可以解决类似问题。</p>
<p>但是这种方案就会让这个封装的方法不够内聚，因为它依赖了全局变量。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> g_rest[<span class="number">100</span>];</div><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">v_string</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">strcpy</span>(g_rest, <span class="string">"verytiamn"</span>);</div><div class="line">    <span class="keyword">return</span> g_rest;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4、返回形参指针变量</strong></p>
<p>在Linux Kernel(内核源码版本5.0.7)中，函数 <code>strcpy</code> 的实现如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HAVE_ARCH_STRCPY</span></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * strcpy - Copy a %NUL terminated string</span></div><div class="line"><span class="comment"> * @dest: Where to copy the string to</span></div><div class="line"><span class="comment"> * @src: Where to copy the string from</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">undef</span> strcpy</span></div><div class="line"><span class="function"><span class="keyword">char</span> *<span class="title">strcpy</span><span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> *tmp = dest;</div><div class="line"></div><div class="line">    <span class="keyword">while</span> ((*dest++ = *src++) != <span class="string">'\0'</span>)</div><div class="line">        <span class="comment">/* nothing */</span>;</div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div><div class="line">EXPORT_SYMBOL(<span class="built_in">strcpy</span>);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>参考内核实现，我们可以修改一下自己的代码，示例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">v_string</span><span class="params">(<span class="keyword">char</span> *s1, <span class="keyword">char</span> *s2)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> *tmp = s1;</div><div class="line">    <span class="comment">// 省略...</span></div><div class="line">    <span class="keyword">return</span> tmp;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里补充另外一个知识点，函数 <code>strcpy</code> 在glibc和Linux Kernel中实现不一样。</p>
<p>在glibc的新版中(2.29版本)，本质是调用了函数 <code>memcpy</code>， 实现如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stddef.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">undef</span> strcpy</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STRCPY</span></div><div class="line"><span class="meta"># <span class="meta-keyword">define</span> STRCPY strcpy</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="comment">/* Copy SRC to DEST.  */</span></div><div class="line"><span class="function"><span class="keyword">char</span> * <span class="title">STRCPY</span> <span class="params">(<span class="keyword">char</span> *dest, <span class="keyword">const</span> <span class="keyword">char</span> *src)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">memcpy</span> (dest, src, <span class="built_in">strlen</span> (src) + <span class="number">1</span>);</div><div class="line">&#125;</div><div class="line">libc_hidden_builtin_def (<span class="built_in">strcpy</span>)</div></pre></td></tr></table></figure>
<p>包括 <code>strncpy</code> 在glibc和Linux Kernel中实现也不一样，有兴趣的可以去看看源码。</p>
<h2 id="字符数组和字符指针的互转"><a href="#字符数组和字符指针的互转" class="headerlink" title="字符数组和字符指针的互转"></a>字符数组和字符指针的互转</h2><h3 id="字符数组转字符指针即-char-转-char"><a href="#字符数组转字符指针即-char-转-char" class="headerlink" title="字符数组转字符指针即 char [] 转 char *"></a>字符数组转字符指针即 char [] 转 char *</h3><p>这种情况下，可以直接进行赋值，示例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> c_str_array[] = <span class="string">"veryitman.com"</span>;</div><div class="line">    <span class="keyword">char</span> *p_str;</div><div class="line">    p_str = c_str_array;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"p_str: %s\n"</span>, p_str);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="字符指针转字符数组即-char-转-char"><a href="#字符指针转字符数组即-char-转-char" class="headerlink" title="字符指针转字符数组即 char * 转 char []"></a>字符指针转字符数组即 char * 转 char []</h3><p>是不是也可以直接进行赋值呢？撸段代码看看，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> c_str_array[] = <span class="string">"veryitman.com"</span>;</div><div class="line">    <span class="keyword">char</span> *p_str = <span class="string">"veryitman.com"</span>;</div><div class="line">    c_str_array = p_str;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c_str_array: %s\n"</span>, c_str_array);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很遗憾，编译报错，GCC编译错误截图如下：</p>
<p><img src="/upload/images/2019/05/10/1.png" alt="1557417012236"></p>
<p>Clang编译错误如下：</p>
<p>可以考虑使用 <code>strncpy</code> 来实现，示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> c_str_array[] = <span class="string">"veryitman.com"</span>;</div><div class="line">    <span class="keyword">char</span> *p_str = <span class="string">"veryitman.com"</span>;</div><div class="line">    <span class="built_in">strncpy</span>(c_str_array, p_str, <span class="built_in">strlen</span>(p_str));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"c_str_array: %s\n"</span>, c_str_array);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>时间可以改变一切，但你得做点什么！</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> strcpy char[] </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[双宿双飞的 malloc 和 free]]></title>
      <url>/2019/05/02/%E5%8F%8C%E5%AE%BF%E5%8F%8C%E9%A3%9E%E7%9A%84-malloc-%E5%92%8C-free/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>函数 <code>malloc</code> 和 <code>free</code> 是一对好朋友，几乎是形影不离。有 <code>malloc</code> 的地方就应该有 <code>free</code> 的存在。</p>
<p>今天跟大家聊聊 <code>malloc</code> 和 <code>free</code> 这对好基友，这两个函数都是对堆内存进行管理的函数，另外还有 <code>calloc</code>、<code>realloc</code>、<code>reallocf</code>、<code>valloc</code> 等堆内存管理函数。</p>
<h2 id="void"><a href="#void" class="headerlink" title="void *"></a>void *</h2><p>在进行下面话题之前，我们先回忆一下 <code>void *</code> 是什么？</p>
<p><code>void *</code> 表示未确定类型的指针。C/C++规定，<code>void *</code> 类型可以强制转换为任何其它类型的指针。</p>
<p><code>void *</code> 也被称之为无类型指针，<code>void *</code> 可以指向任意类型的数据，就是说可以用任意类型的指针对 <code>void *</code> 赋值，如下示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *p1;</div><div class="line"><span class="keyword">int</span> *p2;</div><div class="line">p1 = p2;</div></pre></td></tr></table></figure>
<p>但一般不会反过来使用，如下示例在有些编译器上面可以编译通过，有些就不行：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *p1;</div><div class="line"><span class="keyword">int</span> *p2;</div><div class="line">p2 = p1;</div></pre></td></tr></table></figure>
<p>可以修改一下代码，将 <code>void *</code> 转换为对应的指针类型再进行赋值，如下示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *p1;</div><div class="line"><span class="keyword">int</span> *p2;</div><div class="line">p2 = (<span class="keyword">char</span> *)p1;</div></pre></td></tr></table></figure>
<p>由于 GNU 和 ANSI 对 <code>void *</code> 类型指针参与运算的规定不一样，所以为了兼容二者并且让程序有更好的兼容性，最好还是将 <code>void *</code> 转换为有明确类型的指针再参与运算，如下示例。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *pd;</div><div class="line"><span class="keyword">char</span> *pc = (<span class="keyword">char</span> *)pd;</div><div class="line">pc ++;</div><div class="line">pc += <span class="number">1</span>;</div></pre></td></tr></table></figure>
<h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">malloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</div></pre></td></tr></table></figure>
<p><code>malloc</code> 向系统申请分配指定 <code>size</code> 个字节的内存空间，即 <code>malloc</code> 函数用来从堆空间中申请指定的 <code>size</code> 个字节的内存大小，返回类型是 <code>void *</code> 类型，如果成功，就会返回指向申请分配的内存，否则返回空指针，所以 <code>malloc</code> 不保证一定成功。</p>
<p>查看函数手册或者直接在Linux、macOS等Unix系统上面直接 <code>man malloc</code> 会显示对应的函数信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">The malloc() function allocates size bytes of memory and returns a pointer to the allocated memory.</div><div class="line"></div><div class="line">If successful, malloc() function return a pointer to allocated memory.  </div><div class="line">If there is an error, they return a NULL pointer and set errno to ENOMEM.</div></pre></td></tr></table></figure>
<p>另外需要注意一个问题，使用 <code>malloc</code> 函数分配内存空间成功后，<code>malloc</code> 不会对数据进行初始化，里边数据是随机的垃圾数据，所以一般结合 <code>memset</code> 函数和 <code>malloc</code> 函数 一起使用。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *arr;</div><div class="line">arr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != arr) &#123;</div><div class="line">    <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"arr: %p\n"</span>, arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *arr;</div><div class="line">arr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != arr) &#123;</div><div class="line">    <span class="built_in">memset</span>(arr, <span class="string">'\0'</span>, <span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"arr string: %s\n"</span>, arr);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了安全起见，建议可以考虑使用 <code>calloc()</code> 函数，后面会提到它。</p>
<p>函数 <code>free</code>、<code>malloc</code>、<code>calloc()</code> 都被包含在 <code>stdlib.h</code> 头文件中，当然了 <code>malloc.h</code> 头文件也有对应的函数声明，实现在 <code>malloc.c</code> 文件中。</p>
<p>关于 <code>malloc</code> 函数中的 <code>size</code> 参数务必要大于指针本身的数值，在32位操作系统上，指针占用4字节的大小；在64位操作系统上，指针占用8字节的大小。</p>
<h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>函数原型：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">free</span><span class="params">(<span class="keyword">void</span> *ptr)</span></span>;</div></pre></td></tr></table></figure>
<p>我们知道在 C 语言中， 堆上的内存空间不会自动释放（Java 有自动回收机制，而 C 语言没有），直到调用 <code>free</code> 函数，才会释放堆上的存储空间，即 <code>free</code> 函数会释放指针指向的内存分配空间。</p>
<p>下面是函数手册查到关于 <code>free</code> 函数的资料：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The free() function deallocates the memory allocation pointed to by ptr.</div><div class="line">If ptr is a NULL pointer, no operation is performed.</div></pre></td></tr></table></figure>
<p>对于 <code>free</code> 函数我们要走出一个误区，不要以为调用了 <code>free</code> 函数，变量就变为 <code>NULL</code> 值了。本质是 <code>free</code> 函数只是割断了指针所指的申请的那块内存之间的关系，并没有改变所指的地址（本身保存的地址并没有改变）。如下示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *pchar = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">        </div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</div><div class="line">    <span class="built_in">strcpy</span>(pchar, <span class="string">"blog"</span>);</div><div class="line">    <span class="comment">/* pchar所指的内存被释放，但是pchar所指的地址仍然不变 */</span></div><div class="line">    <span class="built_in">free</span>(pchar);</div><div class="line">    </div><div class="line">    <span class="comment">/* 该判断没有起到防错作用，此时 pchar 并不为 NULL */</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</div><div class="line">        <span class="built_in">strcpy</span>(pchar, <span class="string">"it"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"pchar: %s"</span>, pchar);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正确且安全的做法是对指针变量先进行 <code>free</code> 然后再将其值置为 <code>NULL</code>，如下下面示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *pchar = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line">        </div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</div><div class="line">    <span class="built_in">strcpy</span>(pchar, <span class="string">"blog"</span>);</div><div class="line">    <span class="comment">/* pchar所指的内存被释放，但是pchar所指的地址仍然不变 */</span></div><div class="line">    <span class="built_in">free</span>(pchar);</div><div class="line">    <span class="comment">/* 将其置为 NULL 值 */</span></div><div class="line">    pchar = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="comment">/* 该判断没有起到防错作用，此时 pchar 并不为 NULL */</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> != pchar) &#123;</div><div class="line">        <span class="built_in">strcpy</span>(pchar, <span class="string">"it"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"pchar: %s"</span>, pchar);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数 <code>free</code> 只能释放alloc的内存空间，对于其他非alloc的指针变量使用free会出现错误，如下面的例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0x2010</span>;</div><div class="line"><span class="keyword">int</span> *p;</div><div class="line">p = &amp;a;</div><div class="line"><span class="built_in">free</span>(p);</div></pre></td></tr></table></figure>
<p>运行后直接跪了，报类似下面的错误信息：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pointer being freed was not allocated.</div></pre></td></tr></table></figure>
<p>另外，告诉大家一个秘密，<code>free</code> 一个空指针没问题。如下例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p;</div><div class="line">p = <span class="literal">NULL</span>;</div><div class="line"><span class="built_in">free</span>(p);</div></pre></td></tr></table></figure>
<p>代码可以正常运行，在 <code>free</code> 函数源码为证：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* free(0) has no effect */</span></div><div class="line"><span class="keyword">if</span> (mem == <span class="number">0</span>)&#123;</div><div class="line">    <span class="keyword">return</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而 <code>NULL</code> 在源码（在 <code>morecore.c</code> 文件中）中定义就是0，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> NULL</span></div><div class="line"><span class="meta"># <span class="meta-keyword">define</span> NULL 0</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h2 id="malloc、free-小结"><a href="#malloc、free-小结" class="headerlink" title="malloc、free 小结"></a>malloc、free 小结</h2><p><strong>1、连续内存块</strong></p>
<p><code>malloc</code> 函数申请的是连续的一块内存，如果所申请的内存块大于目前堆上剩余内存块，则内存分配会失败，函数返回 <code>NULL</code> 值。</p>
<p><strong>注意：上面说的 <code>堆上剩余内存块</code> 不是所有剩余内存块之和，而是连续的内存。</strong></p>
<p><strong>2、双宿双飞才好</strong></p>
<p>调用 <code>malloc</code> 函数多余 <code>free</code> 函数会发生内存泄漏，这个很好理解，因为申请过的内存没有被释放完。调用 <code>malloc</code> 函数少于<code>free</code> 函数，肯定会出错。换句话说，在程序中 <code>malloc</code> 的使用次数务必要和 <code>free</code> 相等，否则必有隐患或者发生错误。</p>
<p>如下面的例子 <code>free</code> 两次指针变量就会在运行时报错： <code>malloc: *** error for object 0x10071be90: pointer being freed was not allocated</code>，也称之为 <code>double free</code>。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *pchar = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">10</span> * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line"><span class="built_in">free</span>(pchar);</div><div class="line"><span class="built_in">free</span>(pchar);</div></pre></td></tr></table></figure>
<p>对指针变量进行 <code>free</code> 之后，一定要记得对其赋值为 <code>NULL</code>，否则该指针就是一个野指针，这个在上面已经说明。</p>
<p><strong>3、0字节的内存有毒</strong></p>
<p>使用 <code>malloc</code> 函数也可以申请0字节的内存，该函数的返回值并不是 <code>NULL</code>，而是返回一个正常的内存地址，所以如果使用这种方式申请的内存很危险，如下面的例子，指针 <code>pchar</code> 是一个使用 <code>malloc</code> 函数创建的占用0字节的内存空间的一个指针变量，<code>if (NULL == pchar)</code> 并没有生效，而是执行了 <code>else</code> 语句中的代码，执行到 <code>strcpy(pchar, &quot;blog&quot;)</code> 就直接崩溃了。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *pchar = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pchar) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"malloc 0 byte memory failed.\n"</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"malloc 0 byte successfully and pchar: %s.\n"</span>, pchar);</div><div class="line">    pchar = <span class="string">"veryitman"</span>;</div><div class="line">    <span class="built_in">strcpy</span>(pchar, <span class="string">"blog"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"pchar: %s.\n"</span>, pchar);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>4、调皮的free</strong></p>
<p>使用非alloc方式创建的内存，使用 <code>free</code> 函数会报错，这个要注意。另外，<code>free</code> 空指针没有影响。</p>
<h2 id="calloc、realloc、reallocf、valloc"><a href="#calloc、realloc、reallocf、valloc" class="headerlink" title="calloc、realloc、reallocf、valloc"></a>calloc、realloc、reallocf、valloc</h2><p><strong>1、calloc 函数</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">calloc</span><span class="params">(<span class="keyword">size_t</span> count, <span class="keyword">size_t</span> size)</span></span>;</div></pre></td></tr></table></figure>
<p>在堆上，分配 <code>n*size</code> 个字节，并初始化为0，返回 <code>void *</code>类型，返回值情况跟 <code>malloc</code> 一致。</p>
<p>函数 <code>malloc()</code> 和函数 <code>calloc()</code> 的主要区别是前者不能初始化所分配的内存空间，而后者能。如果由 <code>malloc()</code> 函数分配的内存空间原来没有被使用过，则其中的每一位可能都是0；反之，如果这部分内存曾经被分配过，则其中可能遗留有各种各样的数据。也就是说，使用 <code>malloc()</code> 函数的程序开始时(内存空间还没有被重新分配)能正常进行，但经过一段时间(内存空间还已经被重新分配)可能会出现问题。 </p>
<p>函数 <code>calloc()</code> 会将所分配的内存空间中的每一位都初始化为零，也就是说，如果你是为字符类型或整数类型的元素分配内存，那么这些元素将保证会被初始化为0；如果你是为指针类型的元素分配内存，那么这些元素通常会被初始化为空指针；如果你为实型数据分配内存，则这些元素会被初始化为浮点型的零。 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The calloc() function contiguously allocates enough space for count objects that are size bytes of memory each and returns a pointer to the allocated memory.</div><div class="line"></div><div class="line">The allocated memory is filled with bytes of value zero.</div></pre></td></tr></table></figure>
<p><strong>2、realloc() 函数</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">realloc</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span>;</div></pre></td></tr></table></figure>
<p><code>realloc()</code> 会将 <code>ptr</code> 所指向的内存块的大小修改为 <code>size</code>，并将新的内存指针返回。假设之前内存块的大小为 n，如果 size &lt;= n，那么截取的内容不会发生变化，如果 size &gt; n，那么新分配的内存不会被初始化。</p>
<p>对于上面说的新的内存指针地址可能变也可能不变，假如原来alloc的内存后面还有足够多剩余内存的话，realloc后的内存=原来的内存+剩余内存，realloc还是返回原来内存的地址即不会创建新的内存。假如原来alloc的内存后面没有足够多剩余内存的话，realloc将申请新的内存，然后把原来的内存数据拷贝到新内存里，原来的内存将被free掉，realloc返回新内存的地址。</p>
<p>另外要注意，如果 ptr = NULL，那么相当于调用 malloc(size)；如果 ptr != NULL且size = 0，那么相当于调用 free(ptr)。</p>
<p>当调用 <code>realloc</code> 失败的时候，返回NULL，并且原来的内存不改变，不会释放也不会移动。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">The realloc() function tries to change the size of the allocation pointed to by ptr to size, and returns ptr. </div><div class="line"></div><div class="line">If there is not enough room to enlarge the memory allocation pointed to by ptr, realloc() creates a new allocation, copies as much of the old data pointed to by ptr as will fit to the new allocation, frees the old allocation, and returns a pointer to the allocated memory.  </div><div class="line"></div><div class="line">If ptr is NULL, realloc() is identical to a call to malloc() for size bytes.  </div><div class="line"></div><div class="line">If size is zero and ptr is not NULL, a new, minimum sized object is allocated and the original object is freed.  </div><div class="line"></div><div class="line">When extending a region allocated with calloc(3), realloc(3) does not guarantee that the additional memory is also zero-filled.</div></pre></td></tr></table></figure>
<p>看一下源码的关键部分，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> * __libc_realloc (<span class="keyword">void</span> *oldmem, <span class="keyword">size_t</span> bytes)</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 省略... </span></div><div class="line">    </div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> REALLOC_ZERO_BYTES_FREES</span></div><div class="line">  	<span class="keyword">if</span> (bytes == <span class="number">0</span> &amp;&amp; oldmem != <span class="literal">NULL</span>) &#123;</div><div class="line">    	__libc_free (oldmem); <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">    <span class="comment">// 省略...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以看出，如果 <code>oldmem</code> 不为NULL且 <code>bytes</code> 为0的情况下，会自动进行 <code>free</code> 操作。如下面的例子运行后会报错。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt; </span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> *pre_ptr = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">20</span>);</div><div class="line">    <span class="keyword">int</span> bytes = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">NULL</span> != pre_ptr) &#123;</div><div class="line">        <span class="keyword">void</span> *ptr = <span class="built_in">realloc</span>(pre_ptr, bytes);</div><div class="line">        <span class="comment">// 对pre_ptr进行了double free，这种条件下源码中会进行一次free</span></div><div class="line">        <span class="built_in">free</span>(pre_ptr);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以为了保险起见，要对 <code>bytes</code> 进行判断再做处理。</p>
<p>传递给 <code>realloc</code> 的指针变量必须是先前通过 <code>malloc()</code>、 <code>calloc()</code> 或 <code>realloc()</code> 等alloc分配的，否则会报 <code>pointer being realloc&#39;d was not allocated.</code> 错误。如下例子（运行直接报错）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *p = <span class="string">""</span>;</div><div class="line"><span class="keyword">void</span> *newP = <span class="built_in">realloc</span>(p, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<p><strong>3、reallocf() 函数</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">reallocf</span><span class="params">(<span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size)</span></span>;</div></pre></td></tr></table></figure>
<p><code>reallocf()</code> 函数是由 FreeBSD 实现的，它会在任何情况下释放输入的指针（即使是再分配失败之后）。<code>reallocf()</code> 一样会调用 <code>realloc</code> 函数，但是只有我们在获得空的指针之后才会调用 <code>free</code> 函数。</p>
<p>下面是 <code>reallocf</code> 函数具体的实现部分：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">reallocf</span><span class="params">(<span class="keyword">void</span> *p, <span class="keyword">size_t</span> size)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">void</span> *ptr = <span class="built_in">realloc</span>(p, size);</div><div class="line">    <span class="keyword">if</span> (!p) &#123;</div><div class="line">        <span class="built_in">free</span>(p);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ptr;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The reallocf() function is identical to the realloc() function, except that it will free the passed pointer when the requested memory cannot be allocated.</div><div class="line"></div><div class="line">This is a FreeBSD specific API designed to ease the problems with traditional coding styles for realloc causing memory leaks in libraries.</div></pre></td></tr></table></figure>
<p><strong>4、valloc() 函数</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> * <span class="title">valloc</span><span class="params">(<span class="keyword">size_t</span> size)</span></span>;</div></pre></td></tr></table></figure>
<p>这个函数是最少见也是最少用的一个函数。</p>
<p><code>malloc</code> 或 <code>realloc</code> 返回的是以8字节对齐的内存地址，在64bits上是16字节对齐。然而 <code>memalign</code> 或 <code>valloc</code> 可以更大的粒度进行字节对齐。</p>
<p><code>valloc</code> 是一个废弃的函数，分配 <code>size</code> 大小的字节，返回已分配的内存地址指针，其内存地址将是页大小(page size)的倍数，如果分配失败返回 <code>NULL</code>。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">The valloc() function allocates size bytes of memory and returns a pointer to the allocated memory. </div><div class="line"></div><div class="line">The allocated memory is aligned on a page boundary.</div></pre></td></tr></table></figure>
<p>说了这么多，接下来我们看一下例子，如下代码示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 对其分配内存，这个时候pchar值是随机的垃圾值</span></div><div class="line"><span class="keyword">char</span> *pchar = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="number">16</span>);</div><div class="line"><span class="comment">// 手动初始化pchar的值，下面的方法则不需要</span></div><div class="line"><span class="built_in">memset</span>(pchar, <span class="number">0</span>, <span class="number">16</span>);</div><div class="line"></div><div class="line"><span class="comment">// calloc分配内存，会自动设置为0，不需要memset</span></div><div class="line"><span class="keyword">char</span> *pchar_orig = (<span class="keyword">char</span> *)<span class="built_in">calloc</span>(<span class="number">12</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</div><div class="line"></div><div class="line"><span class="comment">// 在原内存基础上，在堆内存空间中连续增加内存</span></div><div class="line"><span class="comment">// 如果原内存没有连续空间可拓展，realloc会新分配一个空间，将原有内存copy到新空间，然后释放原内存  </span></div><div class="line"><span class="comment">// 注意：realloc和malloc，只分配内存不进行赋值操作</span></div><div class="line"><span class="keyword">char</span> *pchar_dest = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(pchar_orig, <span class="number">10</span>);</div><div class="line">  </div><div class="line"><span class="comment">// 相当于 malloc(60)</span></div><div class="line"><span class="keyword">char</span> *pchar_ini = (<span class="keyword">char</span> *)<span class="built_in">realloc</span>(<span class="literal">NULL</span>, <span class="number">60</span>);</div><div class="line"></div><div class="line"><span class="built_in">free</span>(pchar);</div><div class="line">pchar = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="built_in">free</span>(pchar_orig);</div><div class="line">pchar_orig = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="built_in">free</span>(pchar_dest);</div><div class="line">pchar_dest = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="built_in">free</span>(pchar_ini);</div><div class="line">pchar_ini = <span class="literal">NULL</span>;</div></pre></td></tr></table></figure>
<h2 id="glibc"><a href="#glibc" class="headerlink" title="glibc"></a>glibc</h2><p>上面说过这些内存管理函数都在头文件 <code>stdlib.h</code> 中，函数实现都在 <code>malloc.c</code> 文件中，这些都可以在C的标准库 <code>glibc</code> 中找到对应的代码，我下载的 <code>glibc</code> 是 <code>2.29</code> 这个版本。</p>
<p><code>glibc</code> 和 <code>libc</code> 都是 Linux 下的 C 函数库。<code>libc</code> 库是Linux下的ANSI C的函数库也泛指一切符合C规范的库，<code>glibc</code> 是Linux下的GNU C函数库，也是一种 <code>libc</code> 的实现。<code>glibc</code> 本身是GNU旗下的C标准库，后来逐渐成为了Linux的标准C库，而Linux下原来的标准C库Linux <code>libc</code> 逐渐不再被维护。Linux下面的标准C库不仅有这一个，如<a href="https://www.uclibc.org/" target="_blank" rel="noopener">uclibc</a>、klibc，以及上面被提到的Linux <code>libc</code>，但是 <code>glibc</code> 无疑是用得最多的，用 glibc 作为系统的C函式库，是GNU/Linux演进的一个重要里程碑，可以查看 <a href="https://en.wikipedia.org/wiki/GNU_C_Library" target="_blank" rel="noopener">维基百科</a> 对 <code>glibc</code> 的介绍。</p>
<p>这里也说一下 <a href="https://zh.wikipedia.org/wiki/ANSI_C" target="_blank" rel="noopener">ANSI C</a> 函数库是基本的C语言函数库，包含了C语言最基本的库函数。这个库可以根据头文件划分为 15 个部分，其中包括： </p>
<ul>
<li><p>文件 ctype.h：包含用来测试某个特征字符的函数的函数原型，以及用来转换大小写字母的函数原型；</p>
</li>
<li><p>文件 errno.h：定义用来报告错误条件的宏；</p>
</li>
<li><p>文件 float.h：包含系统的浮点数大小限制；</p>
</li>
<li><p>文件 math.h：包含数学库函数的函数原型；</p>
</li>
<li>文件 stddef.h：包含执行某些计算 C 所用的常见的函数定义；</li>
<li>文件 stdio.h：包含标准输入输出库函数的函数原型，以及他们所用的信息；</li>
<li>文件 stdlib.h：包含数字转换到文本，以及文本转换到数字的函数原型，还有内存分配、随机数字以及其他实用函数的函数原型；</li>
<li>文件 string.h：包含字符串处理函数的函数原型；</li>
<li>文件 time.h：包含时间和日期操作的函数原型和类型；</li>
<li>文件 stdarg.h：包含函数原型和宏，用于处理未知数值和类型的函数的参数列表；</li>
<li>文件 signal.h：包含函数原型和宏，用于处理程序执行期间可能出现的各种条件；</li>
<li>文件 setjmp.h：包含可以绕过一般函数调用并返回序列的函数的原型，即非局部跳转；</li>
<li>文件 locale.h：包含函数原型和其他信息，使程序可以针对所运行的地区进行修改。地区的表示方法可以使计算机系统处理不同的数据表达约定，如全世界的日期、时间、美元数和大数字；</li>
<li>文件 assert.h：包含宏和信息，用于进行诊断，帮助程序调试；</li>
<li>其他；</li>
</ul>
<p>在 <code>glibc</code> 库中可以找到 <code>malloc.c</code> 文件(路径是 <code>glibc-2.29/malloc/malloc.c</code> )，从中可以看到如下别名的定义：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">strong_alias (__libc_calloc, __calloc) weak_alias (__libc_calloc, <span class="built_in">calloc</span>)</div><div class="line">strong_alias (__libc_free, __free) strong_alias (__libc_free, <span class="built_in">free</span>)</div><div class="line">strong_alias (__libc_malloc, __malloc) strong_alias (__libc_malloc, <span class="built_in">malloc</span>)</div><div class="line">strong_alias (__libc_memalign, __memalign)</div><div class="line">weak_alias (__libc_memalign, memalign)</div><div class="line">strong_alias (__libc_realloc, __realloc) strong_alias (__libc_realloc, <span class="built_in">realloc</span>)</div><div class="line">strong_alias (__libc_valloc, __valloc) weak_alias (__libc_valloc, valloc)</div><div class="line">strong_alias (__libc_pvalloc, __pvalloc) weak_alias (__libc_pvalloc, pvalloc)</div><div class="line">strong_alias (__libc_mallinfo, __mallinfo)</div><div class="line">weak_alias (__libc_mallinfo, mallinfo)</div><div class="line">strong_alias (__libc_mallopt, __mallopt) weak_alias (__libc_mallopt, mallopt)</div></pre></td></tr></table></figure>
<p> <code>__malloc</code> 是  <code>__libc_malloc</code> 的别名，<code>malloc</code> 也是  <code>__libc_malloc</code> 的别名。其他以此类推。</p>
<p>所以看 <code>malloc</code> 函数的源码，直接看 <code>__libc_realloc</code> 函数实现即可，看 <code>free</code> 的源码可以看 <code>__libc_free</code> 的实现。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *</div><div class="line">__libc_realloc (<span class="keyword">void</span> *oldmem, <span class="keyword">size_t</span> bytes)</div></pre></td></tr></table></figure>
<p>也可以在线查看 <code>glibc</code> 的源码，点击 <a href="https://code.woboq.org/userspace/glibc/" target="_blank" rel="noopener">这里</a> 前往欣赏！</p>
<hr>
<p><strong>锄禾日当午，汗滴禾下土，五一节快乐~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> malloc free </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[用Objective-C实现抽象类]]></title>
      <url>/2019/04/21/%E7%94%A8Objective-C%E5%AE%9E%E7%8E%B0%E6%8A%BD%E8%B1%A1%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2019/04/21/1.jpg" alt=""></p>
<p>插图的花是我上个月发工资当天晚上加班回家的路上从一个老人家那里买的，一枝独秀！</p>
<p>上周在微信公众号发布的一篇名为 <a href="[http://www.veryitman.com/2019/04/14/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/](http://www.veryitman.com/2019/04/14/反向代理/">反向代理</a>) 的文章，居然真被微信给封掉了，当时在写的时候我还在想是不是会被微信给封杀掉，真是怕什么来什么，完全符合墨菲定律！那篇文章我就是想给大家分享一下如何设置 <code>Nginx</code> 的反向代理，其中的一些概念可能是因为牵涉到了敏感词汇，本无恶意！</p>
<p>不说这件事情了，还是回到今天分享的主题上面来吧~</p>
<p>在软件设计或者架构设计领域，架构师都会跟大家强调对业务一定要抽象，把具体的业务场景抽象为程序实现很考验一个人的编程和思维能力。所以在面向对象的编程中，抽象是一种必备的能力。</p>
<p>设计框架的时候，一般我们都会约定一些协议，各个模块在交互通信中能够遵守和实现这些协议，就可以保证通信的畅通性，就好比大家遵守排队规则一样，一个一个来就不会乱。</p>
<p>协议可以使用接口的形式或者抽象类的形式都可以定义，不同的编程语言有不同的形式。例如，在Java中提供给开发者的有接口 <code>Interface</code>  还有抽象类 <code>Abstract</code>，示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 接口 */</span></div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISeverListener</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">covertService</span><span class="params">(String name)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/** 抽象类 */</span></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractServer</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">destroyService</span><span class="params">(String serverID)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>C++</code> 中也有抽象类，示例如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span></span></div><div class="line"><span class="class">&#123;</span></div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="keyword">int</span> x, y;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="comment">//纯虚函数</span></div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">disp</span><span class="params">()</span></span>=<span class="number">0</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>在 <code>Objective-C</code> 中提供了协议 <code>protocol</code>，没有提供抽象类的东西，但是我们可以借助 <code>protocol</code> 模拟实现抽象类。</p>
<p><strong>DownloaderProtocol.h 协议</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">DownloaderProtocol</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line"><span class="keyword">@required</span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)checkDownloader;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startDownload:(<span class="keyword">id</span>)url;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopDownload;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)deleteAllDownloadFile;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>AbstractDownloader.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"DownloaderProtocol.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">AbstractDownloader</span> : <span class="title">NSObject</span> &lt;<span class="title">DownloaderProtocol</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setDownloadUrl:(<span class="built_in">NSString</span> *)url;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>AbstractDownloader.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"AbstractDownloader.h"</span></span></div><div class="line"></div><div class="line"><span class="meta">#define AbstractMethodNotImplemented() \</span></div><div class="line"><span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInternalInconsistencyException</span> \</div><div class="line">reason:[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"You must override %@ in a subclass."</span>, <span class="built_in">NSStringFromSelector</span>(_cmd)] \</div><div class="line">userInfo:<span class="literal">nil</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">AbstractDownloader</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSAssert</span>(![<span class="keyword">self</span> isMemberOfClass:[AbstractDownloader <span class="keyword">class</span>]], <span class="string">@"AbstractDownloader is an abstract class, you should not instantiate it directly."</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> init];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)checkDownloader</div><div class="line">&#123;</div><div class="line">    AbstractMethodNotImplemented();</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startDownload:(<span class="keyword">id</span>)url</div><div class="line">&#123;</div><div class="line">    AbstractMethodNotImplemented();</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopDownload</div><div class="line">&#123;</div><div class="line">    AbstractMethodNotImplemented();</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)deleteAllDownloadFile</div><div class="line">&#123;</div><div class="line">    AbstractMethodNotImplemented();</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)setDownloadUrl:(<span class="built_in">NSString</span> *)url</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"AbstractDownloader's url = %@"</span>, url);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>从上面的代码可以看出</code>AbstractMethodNotImplemented()<code>是模拟抽象类的关键，有了这个宏动议之后，凡是需要继承</code>AbstractDownloader<code>必须要实现对应的方法，否则会报错。</code>ImageDownloader<code>继承 AbstractDownloader</code> 并且实现对应的方法，示例如下：</p>
<p><strong>ImageDownloader.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"AbstractDownloader.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ImageDownloader</span> : <span class="title">AbstractDownloader</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>ImageDownloader.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ImageDownloader.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ImageDownloader</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)checkDownloader</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ImageDownloader checkDownloader..."</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)startDownload:(<span class="keyword">id</span>)url</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ImageDownloader startDownload..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)stopDownload</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ImageDownloader stopDownload..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)deleteAllDownloadFile</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"ImageDownloader deleteAllDownloadFile..."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这样做的话，团队相关的开发人员就知道自己继承自 <code>AbstractDownloader</code> 应该做什么了。</p>
<p>这里只是给大家提供一种设计思路，有更好的思路欢迎交流，感谢每一位关注者、阅读者。</p>
<p><strong>一直致力于让开发变得更美好的公众号~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS 抽象类 Objective-C </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu19安装Swift5]]></title>
      <url>/2019/04/20/Ubuntu19%E5%AE%89%E8%A3%85Swift5/</url>
      <content type="html"><![CDATA[<h2 id="内容概要"><a href="#内容概要" class="headerlink" title="内容概要"></a>内容概要</h2><p>通过实践，分享如何在 <code>Ubuntu19</code> 下面如何安装 <code>Swift5</code>.</p>
<h2 id="安装必备库"><a href="#安装必备库" class="headerlink" title="安装必备库"></a>安装必备库</h2><p>在使用 <code>apt-get</code> 之前，有必要做一次更新，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div></pre></td></tr></table></figure>
<p>更新完成后，安装对应的库文件，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git cmake ninja-build clang python uuid-dev libicu-dev icu-devtools libbsd-dev libedit-dev libxml2-dev libsqlite3-dev swig libpython-dev libncurses5-dev pkg-config libblocksruntime-dev libcurl4-openssl-dev systemtap-sdt-dev tzdata rsync</div></pre></td></tr></table></figure>
<p>然后再安装下面的库，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install clang libicu-dev libpython2.7</div></pre></td></tr></table></figure>
<p>最后，一定要安装下面的库，执行安装即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install libtinfo5</div><div class="line">sudo apt install python-dev</div></pre></td></tr></table></figure>
<p>否则会报错：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/bin/lldb: error while loading shared libraries: libncurses.so.5: cannot open shared object file: No such file or directory</div><div class="line"></div><div class="line">/bin/lldb: error while loading shared libraries: libpython2.7.so.1.0: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>
<h2 id="下载-Swift"><a href="#下载-Swift" class="headerlink" title="下载 Swift"></a>下载 Swift</h2><p>下载 <code>Swift</code> 源码，使用 <code>wget</code> 下载即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://swift.org/builds/swift-5.0-release/ubuntu1804/swift-5.0-RELEASE/swift-5.0-RELEASE-ubuntu18.04.tar.gz</div></pre></td></tr></table></figure>
<p>下载成功后，解压源文件，如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar zxvf swift-5.0-RELEASE-ubuntu18.04.tar.gz</div></pre></td></tr></table></figure>
<p>为了使用方便，可以对解压后的文件重新命名，这里我改为了 <code>swift5.0</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv swift-5.0-RELEASE-ubuntu18.04 swift5.0</div></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>将 swift 对应的加入到环境变量中，编辑 <code>~/.bashrc</code> 文件即可。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.bashrc</div></pre></td></tr></table></figure>
<p>添加下面内容在文件最后，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=/home/username/developer/swift_linux/swift5.0/usr/bin:$&#123;PATH&#125;</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：<code>/home/username/developer/swift_linux/swift5.0/usr/bin</code> 是你自己解压后的目录。</p>
<p>为了验证 <code>Swift</code> 是否安装成功，可以让 <code>~/.bashrc</code> 文件 立即生效，命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure>
<p>在终端执行以下下面命令：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">swift -version</div></pre></td></tr></table></figure>
<p>成功会显示如下信息：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Swift version 5.0 (swift-5.0-RELEASE)</div><div class="line">Target: x86_64-unknown-linux-gnu</div></pre></td></tr></table></figure>
<p>Done.</p>
<p><strong>人生总是在不断的上演着重逢和离别~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> swift linux Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[反向代理]]></title>
      <url>/2019/04/14/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="本篇内容概要"><a href="#本篇内容概要" class="headerlink" title="本篇内容概要"></a>本篇内容概要</h2><p>不知道大家有没有问过别人，或者是自己偷偷在网上搜过 “什么是正向和反向代理“ 类似的问题，即使问过、搜过是不是也很懵？</p>
<p><strong>总结一句话，正向代理就是代理客户端的代理服务，反向代理就是代理服务端的代理服务。</strong></p>
<p>那我们今天就来掰扯掰扯这个问题。</p>
<h2 id="VPN-和正向代理"><a href="#VPN-和正向代理" class="headerlink" title="VPN 和正向代理"></a>VPN 和正向代理</h2><p>小明：“你昨天看了我给你发的YouTube视频链接了吗？超级精彩哟！”。<br>小丽：“哦，那个链接根本打不开呀，看个屁！”，小明失望的看了看小丽。<br>小明：“好吧，肯定是你没有使用 VPN(fanqiang) 软件，怪不得你看不了…”。</p>
<p>相信你也有经历过类似的场景，朋友给了一个需要你拥有VPN服务才能打开的链接，无论你是万兆光纤也好还是亿兆光纤也罢，死活都无法打开。</p>
<p>这里所说的 VPN 就是人们通常所说的正向代理服务器，VPN(虚拟私人网络 <code>Virtual Private Network</code>)，是一种加密通讯技术。VPN 有很多的具体实现，比如 <code>PPTP</code>、<code>L2TP</code>、<code>IPSec</code> 和 <code>openvpn</code>。VPN 不是为了翻墙而生的，他只是一中技术，就好比菜刀本来是用来切菜的道理一样。使用 VPN 来翻墙基本已经作废了，但当大家谈及翻墙的时候说得最多的还是 “你有好用的 VPN 吗？”，所以把 VPN 当成翻墙工具的代名词也情有可原。</p>
<p>如果你有了翻墙软件就可以轻松访问全世界的网站了，特别是程序员，可以在知识的海洋里遨游。简单来说正向代理服务器类似于下面图所示：<br><img src="/upload/images/2019/04/14/1.jpg" alt=""></p>
<h2 id="反向代理和-Nginx"><a href="#反向代理和-Nginx" class="headerlink" title="反向代理和 Nginx"></a>反向代理和 Nginx</h2><p>这里可以给大家举个例子，假如你想让电信公司给你安装宽带或者网络电视，这个时候你可能需要打电话咨询一下相关的内容，于是你拿起了手机给电信公司打电话，经过一番复杂操作后终于可以等待人工服务了。电信的人工客服人员有很多，系统会根据一定的规则给你分配一个人，接下来可能是美眉也可能是汉子为你服务，究竟是谁给你提供语音服务取决与系统的分配，而不是你可以决定的。</p>
<p>系统分配和调度的功能就类似于反向代理服务器，对用户来说没有感知。类似于下面图所示：<br><img src="/upload/images/2019/04/14/2.jpg" alt=""></p>
<p>在软件设计中，服务端开发经常会用到反向代理服务器，比如 <code>Nginx</code>、<code>Apache</code> 等，它们经常也被用作为 WEB 服务器，<code>Nginx</code> 被当做代理服务器比较多，所谓的代理服务器是架设在 WEB 服务器和网络中断(比如手机客户端)之间的服务器，换句话说，<code>Nginx</code> 提供了反向代理服务的能力。</p>
<p>由于 <code>Nginx</code> 和 <code>Apache</code> 各自的优势，现在很多开发者选择让两者在服务器中共存。在服务器端让 <code>Nginx</code> 在前 <code>Apache</code> 在后，由 <code>Nginx</code> 做负载均衡和反向代理，并且处理静态文件，将动态请求交给 <code>Apache</code> 去处理。</p>
<p>下图是一个典型的 <code>Nginx</code> 作为反向代理服务器部署 <code>ELK</code> 的架构图，如下：<br><img src="/upload/images/2019/04/14/3.jpg" alt=""></p>
<p>用 <code>Nginx</code> 的反向代理，用户可以从外部访问到 <code>Kibana</code>，并且它本身具有负载均衡的作用，也能够提高了其性能。</p>
<p>再看一个微服务架构中的架构图（在网关前面也部署了 Nginx），如下图所示：<br><img src="/upload/images/2019/04/14/4.jpg" alt=""></p>
<p>关于 <code>Nginx</code> 作为负载均衡器的配置和实例，下一次跟大家分享。你现在只需要聚焦在 <code>Nginx</code> 作为反向代理服务器上面的功能即可。</p>
<h2 id="Nginx-配置反向代理"><a href="#Nginx-配置反向代理" class="headerlink" title="Nginx 配置反向代理"></a>Nginx 配置反向代理</h2><p><code>Nginx</code> 本身已经提供了反向代理服务的能力，下面我们结合实例给大家分享一下，假设你本机已经安装了 <code>Nginx</code> 并且会基本的操作命令。</p>
<p><strong>1、启动 Nginx</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<p>在浏览器打开 <code>http://localhost:80</code>，确保 <code>Nginx</code> 启动成功。</p>
<p><strong>2、配置 host</strong></p>
<p>我们配置一下本机的 host，vim 编辑即可。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/hosts</div></pre></td></tr></table></figure>
<p>增加下面一行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 www.ithome.com</div></pre></td></tr></table></figure>
<p>在浏览器打开 <code>http://www.ithome.com:80</code>，跟刚才显示一样的WEB 界面。</p>
<p><strong>3、配置 Nginx</strong></p>
<p>编辑 <code>Nginx</code> 配置，如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /usr/<span class="built_in">local</span>/etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>在 <code>http {</code> 节点下增加下面内容：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">  <span class="comment"># 监听80端口号</span></div><div class="line">  listen 80;</div><div class="line"></div><div class="line">  <span class="comment"># 监听访问的域名</span></div><div class="line">  server_name www.ithome.com;</div><div class="line"></div><div class="line">  <span class="comment"># 根据访问路径配置</span></div><div class="line">  location / &#123;</div><div class="line">      <span class="comment"># 设置 http 版本</span></div><div class="line">      proxy_http_version 1.1;</div><div class="line">      proxy_set_header Connection <span class="string">""</span>;</div><div class="line">      <span class="comment"># 把请求转发到 https://www.baidu.com</span></div><div class="line">      proxy_pass https://www.baidu.com;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新启动 <code>Nginx</code>，重新加载配置文件，操作命令如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx -s reload</div></pre></td></tr></table></figure>
<p>在浏览器打开 <code>http://www.ithome.com:80</code>，此时打开的是百度首页。至此，简单的配置 <code>Nginx</code> 作为反向代理服务器的功能已经完成，当然想配置好 <code>Nginx</code> 还需要大家多去实践和看官方技术手册。</p>
<p><code>proxy_pass</code> 默认使用的是 <code>http 1.0</code>，可以通过 <code>proxy_http_version</code>指令让它使用 <code>http 1.1</code>，以便开启 <code>keepalive</code> 之类的功能。<a href="http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version" target="_blank" rel="noopener">官方说明</a> 如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Sets the HTTP protocol version <span class="keyword">for</span> proxying. By default, version 1.0 is used. </div><div class="line"></div><div class="line">Version 1.1 is recommended <span class="keyword">for</span> use with keepalive connections and NTLM authentication.</div></pre></td></tr></table></figure>
<h2 id="附录：Nginx-命令"><a href="#附录：Nginx-命令" class="headerlink" title="附录：Nginx 命令"></a>附录：Nginx 命令</h2><p><strong>1、查看 nginx 的配置信息</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -V</div></pre></td></tr></table></figure>
<p>注意：是大写字母 <code>V</code>。</p>
<p><strong>2、查看 nginx 版本信息</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -v</div></pre></td></tr></table></figure>
<p><strong>3、启动 nginx</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<p><strong>4、查看 nginx 进程</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -ef|grep nginx</div></pre></td></tr></table></figure>
<p><strong>5、重启 nginx</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">nginx -s reload</div><div class="line">``` </div><div class="line"></div><div class="line">**6、完美停止 nginx**</div><div class="line"></div><div class="line">```sh</div><div class="line"><span class="built_in">kill</span> -QUIT `cat /var/run/nginx.pid`</div></pre></td></tr></table></figure>
<p><strong>7、快速停止 nginx</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span> -TERM `cat /var/run/nginx.pid`</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kill -INT `cat /var/run/nginx.pid`</div></pre></td></tr></table></figure>
<p><strong>8、完美停止工作进程，主要用于平滑升级</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">kill</span> -WINCH `cat /var/run/nginx.pid`</div></pre></td></tr></table></figure>
<p><strong>9、强制停止 nginx</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pkill -9 nginx</div></pre></td></tr></table></figure>
<p><strong>10、检查 nginx.conf 修改是否正确</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -t</div></pre></td></tr></table></figure>
<p><strong>11、停止 nginx 的命令</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s stop</div></pre></td></tr></table></figure>
<hr>
<p><strong>不经历风雨怎么见彩虹，没有人能够随随便便成功~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Nginx VPN 代理服务器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 自动装箱、拆箱引起的耗时]]></title>
      <url>/2019/04/07/Java-%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1%E5%BC%95%E8%B5%B7%E7%9A%84%E8%80%97%E6%97%B6/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2019/04/07/1.jpeg" alt="1"></p>
<h2 id="耗时问题"><a href="#耗时问题" class="headerlink" title="耗时问题"></a>耗时问题</h2><p>在说 Java 的自动装箱和自动拆箱之前，我们先看一个例子。</p>
<p>这个错误我在项目中犯过(尴尬)，拿出来共勉！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getCounterResult</span><span class="params">()</span> </span>&#123;</div><div class="line">    Long sum = <span class="number">0L</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> length = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">        sum += i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> startCountTime = System.currentTimeMillis();</div><div class="line">    <span class="keyword">long</span> result = getCounterResult();</div><div class="line">    <span class="keyword">long</span> endCountTime = System.currentTimeMillis();</div><div class="line">    System.out.println(<span class="string">"result = "</span> + result + <span class="string">", and take up time : "</span> + (endCountTime - startCountTime) / <span class="number">1000</span> + <span class="string">"s"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在我的电脑(macOS 64位系统，配置较高)，打印结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">result = 2305843005992468481, and take up time : 12s</div></pre></td></tr></table></figure>
<p>居然使用了 <code>12s</code>，是可忍<code>叔</code>不可忍，再正常不过的代码怎么会耗时这么久呢？如果在配置差一点的电脑上运行耗时会更久(惊呆了.jpg)。</p>
<p>我们不妨先阅读下面的内容，再来分析、解决上述耗时的问题。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><blockquote>
<p>自从 jdk1.5 之后就有了自动装箱(Autoboxing)和自动拆箱(AutoUnboxing)。</p>
</blockquote>
<p><strong>自动装箱</strong>，就是 Java 自动将原始(基本)类型转换成对应的封装器(对象)类型的过程，比如将 <code>int</code> 的变量转换成 <code>Integer</code> 对象，这个过程叫做装箱。</p>
<p><strong>自动拆箱</strong>，就是 Java 自动将封装器(对象)类型转换成基本类型的过程，如将 <code>Integer</code> 对象转换成 <code>int</code> 类型值，这个过程叫做拆箱。</p>
<p>之所以称之为自动装箱和拆箱，是因为这些操作并非人工(程序猿)操作的，而是 Java 自带的一个特性。</p>
<p>下表是 Java 中的基本类型和对应的封装类型的对应表：</p>
<table>
<thead>
<tr>
<th>基本类型</th>
<th>封装器类</th>
</tr>
</thead>
<tbody>
<tr>
<td>int</td>
<td>Integer</td>
</tr>
<tr>
<td>byte</td>
<td>Byte</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
</tr>
<tr>
<td>float</td>
<td>float</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
</tr>
</tbody>
</table>
<p><strong>自动装箱示例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</div><div class="line">Integer b = a;</div></pre></td></tr></table></figure>
<p><strong>自动拆箱示例：</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Integer b = <span class="keyword">new</span> Integer(<span class="number">7</span>);</div><div class="line"><span class="keyword">int</span> a = b;</div></pre></td></tr></table></figure>
<h2 id="Integer-int-自动拆箱和装箱"><a href="#Integer-int-自动拆箱和装箱" class="headerlink" title="Integer/int 自动拆箱和装箱"></a>Integer/int 自动拆箱和装箱</h2><p>下面这段代码是 <code>Integer</code> 的源码中 <code>valueOf</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</span></div><div class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</span></div><div class="line"><span class="comment"> * required, this method should generally be used in preference to</span></div><div class="line"><span class="comment"> * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</span></div><div class="line"><span class="comment"> * to yield significantly better space and time performance by</span></div><div class="line"><span class="comment"> * caching frequently requested values.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * This method will always cache values in the range -128 to 127,</span></div><div class="line"><span class="comment"> * inclusive, and may cache other values outside of this range.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">      <span class="comment">// 如果i的值大于-128小于127则返回一个缓冲区中的一个Integer对象</span></div><div class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</div><div class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</div><div class="line">        </div><div class="line">    <span class="comment">// 否则返回 new 一个Integer 对象</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们在执行下面的这句代码，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer i = <span class="number">100</span>;</div></pre></td></tr></table></figure>
<p>上面的代码等同于下面的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Integer i = Integer.valueOf(<span class="number">100</span>);</div></pre></td></tr></table></figure>
<p>结合上面的源码可以看出来，如果数值在 <code>[-128，127]</code> 之间(双闭区间)，不会重新创建 <code>Integer</code> 对象，而是从缓存中(常量池)直接获取，从常量池中获取而不是堆栈操作，读取数据要快很多。</p>
<p>我们再来看一下常见的基础面试题(请给出打印结果)，如下:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="comment">// ⓵</span></div><div class="line">    Integer a = <span class="keyword">new</span> Integer(<span class="number">121</span>);</div><div class="line">    Integer b = <span class="keyword">new</span> Integer(<span class="number">121</span>);</div><div class="line">    System.out.println(a == b);</div><div class="line">    </div><div class="line">    <span class="comment">// ⓶</span></div><div class="line">    Integer c = <span class="number">121</span>;</div><div class="line">    Integer d = <span class="number">121</span>;</div><div class="line">    System.out.println(c == d);</div><div class="line">    </div><div class="line">    <span class="comment">// ⓷</span></div><div class="line">    Integer e = <span class="number">129</span>;</div><div class="line">    Integer f = <span class="number">129</span>;</div><div class="line">    System.out.println(e == f);</div><div class="line">    </div><div class="line">    <span class="comment">// ⓸</span></div><div class="line">    <span class="keyword">int</span> g = <span class="number">50</span>;</div><div class="line">    Integer h = <span class="keyword">new</span> Integer(<span class="number">50</span>);</div><div class="line">    System.out.println(g == h);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>分析结果：</strong></p>
<p>⓵: false, 两个对象进行比较分别指向了不同堆内存<br>⓶: true, 自动装箱且数值在 [-128，127] 之间(双闭区间)<br>⓷: false, 自动装箱且数值不在 [-128，127] 之间(双闭区间)<br>⓸: true, 自动拆箱且数值在 [-128，127] 之间(双闭区间)</p>
<h2 id="解析耗时问题"><a href="#解析耗时问题" class="headerlink" title="解析耗时问题"></a>解析耗时问题</h2><p>类 <code>Long</code> 对应的也有一个 <code>valueof</code> 方法，源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Long <span class="title">valueOf</span><span class="params">(<span class="keyword">long</span> l)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> offset = <span class="number">128</span>;</div><div class="line">    <span class="keyword">if</span> (l &gt;= -<span class="number">128</span> &amp;&amp; l &lt;= <span class="number">127</span>) &#123; <span class="comment">// will cache</span></div><div class="line">        <span class="keyword">return</span> LongCache.cache[(<span class="keyword">int</span>)l + offset];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Long(l);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个和 <code>Integer</code> 的很像，道理上面说过，这里不再赘述。</p>
<p>在开篇的例子中，<code>getCounterResult</code> 方法有下面这句代码，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Long sum = <span class="number">0L</span>;</div></pre></td></tr></table></figure>
<p>很明显我们声明了一个 <code>Long</code> 的对象 <code>sum</code>，由于自动装箱，这句代码并没有语法上面的错误，编译器当然也不会报错。上面代码等同于如下代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Long sum = Long.valueof(<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>在 <code>for</code> 循环中，超过 <code>[-128，127]</code> 就会创建新的对象，这样不断的创建对象，不停的申请堆内存，程序执行自然也就比较耗时了。</p>
<p>修改一下代码，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getCounterResult</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 修改为普通的基本类型数据</span></div><div class="line">    <span class="keyword">long</span> sum = <span class="number">0L</span>;</div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> length = Integer.MAX_VALUE;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">        sum += i;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    <span class="keyword">long</span> startCountTime = System.currentTimeMillis();</div><div class="line">    <span class="keyword">long</span> result = getCounterResult();</div><div class="line">    <span class="keyword">long</span> endCountTime = System.currentTimeMillis();</div><div class="line">    System.out.println(<span class="string">"result = "</span> + result + <span class="string">", and take up time : "</span> + (endCountTime - startCountTime) / <span class="number">1000</span> + <span class="string">"s"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行时间大大缩短。</p>
<hr>
<p><strong>优柔寡断，是人生最大的负能量。对，别犹豫了赶紧扫码关注~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 自动拆箱 自动装箱 autoboxing unboxing </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[dumpdecrypted 砸壳：导出头文件]]></title>
      <url>/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="导出头文件"><a href="#导出头文件" class="headerlink" title="导出头文件"></a>导出头文件</h2><p>在 <a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/" target="_blank" rel="noopener">iOS 逆向: dumpdecrypted 砸壳记</a>中已经给大家分享了对 ipa 文件如何砸壳了， 接下来就可以导出其头文件了。</p>
<p>这里需要用到 <code>class-dump</code> 工具。如果你使用 class-dump, 出现如下错误：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error: Cannot find offset <span class="keyword">for</span> address 0xxxxxxxxx <span class="keyword">in</span> stringAtAddress</div></pre></td></tr></table></figure>
<p>报这种错误说明你即将 dump 的文件是 <code>OC</code> 和 <code>Swift</code> 混编的项目，<code>class-dump</code> 这个工具对它们无能为力。</p>
<p>还好, 伟大的程序员们给我们解决了这个问题。</p>
<p>去获取 <a href="https://github.com/BlueCocoa/class-dump" target="_blank" rel="noopener">class-dump 改进版</a> 源码, 然后使用 <code>Xcode</code> 编译即可.</p>
<p>编译完成后生成的 <code>class-dump</code> 就可以拿来使用了.</p>
<p>改变其可执行的权限:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">chmod +x class-dump</div><div class="line">``` </div><div class="line"></div><div class="line">查看 decrypted 文件的 arm 架构:</div><div class="line"></div><div class="line">```sh</div><div class="line">class-dump --list portkey-prod.decrypted</div></pre></td></tr></table></figure>
<p>显示为：<code>arm64</code></p>
<p>开始 dump:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir portkey-header</div><div class="line"></div><div class="line">class-dump -H portkey-prod.decrypted -o portkey-header/</div></pre></td></tr></table></figure>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>dumpdecrypted 砸壳出现了问题, 错误信息如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">dyld: could not load inserted library <span class="string">'dumpdecrypted.dylib'</span> because no suitable image found.  Did find:</div><div class="line">dumpdecrypted.dylib: required code signature missing <span class="keyword">for</span> <span class="string">'dumpdecrypted.dylib'</span></div></pre></td></tr></table></figure>
<p>解决方案, 重新签名 <code>dumpdecrypted</code> 后将其拷贝到 <code>Documents</code> 目录.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## 列出可签名证书, 找到 mac 上面已经安装的证书</span></div><div class="line">security find-identity -v -p codesigning</div><div class="line"></div><div class="line"><span class="comment">## 为 dumpecrypted.dylib 签名</span></div><div class="line">codesign --force --verify --verbose --sign <span class="string">"iPhone Developer: xxx xxxx (xxxxxxxxxx)"</span> dumpdecrypted.dylib</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><code>iPhone Developer: xxx xxxx (xxxxxxxxxx)</code> 为你自己本机安装的开发者证书名称.</p>
<h2 id="看到的工具"><a href="#看到的工具" class="headerlink" title="看到的工具"></a>看到的工具</h2><ul>
<li><p><a href="https://github.com/Maximus-/class-dump-swift" target="_blank" rel="noopener">class-dump-swift</a> 针对 Swift 的工具。这个需要自己先编译 llvm，然后才能使用.</p>
</li>
<li><p><a href="https://github.com/AloneMonkey/dumpdecrypted" target="_blank" rel="noopener">dumpdecrypted</a>, 比较自动化的一个版本，但我使用这个没有砸壳成功(估计是需要针对这个文件进行签名)。</p>
</li>
<li><p><a href="https://github.com/KJCracks/Clutch" target="_blank" rel="noopener">Clutch</a></p>
</li>
</ul>
<h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote>
<p>基于 iOS10.3.1 进行的实践。</p>
</blockquote>
<ul>
<li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/" target="_blank" rel="noopener">iOS 逆向: dumpdecrypted 砸壳记</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/" target="_blank" rel="noopener">iOS 逆向: 砸壳</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">iOS 逆向: 查看系统文件目录和结构</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">dumpdecrypted 砸壳：导出头文件</a></p>
</li>
</ul>
<p><strong>一个神奇的二维码~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[oh-my-zsh 配置]]></title>
      <url>/2019/04/03/oh-my-zsh-%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2019/04/03/1.jpg" alt=""></p>
<p>喜欢使用终端的朋友都知道在 linux、macOS 上面默认使用的是 <code>bash shell</code>，虽然 bash 比较强大，但是比起 zsh 还是稍逊一筹。zsh 虽然好用但配置比较复杂，于是乎 <code>oh-my-zsh</code> 就诞生了，它统一管理 zsh 的配置。</p>
<p><code>macOS</code> 上面安装 <a href="https://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh</a> 后，感觉敲命令更爽了，特别是在进行 <code>git</code> 操作的时候，很方便。</p>
<p>安装比较简单，可以在终端通过 <code>curl</code> 也可以通过 <code>wget</code> 方式，安装方法如下。</p>
<p><strong>1、通过 curl 方式</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></div></pre></td></tr></table></figure>
<p><strong>2、通过 wget 方式</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></div></pre></td></tr></table></figure>
<p><code>oh-my-zsh</code> 支持 linux、macOS 和 windows，但是在 linux 和 macOS 上面支持最好。</p>
<p>安装成功后，原来在系统 shell 配置的环境变量需要让 <code>oh-my-zsh</code> 知道，配置一下 <code>~/.zshrc</code> 文件，在该文件中的 <code>User configuration</code> 下面增加下面两行配置就可以了。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.bash_profile</div><div class="line"><span class="built_in">source</span> /etc/profile</div></pre></td></tr></table></figure>
<p>配置完成后保存文件，在终端执行：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">source</span> ~/.zshrc</div></pre></td></tr></table></figure>
<p>这样之前配置的环境变量在 <code>oh-my-zsh</code> 下就生效了。</p>
<p><code>oh-my-zsh</code> 支持三方插件和主题配置，默认的配置已经够用了，有兴趣的可以自行探索。</p>
<hr>
<p><strong>工欲善其事必先利其器</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> zsh git tool </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Follow your heart]]></title>
      <url>/2019/03/24/Follow-your-heart/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2019/03/24/1.jpeg" alt=""></p>
<p>今天不聊技术，聊聊人生~</p>
<p>最近天气像疯了一样，气温反复无常，时冷时热，让人有点应接不暇。</p>
<p>正好刚搬完家，家里很多东西需要购买，首先考虑的是给自己买对舒服的桌椅。实体店里面的桌椅实在是贵的离谱，动辄告诉我说是实木哟，现在低价处理之类的，还好我不是很傻。最后索性就在网上购买了，性价比也比较高，我也算是来了一把沉浸式的疯狂购物体验。</p>
<p>现在物流服务很是贴心，关注对应的公众号就可以及时告诉你当前物流的进度。相比之前，无论是送货速度还是服务都有显著提升，主要是实惠。</p>
<p>网上淘的这个桌子比较重，要想自己把这个桌子弄到家还是相当费劲的。快递员看出了我的窘境，说：“我这个推车反正现在也闲着，你先拿去用吧！”，我连忙道谢，有了这个推车搬起来就容易多了。</p>
<p>不到十分钟的时间，我就把货送到家了。心理一直想别人也许这会需要急着用车，就赶紧下楼，走到楼下拐角的时候，突然被一个人喊住，我回头一看是一个陌生的快递员。</p>
<p>他语调比较高：“喂，先生，你那个车子放到我这里就可以了，是我们的！”。<br>我瞄了他一眼，说道：“你是哪个快递公司的，我不是从你手上拿的车呀！”，这哥们依旧强势：“我是xx快递，这车就是我们的。”。</p>
<p>我心想这两个快递员是不是认识，这个车子原本就是眼前这个气势汹汹的人的？</p>
<p>心理正在犯着嘀咕，决定还是要物归原主。</p>
<p>我没有再理他，继续朝着原来收快递的地方走去，把车还给了主人。我顺便问道：“刚才有个xx快递的小哥说车子是他的？”，他说：“可能是他看错了，你看这车子上面有我们公司的标记呢”。我仔细一看果然是，庆幸自己没有把车交给别人。</p>
<p>人生中，仿佛也有很多类似上面的场景，假如你遇到了会怎么处理呢？</p>
<p>就拿婚姻来说，你认定的自己的另一半就是这辈子要娶或者要嫁的那个人，但是你身边的朋友或者家人并不看好你们，甚至他们压根不承认你的另一半，你又会怎么办？</p>
<p>我觉得遇到这样的事情，要听从自己的内心(Follow your heart)，不要因为别人的三言两语，你就轻易放弃当初的选择，而应该更加理性的做出判断，相信自己的判断不会错，只有这样你才不会后悔，至少爱过。</p>
<p>学习、工作和生活也是一样，既定了目标就应该勇往直前，在路上遇到的任何困难那是再正常不过的，别人的冷嘲热讽也好，打击刺激也罢，你要做的就是坚守你自己的内心，一帆风顺得到的幸福终究会昙花一现。</p>
<p>~ 充满酸甜苦辣的人生才值得回味，不是吗？</p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 枚举的本质]]></title>
      <url>/2019/03/16/Java-%E6%9E%9A%E4%B8%BE%E7%9A%84%E6%9C%AC%E8%B4%A8/</url>
      <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本文跟大家一起探讨一下 Java 枚举的本质，这篇文章的内容是我在 <code>2012年09月05日</code> 发布到 CSDN 上面的一篇博文 <a href="https://blog.csdn.net/veryitman/article/details/7945020" target="_blank" rel="noopener">Java 枚举：理解枚举本质</a>，虽然已经不在 CSDN 上面耕耘了，但偶尔也会去看看朋友们的留言，毕竟感情在那里！今天偶然看到有小伙伴评论这篇文章，一时兴起就想再次分享给大家。</p>
<p><img src="/upload/images/2019/03/16/1.jpg" alt="1"></p>
<p>学习编程语言，会用只是最基本的要求，了解和熟悉其实现、运行机制才使得你有别于常人！</p>
<h2 id="C-枚举"><a href="#C-枚举" class="headerlink" title="C 枚举"></a>C 枚举</h2><p>在 C 语言中，可以这样来定义枚举，如下示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">enum</span> color &#123;</div><div class="line">    RED=<span class="number">0</span>, GREEN, BLUE, YELLOW</div><div class="line">&#125; col;</div></pre></td></tr></table></figure>
<p>关键字 <code>enum</code> 定义枚举，在定义枚举的同时，声明该枚举变量 col.</p>
<p><strong>注意：C 语言中枚举成员的值是根据上下文自动加 1 的（GREEN = 1，BLUE = 2 等）。</strong></p>
<p>C 语言中 <code>switch</code> 语句支持枚举类型，如下示例：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">enum</span> color &#123;</div><div class="line">        RED=<span class="number">0</span>, GREEN, BLUE, YELLOW</div><div class="line">    &#125; col;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> cl;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"0=red, 1=green, 2=blue, 3=yellow. seclect:\n"</span>);</div><div class="line">        </div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;cl);</div><div class="line">    </div><div class="line">    col=(<span class="keyword">enum</span> color) cl;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span>(col) &#123;</div><div class="line">        <span class="keyword">case</span> RED:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"the color is red\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> GREEN:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"the color is green\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> BLUE:</div><div class="line">             <span class="built_in">printf</span>(<span class="string">"the color is blue\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> YELLOW:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"the color is yellow\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        defalut:</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"no this color\n"</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Java-枚举"><a href="#Java-枚举" class="headerlink" title="Java 枚举"></a>Java 枚举</h2><p>那么，Java 里面的枚举与其类似，但是又不是完全一样。Java 语言中定义枚举也是使用 <code>enum</code> 关键字，如下示例是 Java 语言的枚举：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    RED, GREEN, BLUE, YELLOW;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上述定义了一个枚举类型 <code>Color</code>（可以说是类，编译之后是 Color.class）.</p>
<p>上面的定义，还可以改成下面的这种形式:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    RED(), GREEN(), BLUE(), YELLOW();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>到这里你可能会觉得迷茫（如果你是初学者的话），为什么这样子也可以，why？</p>
<p>其实，枚举的成员就是枚举对象，只不过它们是静态常量而已。</p>
<p>使用 <code>javap</code> 命令（<code>javap 文件名&lt;没有后缀.class&gt;</code>）可以反编译 <code>class</code> 文件，如下：<br>​​​​<img src="/upload/images/2019/03/16/2.png" alt="1"></p>
<p>我们可以使用普通类来模拟枚举，下面定义一个 <code>Color</code> 类，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED = <span class="keyword">new</span> Color();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN = <span class="keyword">new</span> Color();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE = <span class="keyword">new</span> Color();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color YELLOW = <span class="keyword">new</span> Color();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结合上图反编译的结果，做一下对比，你是否看出了一点端倪（坏笑），如果没有看出来，那就接着往下看吧。</p>
<p>如果按照这个逻辑，是否还可以为其添加另外的构造方法？答案是肯定的！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    RED(<span class="string">"red color"</span>, <span class="number">0</span>), GREEN(<span class="string">"green color"</span>, <span class="number">1</span>), </div><div class="line">    BLUE(<span class="string">"blue color"</span>, <span class="number">2</span>), YELLOW(<span class="string">"yellow color"</span>, <span class="number">3</span>);</div><div class="line">    </div><div class="line">    Color(String name, <span class="keyword">int</span> id) &#123;</div><div class="line">        _name = name;</div><div class="line">        _id = id;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    String _name;</div><div class="line">    <span class="keyword">int</span> _id;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为 <code>Color</code> 声明了两个成员变量，并为其构造带参数的构造器。</p>
<p>如果你这样创建一个枚举:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">        RED(<span class="string">"red color"</span>, <span class="number">0</span>), GREEN(<span class="string">"green color"</span>, <span class="number">1</span>), </div><div class="line">        BLUE(<span class="string">"blue color"</span>, <span class="number">2</span>), YELLOW(<span class="string">"yellow color"</span>, <span class="number">3</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译器就会报错:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The constructor EnumDemo.Color(String, int) is undefined</div></pre></td></tr></table></figure>
<p>到此，你应该看明白了，枚举和普通的 Java 类很像。</p>
<p>对于类来讲，最好将其成员变量私有化，并且为成员变量提供 <code>get</code>、<code>set</code> 方法。</p>
<p>按照这个原则，可以进一步写好 <code>enum Color</code>，如下示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    RED(<span class="string">"red color"</span>, <span class="number">0</span>), GREEN(<span class="string">"green color"</span>, <span class="number">1</span>),</div><div class="line">    BLUE(<span class="string">"blue color"</span>, <span class="number">2</span>), YELLOW(<span class="string">"yellow color"</span>, <span class="number">3</span>);</div><div class="line">    </div><div class="line">    Color(String name, <span class="keyword">int</span> id) &#123;</div><div class="line">        _name = name;</div><div class="line">        _id = id;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String _name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _id;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        _name = name;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        _id = id;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是 Java 设计枚举的目的是提供一组常量，方便开发者使用。如果我们冒然的提供 <code>set</code> 方法（外界可以改变其成员属性），好像有点违背了设计的初衷。</p>
<p>那么，我们应该舍弃 <code>set</code> 方法，保留 <code>get</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    RED(<span class="string">"red color"</span>, <span class="number">0</span>), GREEN(<span class="string">"green color"</span>, <span class="number">1</span>),</div><div class="line">    BLUE(<span class="string">"blue color"</span>, <span class="number">2</span>), YELLOW(<span class="string">"yellow color"</span>, <span class="number">3</span>);</div><div class="line">    </div><div class="line">    Color(String name, <span class="keyword">int</span> id) &#123;</div><div class="line">        _name = name;</div><div class="line">        _id = id;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String _name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _id;</div><div class="line">        </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于普通的基本类可以将其实例化，那么，能否实例化枚举呢？</p>
<p>在回答这个问题之前，先来看看 <code>Color.class</code> 文件:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> Color &#123;</div><div class="line">    RED(<span class="string">"red color"</span>, <span class="number">0</span>), GREEN(<span class="string">"green color"</span>, <span class="number">1</span>),</div><div class="line">    BLUE(<span class="string">"blue color"</span>, <span class="number">2</span>), YELLOW(<span class="string">"yellow color"</span>, <span class="number">3</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String _name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> _id;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>._name = name;</div><div class="line">        <span class="keyword">this</span>._id = id;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，编译器淘气的为其构造方法加上了 <code>private</code>，那么也就是说，我们无法实例化枚举。</p>
<p>所有枚举类都继承了 <code>Enum</code> 类的方法，包括 <code>toString</code>、<code>equals</code>、<code>hashcode</code> 等方法。因为 <code>equals</code>、<code>hashcode</code> 方法是 <code>final</code> 的，所以不可以被枚举重写（只可以继承），但可以重写 <code>toString</code> 方法。</p>
<p><strong>文末的附录中提供了 <code>Enum</code> 的源码，有兴趣可以查看阅读！</strong></p>
<p>那么，使用 Java 的类来模拟一下枚举，大概是这个样子：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mark.demo;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color RED = <span class="keyword">new</span> Color(<span class="string">"red color"</span>, <span class="number">0</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color GREEN = <span class="keyword">new</span> Color(<span class="string">"green color"</span>, <span class="number">1</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color BLUE = <span class="keyword">new</span> Color(<span class="string">"blue color"</span>, <span class="number">2</span>);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Color YELLOW = <span class="keyword">new</span> Color(<span class="string">"yellow color"</span>, <span class="number">3</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String _name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> _id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Color</span><span class="params">(String name, <span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">        _name = name;</div><div class="line">        _id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> _id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Color&gt; <span class="title">values</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Color&gt; list = <span class="keyword">new</span> ArrayList&lt;Color&gt;();</div><div class="line">        list.add(RED);</div><div class="line">        list.add(GREEN);</div><div class="line">        list.add(BLUE);</div><div class="line">        list.add(YELLOW);</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"the color _name="</span> + _name + <span class="string">", _id="</span> + _id;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>Enum.java</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> java.lang;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.Serializable;</div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.InvalidObjectException;</div><div class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</div><div class="line"><span class="keyword">import</span> java.io.ObjectStreamException;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * This is the common base class of all Java language enumeration types.</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>  Josh Bloch</span></div><div class="line"><span class="comment"> * <span class="doctag">@author</span>  Neal Gafter</span></div><div class="line"><span class="comment"> * <span class="doctag">@version</span> %I%, %G%</span></div><div class="line"><span class="comment"> * <span class="doctag">@since</span>   1.5</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Enum</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">Enum</span>&lt;<span class="title">E</span>&gt;&gt;</span></div><div class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">E</span>&gt;, <span class="title">Serializable</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The name of this enum constant, as declared in the enum declaration.</span></div><div class="line"><span class="comment">     * Most programmers should use the &#123;<span class="doctag">@link</span> #toString&#125; method rather than</span></div><div class="line"><span class="comment">     * accessing this field.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the name of this enum constant, exactly as declared in its</span></div><div class="line"><span class="comment">     * enum declaration.</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * &lt;b&gt;Most programmers should use the &#123;<span class="doctag">@link</span> #toString&#125; method in</span></div><div class="line"><span class="comment">     * preference to this one, as the toString method may return</span></div><div class="line"><span class="comment">     * a more user-friendly name.&lt;/b&gt;  This method is designed primarily for</span></div><div class="line"><span class="comment">     * use in specialized situations where correctness depends on getting the</span></div><div class="line"><span class="comment">     * exact name, which will not vary from release to release.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the name of this enum constant</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">name</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * The ordinal of this enumeration constant (its position</span></div><div class="line"><span class="comment">     * in the enum declaration, where the initial constant is assigned</span></div><div class="line"><span class="comment">     * an ordinal of zero).</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * Most programmers will have no use for this field.  It is designed</span></div><div class="line"><span class="comment">     * for use by sophisticated enum-based data structures, such as</span></div><div class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> java.util.EnumSet&#125; and &#123;<span class="doctag">@link</span> java.util.EnumMap&#125;.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> ordinal;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the ordinal of this enumeration constant (its position</span></div><div class="line"><span class="comment">     * in its enum declaration, where the initial constant is assigned</span></div><div class="line"><span class="comment">     * an ordinal of zero).</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * Most programmers will have no use for this method.  It is</span></div><div class="line"><span class="comment">     * designed for use by sophisticated enum-based data structures, such</span></div><div class="line"><span class="comment">     * as &#123;<span class="doctag">@link</span> java.util.EnumSet&#125; and &#123;<span class="doctag">@link</span> java.util.EnumMap&#125;.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the ordinal of this enumeration constant</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">ordinal</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ordinal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Sole constructor.  Programmers cannot invoke this constructor.</span></div><div class="line"><span class="comment">     * It is for use by code emitted by the compiler in response to</span></div><div class="line"><span class="comment">     * enum type declarations.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name - The name of this enum constant, which is the identifier</span></div><div class="line"><span class="comment">     *               used to declare it.</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> ordinal - The ordinal of this enumeration constant (its position</span></div><div class="line"><span class="comment">     *         in the enum declaration, where the initial constant is assigned</span></div><div class="line"><span class="comment">     *         an ordinal of zero).</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Enum</span><span class="params">(String name, <span class="keyword">int</span> ordinal)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.ordinal = ordinal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the name of this enum constant, as contained in the</span></div><div class="line"><span class="comment">     * declaration.  This method may be overridden, though it typically</span></div><div class="line"><span class="comment">     * isn't necessary or desirable.  An enum type should override this</span></div><div class="line"><span class="comment">     * method when a more "programmer-friendly" string form exists.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the name of this enum constant</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns true if the specified object is equal to this</span></div><div class="line"><span class="comment">     * enum constant.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> other the object to be compared for equality with this object.</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span>  true if the specified object is equal to this</span></div><div class="line"><span class="comment">     *          enum constant.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object other)</span> </span>&#123; </div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>==other;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns a hash code for this enum constant.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> a hash code for this enum constant.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.hashCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Throws CloneNotSupportedException.  This guarantees that enums</span></div><div class="line"><span class="comment">     * are never cloned, which is necessary to preserve their "singleton"</span></div><div class="line"><span class="comment">     * status.</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> (never returns)</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CloneNotSupportedException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Compares this enum with the specified object for order.  Returns a</span></div><div class="line"><span class="comment">     * negative integer, zero, or a positive integer as this object is less</span></div><div class="line"><span class="comment">     * than, equal to, or greater than the specified object.</span></div><div class="line"><span class="comment">     * </span></div><div class="line"><span class="comment">     * Enum constants are only comparable to other enum constants of the</span></div><div class="line"><span class="comment">     * same enum type.  The natural order implemented by this</span></div><div class="line"><span class="comment">     * method is the order in which the constants are declared.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(E o)</span> </span>&#123;</div><div class="line">    Enum other = (Enum)o;</div><div class="line">    Enum self = <span class="keyword">this</span>;</div><div class="line">    <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></div><div class="line">      self.getDeclaringClass() != other.getDeclaringClass())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassCastException();</div><div class="line">        <span class="keyword">return</span> self.ordinal - other.ordinal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the Class object corresponding to this enum constant's</span></div><div class="line"><span class="comment">     * enum type.  Two enum constants e1 and  e2 are of the</span></div><div class="line"><span class="comment">     * same enum type if and only if</span></div><div class="line"><span class="comment">     *   e1.getDeclaringClass() == e2.getDeclaringClass().</span></div><div class="line"><span class="comment">     * (The value returned by this method may differ from the one returned</span></div><div class="line"><span class="comment">     * by the &#123;<span class="doctag">@link</span> Object#getClass&#125; method for enum constants with</span></div><div class="line"><span class="comment">     * constant-specific class bodies.)</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the Class object corresponding to this enum constant's</span></div><div class="line"><span class="comment">     *     enum type</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title">getDeclaringClass</span><span class="params">()</span> </span>&#123;</div><div class="line">        Class clazz = getClass();</div><div class="line">        Class zuper = clazz.getSuperclass();</div><div class="line">        <span class="keyword">return</span> (zuper == Enum.class) ? clazz : zuper;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Returns the enum constant of the specified enum type with the</span></div><div class="line"><span class="comment">     * specified name.  The name must match exactly an identifier used</span></div><div class="line"><span class="comment">     * to declare an enum constant in this type.  (Extraneous whitespace</span></div><div class="line"><span class="comment">     * characters are not permitted.) </span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> enumType the &lt;tt&gt;Class&lt;/tt&gt; object of the enum type from which</span></div><div class="line"><span class="comment">     *      to return a constant</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> name the name of the constant to return</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> the enum constant of the specified enum type with the</span></div><div class="line"><span class="comment">     *      specified name</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if the specified enum type has</span></div><div class="line"><span class="comment">     *         no constant with the specified name, or the specified</span></div><div class="line"><span class="comment">     *         class object does not represent an enum type</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if &lt;tt&gt;enumType&lt;/tt&gt; or &lt;tt&gt;name&lt;/tt&gt;</span></div><div class="line"><span class="comment">     *         is null</span></div><div class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Enum&lt;T&gt;&gt; <span class="function">T <span class="title">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span></div><div class="line"><span class="function"><span class="params">                                                String name)</span> </span>&#123;</div><div class="line">        T result = enumType.enumConstantDirectory().get(name);</div><div class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        <span class="keyword">if</span> (name == <span class="keyword">null</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">"Name is null"</span>);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</div><div class="line">            <span class="string">"No enum const "</span> + enumType +<span class="string">"."</span> + name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">      * prevent default deserialization</span></div><div class="line"><span class="comment">      */</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(ObjectInputStream in)</span> <span class="keyword">throws</span> IOException,</span></div><div class="line"><span class="function">        ClassNotFoundException </span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObjectNoData</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException </span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> InvalidObjectException(<span class="string">"can't deserialize enum"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * enum classes cannot have finalize methods.</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> </span>&#123; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS java enum </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[json-c]]></title>
      <url>/2019/03/10/json-c/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="https://github.com/json-c/json-c" target="_blank" rel="noopener">json-c</a> 是 C 语言写的一套构建和解析 JSON 的库。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JSON-C implements a reference counting object model that allows you to easily construct JSON objects in C, output them as JSON formatted strings and parse JSON formatted strings back into the C representation of JSON objects. </div><div class="line">It aims to conform to RFC 7159.</div></pre></td></tr></table></figure>
<p>使用 C 语言编写的 JSON 库还有很多，可以在 <a href="http://www.json.org/json-zh.html" target="_blank" rel="noopener">介绍 JSON</a> 中查找到，除了 C语言的还有其他语言编写的 JSON 开源库。</p>
<p>所有发布的 <code>json-c</code> 库版本在 <a href="https://github.com/json-c/json-c/releases" target="_blank" rel="noopener">这里</a> 都可以找到，本篇编译的是 <a href="https://github.com/json-c/json-c/releases/tag/json-c-0.13.1-20180305" target="_blank" rel="noopener">json-c-0.13.1-20180305</a> 这个版本。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p><strong>一、下载、解压</strong></p>
<p>直接下载最新版本 <a href="https://github.com/json-c/json-c/releases/tag/json-c-0.13.1-20180305" target="_blank" rel="noopener">json-c-0.13.1-20180305</a>，截止到本文发布该版本为最新版本。</p>
<p>解压刚才下载好的文件，解压后将文件夹重命名为 <code>json-c-src</code>，当然你也可以不重名它。</p>
<p>打开 macOS 终端，进入 <code>json-c-src</code> 文件夹</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> json-c-src</div></pre></td></tr></table></figure>
<p><strong>二、源码编译</strong></p>
<p>在编译之前，确保你已经在 macOS 中安装了下面的工具：</p>
<p><strong>1、</strong>gcc, clang, 或者其他 C 编译器；<br><strong>2、</strong>libtool 工具，版本不能低于 2.2.6b；<br><strong>3、</strong>autoconf 工具，版本不能低于 2.64 (autoreconf)；<br><strong>4、</strong>automake工具，版本不能低于 1.13；</p>
<p>如果没有安装上面的工具，可以使用 <code>Homebrew</code> 进行安装。</p>
<p>在桌面新建个文件夹 <code>json-c</code>，这个文件夹用来放待会编译后的文件（库和头文件）。</p>
<p>执行下面的命令开始配置和编译，如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/Users/man/Desktop/json-c</div><div class="line"></div><div class="line">make</div><div class="line"></div><div class="line">make install</div></pre></td></tr></table></figure>
<p>注意：<code>/Users/man/Desktop/json-c</code> 要写绝对路径，否则编译报错。</p>
<p>如果要支持多线程，可以加上 <code>--enable-threading</code> 这个选项，即：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">./configure --<span class="built_in">enable</span>-threading --prefix=/Users/man/Desktop/json-c</div><div class="line"></div><div class="line">make</div><div class="line"></div><div class="line">make install</div></pre></td></tr></table></figure>
<p>编译成功后，在 <code>json-c</code> 会生成对应的库和头文件，如下：<br><img src="/upload/images/2019/03/10/1.jpg" alt=""></p>
<p><img src="/upload/images/2019/03/10/2.jpg" alt=""></p>
<h2 id="使用-json-c"><a href="#使用-json-c" class="headerlink" title="使用 json-c"></a>使用 json-c</h2><p>编译成功后，可以试用一下 <code>json-c</code> 这个库了，我把 <code>libjson-c.a</code> 和对应的 <code>include</code> 文件夹放进 macOS 工程，编译无法通过，报错，然后换为 <code>libjson-c.4.dylib</code> 编译通过但是运行报错，意思是无法加载该库。</p>
<p>同样道理，在 iOS 工程上面直接使用这两个库也是无法使用。</p>
<p>于是我就使用 <code>lipo</code> 来查看一下库所支持的架构，看一下下面的结果。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ lipo -info libjson-c.a </div><div class="line"></div><div class="line">Non-fat file: libjson-c.a is architecture: x86_64</div><div class="line"></div><div class="line">$ lipo -info libjson-c.4.dylib </div><div class="line"></div><div class="line">Non-fat file: libjson-c.4.dylib is architecture: x86_64</div></pre></td></tr></table></figure>
<p>可以看出两个库均可以支持 x86_64，按道理是可以支持 macOS 和 iOS 模拟器运行的，macOS 上面可以使用 <code>set | grep &quot;MACHTYPE&quot;</code> 命令查看其操作系统架构。</p>
<p><code>libjson-c.a</code> 是静态库，<code>libjson-c.4.dylib</code> 是动态库，可以使用 <code>file</code> 命令查看。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ file libjson-c.a </div><div class="line"></div><div class="line">libjson-c.a: current ar archive</div><div class="line"></div><div class="line">$ file libjson-c.4.dylib </div><div class="line"></div><div class="line">libjson-c.4.dylib: Mach-O 64-bit dynamically linked shared library x86_64</div></pre></td></tr></table></figure>
<p><strong>注意</strong>：显示 <code>ar archive</code> 表示是静态库。</p>
<p>最后自己没有找到好的办法，只能采取第二个办法，源码直接放进 Xcode 工程里面编译使用。</p>
<p>在放进 Xcode 工程之前，需要将下载的源码进行配置操作，即：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure>
<p>这样会产生对应 <code>config.h</code> 等文件，然后将源码中所有 <code>.h</code> 和 <code>.c</code> 的文件拷贝至工程中即可编译使用了。</p>
<p><strong>注意</strong>：如果不执行 <code>./configure</code> 操作，拷贝的源文件不全，无法通过编译。</p>
<p>简单例子，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"json-c/json.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    json_object *jsonObj = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    jsonObj = json_tokener_parse(<span class="string">"&#123; \"uid\": 12, \"name\": \"foobar\", \"isComer\": 1, \"age\": 21, \"extras\": [ 11, 52, 3, \"unknow\", 75 ] &#125;"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *jsonString = json_object_to_json_string(jsonObj);</div><div class="line">    </div><div class="line">    printf(<span class="string">"obj.to_string()=%s\n"</span>, jsonString);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>对应输出结果，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">obj.to_string()=&#123; &quot;uid&quot;: 12, &quot;name&quot;: &quot;foobar&quot;, &quot;isComer&quot;: 1, &quot;age&quot;: 21, &quot;extras&quot;: [ 11, 52, 3, &quot;unknow&quot;, 75 ] &#125;</div></pre></td></tr></table></figure>
<h2 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h2><p>Objective-C 已经提供了关于 JSON 的库了，干嘛还折腾 json-c  呢？</p>
<p>的确，自从 iOS 5.0+，macOS 10.7+ 之后，<code>Foundation</code> 框架已经提供了 <code>NSJSONSerialization</code>，我主要是好奇 <code>json-c</code> 这个库，看他的跨平台能力而已。</p>
<p>关于 <code>NSJSONSerialization</code> 可以查看 <a href="https://developer.apple.com/documentation/foundation/nsjsonserialization?language=objc" target="_blank" rel="noopener">API 文档</a>。</p>
<hr>
<p>本次分享，告辞！</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C json json-c </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不见得你会计算C字符串长度]]></title>
      <url>/2019/03/07/%E4%B8%8D%E8%A7%81%E5%BE%97%E4%BD%A0%E4%BC%9A%E8%AE%A1%E7%AE%97C%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%95%BF%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h2 id="C-字符串"><a href="#C-字符串" class="headerlink" title="C 字符串"></a>C 字符串</h2><p>在 C 语言中，字符串实际上是使用字符 <code>&#39;\0&#39;</code> 终止的一维字符数组。</p>
<p>以下几种方式表示的都是 C 字符串的正确表达方式。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 要以 '\0' 结尾</span></div><div class="line"><span class="keyword">char</span> greeting[<span class="number">6</span>] = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 要以 '\0' 结尾</span></div><div class="line"><span class="keyword">char</span> greeting[] = &#123;<span class="string">'H'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 默认会在末尾增加'\0'</span></div><div class="line"><span class="keyword">char</span> greeting[] = &#123;<span class="string">"Hello"</span>&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 上面的简写形式</span></div><div class="line"><span class="keyword">char</span> greeting[] = <span class="string">"Hello"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 默认会在末尾增加'\0'</span></div><div class="line"><span class="keyword">char</span> *greeting = <span class="string">"Hello"</span>;</div></pre></td></tr></table></figure>
<p>看下面另外一种声明方式：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting: %s\n"</span>, greeting);</div></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">greeting: hello\<span class="number">376</span></div></pre></td></tr></table></figure>
<p>这个结果在不同编译器下面可能还会不一样，总之输出都不是我们想要的结果。这种方式创建的字符串没有 <code>&#39;\0&#39;</code>，不算是真正的 C 字符串，所以建议大家在声明 C 字符串的时候使用字符指针（char *）的方式。</p>
<p><code>string.h</code> 里面声明了很多关于操作 C 字符串的库函数。</p>
<h2 id="字符串长度"><a href="#字符串长度" class="headerlink" title="字符串长度"></a>字符串长度</h2><p>这里在说计算字符串长度的前提是字符编码都是按照UTF-8（中文占用3个字节，英文占用1个字节）的编码形式为前提的。我们先来看下面这个例子，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *greeting1 = <span class="string">"hello"</span>;</div><div class="line"><span class="keyword">char</span> greeting2[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</div><div class="line"><span class="keyword">char</span> greeting3[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span>&#125;;</div><div class="line"><span class="keyword">char</span> greeting4[] = <span class="string">"hello"</span>;</div><div class="line">    </div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting1 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting1), <span class="built_in">strlen</span>(greeting1));</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting2 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting2), <span class="built_in">strlen</span>(greeting2));</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting3 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting3), <span class="built_in">strlen</span>(greeting3));</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting4 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting4), <span class="built_in">strlen</span>(greeting4));</div></pre></td></tr></table></figure>
<p>如果你能说出上面 <code>printf</code> 的结果，基本上关于计算字符串长度的问题就迎刃而解了。</p>
<p>按照 UTF-8 编码，上面例子的输出结果如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">greeting1 sizeOf: 8, strlen: 5</div><div class="line">greeting2 sizeOf: 5, strlen: 7</div><div class="line">greeting3 sizeOf: 6, strlen: 5</div><div class="line">greeting4 sizeOf: 6, strlen: 5</div></pre></td></tr></table></figure>
<p>如果输出结果令你无法相信，可以选择继续往下看或者你自己写代码试试。</p>
<h2 id="sizeof、strlen"><a href="#sizeof、strlen" class="headerlink" title="sizeof、strlen"></a>sizeof、strlen</h2><p>在 <a href="https://linux.die.net/man/3/strlen" target="_blank" rel="noopener">linux.die</a> 可以查到 strlen 的说明，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Synopsis:</div><div class="line">#include &lt;string.h&gt;</div><div class="line">size_t strlen(const char *s);</div><div class="line"></div><div class="line">Description:</div><div class="line">The strlen() function calculates the length of the string s, excluding the terminating null byte (aq\0aq).</div><div class="line"></div><div class="line">Return Value:</div><div class="line">The strlen() function returns the number of bytes in the string s.</div></pre></td></tr></table></figure>
<p>函数 <code>strlen</code> 返回字符串里的字符数，不包括终止字符 <code>&#39;\0&#39;</code>，这里注意 <code>strlen</code> 是一个 C 的函数，而 <code>sizeof</code> 只是一个操作符。</p>
<p>我们知道，<code>sizeof</code> 操作符的参数可以是数组、指针、类型、对象、函数等，函数 <code>strlen</code> 的参数只能是字符串。</p>
<p>对于 <code>sizeof</code>， 其参数不同时，其返回的值也不一样，如下：</p>
<p>1、数组：编译时分配的数组空间大小；<br>2、指针：存储该指针所用的空间大小(32位机器上是4，64位机器上是8)；<br>3、类型：该类型所占的空间大小；<br>4、对象：对象的实际占用空间大小(这个指的是在 C++ 中)；<br>5、函数：函数的返回类型所占的空间大小。函数的返回类型不能是 void 类型；</p>
<p>那我们再回头看看上面的例子，我把要说明的写在注释上面了。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意这里是指针</span></div><div class="line"><span class="keyword">char</span> *greeting1 = <span class="string">"hello"</span>;</div><div class="line"></div><div class="line"><span class="comment">// 没有结束符 '\0'，其 strlen 结果不确定</span></div><div class="line"><span class="keyword">char</span> greeting2[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>&#125;;</div><div class="line"></div><div class="line"><span class="keyword">char</span> greeting3[] = &#123;<span class="string">'h'</span>, <span class="string">'e'</span>, <span class="string">'l'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'\0'</span>&#125;;</div><div class="line"><span class="keyword">char</span> greeting4[] = <span class="string">"hello"</span>;</div><div class="line">    </div><div class="line"><span class="comment">/* 结果是 8、5 */</span></div><div class="line"><span class="comment">/* greeting1是指针，sizeOf计算的是其存储该指针所用的空间大小，因为我使用的是64位 macOS，所以输出是8 */</span></div><div class="line"><span class="comment">/*strlen 计算的是字符个数但是不包括结束符 '\0'*/</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting1 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting1), <span class="built_in">strlen</span>(greeting1));</div><div class="line"></div><div class="line"><span class="comment">/* 结果是 5、7 */</span></div><div class="line"><span class="comment">/* sizeof 计算的是编译时分配的数组空间大小，这里是5 */</span></div><div class="line"><span class="comment">/* greeting2没有结束符，strlen 的计算结果不确定 */</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting2 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting2), <span class="built_in">strlen</span>(greeting2));</div><div class="line"></div><div class="line"><span class="comment">/* 结果是 6、5 */</span></div><div class="line"><span class="comment">/* sizeof 计算的是编译时分配的数组空间大小，这里是6，因为多了结束符 */</span></div><div class="line"><span class="comment">/*strlen 计算的是字符个数但是不包括结束符 '\0'*/</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting3 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting3), <span class="built_in">strlen</span>(greeting3));</div><div class="line"></div><div class="line"><span class="comment">/* 结果是 6、5，这里类似上面的情况，不再赘述 */</span></div><div class="line"><span class="built_in">printf</span>(<span class="string">"greeting4 sizeOf: %ld, strlen: %ld\n"</span>, <span class="keyword">sizeof</span>(greeting4), <span class="built_in">strlen</span>(greeting4));</div></pre></td></tr></table></figure>
<p><strong>小结</strong>：</p>
<p>1、<code>sizeof</code> 是一个操作符，而 <code>strlen</code> 是 C 语言的库函数。</p>
<p>2、<code>sizeof</code> 的参数可以是任意数据类型或者表达式，而 <code>strlen</code> 只能以结尾为 <code>&#39;\0&#39;</code> 的字符串作参数。</p>
<p>3、<code>sizeof</code> 的结果在编译时就计算出了，而 <code>strlen</code> 必须在运行时才能计算出来。</p>
<p>4、<code>sizeof</code> 计算数据类型占内存的大小，<code>strlen</code> 计算字符串实际长度，要记住 <code>strlen</code> 计算出来的结果不包括结束符 <code>&#39;\0&#39;</code>。</p>
<p>5、<code>sizeof</code> 反应的并非真实字符串长度而是所占空间大小，所以<code>memset</code> 初始化字符串的时候用 <code>sizeof</code> 较好。</p>
<p>6、系统函数返回值是 <code>char *</code> (字符指针)类型的会在末尾加上结束符 <code>&#39;\0&#39;</code>。</p>
<p>7、无论是 <code>sizeof</code> 还是 <code>strlen</code> 计算结果的单位都是字节。</p>
<p>我们还需要注意一点，<code>strlen</code> 函数，当数组名作为参数传入时，实际上数组就退化成指针了。举个例子，如下图所示：</p>
<p><img src="/upload/images/2019/03/07/1.jpg" alt=""></p>
<p>可以看出传入进来的参数会被退化为指针。</p>
<h2 id="探索无止境"><a href="#探索无止境" class="headerlink" title="探索无止境"></a>探索无止境</h2><p>在文章的开始，我给出了几种 C 字符串的正确表达方式，那我们再来看另外一种。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[<span class="number">4</span>] = <span class="string">"blog"</span>;</div></pre></td></tr></table></figure>
<p>这种方式看起来好像很完美的样子，其实是不对的，写个例子给大家，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">char</span> greeting[<span class="number">4</span>] = <span class="string">"blog"</span>;</div><div class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(greeting);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"greeting len: %ld\n"</span>, len);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"greeting: %s\n"</span>, greeting);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行，结果如下：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">greeting len: 10</div><div class="line">greeting: blog\330\365\277\357\376</div></pre></td></tr></table></figure>
<p>苍天呀，这结果让人无语。。。</p>
<p>对于 <code>char greeting[4] = &quot;blog&quot;</code> 其实是定义一个长度为 4 的字符数组，但是字符串 <code>&quot;blog&quot;</code> 实际是要包括结束符 <code>\0</code> 的，也就是说下面的代码</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[<span class="number">4</span>] = <span class="string">"blog"</span>;</div></pre></td></tr></table></figure>
<p>本质和下面代码是一样的，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> greeting[] = &#123;<span class="string">'b'</span>, <span class="string">'l'</span>, <span class="string">'o'</span>, <span class="string">'g'</span>&#125;;</div></pre></td></tr></table></figure>
<p>显然是不正确的，那我们修改一下代码，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// 注意这里是 5</span></div><div class="line">    <span class="keyword">char</span> greeting[<span class="number">5</span>] = <span class="string">"blog"</span>;</div><div class="line">    <span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(greeting);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"greeting len: %ld\n"</span>, len);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"greeting: %s\n"</span>, greeting);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者这样写：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">// 这里干脆不要写数字</span></div><div class="line">    <span class="keyword">char</span> greeting[] = <span class="string">"blog"</span>;</div><div class="line">  	<span class="keyword">size_t</span> len = <span class="built_in">strlen</span>(greeting);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"greeting len: %ld\n"</span>, len);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"greeting: %s\n"</span>, greeting);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样修改后，再编译运行结果就对了，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">greeting len: <span class="number">4</span></div><div class="line">greeting: blog</div></pre></td></tr></table></figure>
<hr>
<p><strong>我们知道的东西是有限的，我们不知道的东西则是无穷的。</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C char strlen sizeof </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 使用 libcurl]]></title>
      <url>/2019/03/03/iOS-%E4%BD%BF%E7%94%A8-libcurl/</url>
      <content type="html"><![CDATA[<h2 id="libcurl-简介"><a href="#libcurl-简介" class="headerlink" title="libcurl 简介"></a>libcurl 简介</h2><p><a href="https://curl.haxx.se/libcurl/" target="_blank" rel="noopener">libcurl</a> 是用C语言写的一套 <a href="https://github.com/curl/curl" target="_blank" rel="noopener">开源</a> 库，是为网络客户端提供数据传输功能的函数库。</p>
<p><a href="https://curl.haxx.se/libcurl/" target="_blank" rel="noopener">libcurl</a> 支持 SMTP、HTTP、HTTPS、FTP、TELNET 等协议和各种 SSL 安全认证，支持 Solaris, NetBSD, FreeBSD, OpenBSD, Darwin, HPUX, IRIX, AIX, Tru64, Linux, UnixWare, HURD, Windows, Amiga, OS/2, BeOs, Mac OS X, Ultrix, QNX, OpenVMS, RISC OS, Novell NetWare, DOS 等平台，在 Android 和 iOS 上面也可以使用 libcurl 这个库。</p>
<p>下面是官网的英文简介：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">libcurl is a free and easy-to-use client-side URL transfer library, supporting DICT, FILE, FTP, FTPS, Gopher, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, Telnet and TFTP. </div><div class="line">libcurl supports SSL certificates, HTTP POST, HTTP PUT, FTP uploading, HTTP form based upload, proxies, cookies, user+password authentication (Basic, Digest, NTLM, Negotiate, Kerberos), file transfer resume, http proxy tunneling and more!</div><div class="line"></div><div class="line">libcurl is highly portable, it builds and works identically on numerous platforms, including Solaris, NetBSD, FreeBSD, OpenBSD, Darwin, HPUX, IRIX, AIX, Tru64, Linux, UnixWare, HURD, Windows, Amiga, OS/2, BeOs, Mac OS X, Ultrix, QNX, OpenVMS, RISC OS, Novell NetWare, DOS and more...</div><div class="line"></div><div class="line">libcurl is free, thread-safe, IPv6 compatible, feature rich, well supported, fast, thoroughly documented and is already used by many known, big and successful companies.</div></pre></td></tr></table></figure>
<h2 id="分享内容"><a href="#分享内容" class="headerlink" title="分享内容"></a>分享内容</h2><p>今天跟大家分享 libcurl 在 iOS 上面如何使用，主要分享内容如下：</p>
<p>1、iOS 工程集成 libcurl以及集成注意事项。<br>2、利用 libcurl 发送 HTTP GET 和 POST 请求。<br>3、使用 springboot 搭建本地服务，这个只是为了演示不是分享的重点。</p>
<h2 id="搭建本地服务"><a href="#搭建本地服务" class="headerlink" title="搭建本地服务"></a>搭建本地服务</h2><p>本地服务采用 <code>Spring Boot</code> 开发，开发语言是 <code>Java</code>，JDK 版本1.8，<code>Spring Boot</code> 版本是 <code>v2.1.3.RELEASE</code>，集成 <code>Web</code> 组件即可，比较简单。关于如何搭建 <code>Spring Boot</code>的开发环境，大家自行搜索解决，也可以直接使用我的 git 工程，<a href="https://github.com/veryitman/tutorial_libcurl" target="_blank" rel="noopener">猛戳前往</a> 即可获取完整代码示例。</p>
<p>工程结构如下图所示：<br><img src="/upload/images/2019/03/03/1.jpg" alt=""></p>
<p>关键代码如下：<br><img src="/upload/images/2019/03/03/2.jpg" alt=""></p>
<p>该工程只是为了配合 libcurl 的使用而诞生的，没有什么难度。</p>
<h2 id="集成-libcurl"><a href="#集成-libcurl" class="headerlink" title="集成 libcurl"></a>集成 libcurl</h2><p><strong>1、新建 iOS 工程</strong></p>
<p>这里工程为 <code>tutorial_libcurl_iOS</code>。</p>
<p><strong>2、准备库文件、头文件</strong></p>
<p>libcurl 可以自己编译，也可以使用别人编译好的二进制文件。我使用的是 <a href="https://github.com/gcesarmza/curl-android-ios.git" target="_blank" rel="noopener">curl-android-ios </a> 这个工程里面编译好的文件。</p>
<p><img src="/upload/images/2019/03/03/3.jpg" alt=""></p>
<p><strong>3、给工程 <code>tutorial_libcurl_iOS</code> 添加库和头文件</strong></p>
<p>将上面的文件拷贝至工程目录即可，现在工程目录如下：<br><img src="/upload/images/2019/03/03/4.jpg" alt=""></p>
<p><strong>4、设置路径</strong></p>
<p>在 xcode 中 <code>Building Settings</code> 找到 <code>User Header Search Paths</code> 为如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(SRCROOT)/tutorial_libcurl_iOS/Classes</div></pre></td></tr></table></figure>
<p>这一步不是必须的，我个人比较喜欢这样整理和设置目录。</p>
<p><strong>5、添加 libz.tbd</strong></p>
<p><img src="/upload/images/2019/03/03/5.jpg" alt=""></p>
<p>如果不添加这个库，编译无法通过，会显示如下错误：<br><img src="/upload/images/2019/03/03/6.jpg" alt=""></p>
<h2 id="发送-HTTP-请求"><a href="#发送-HTTP-请求" class="headerlink" title="发送 HTTP 请求"></a>发送 HTTP 请求</h2><p>下面说一下如何使用 libcurl 来发送 HTTP 的 GET 和 POST 请求。只给出核心示例代码，其余的大家去 <a href="https://github.com/veryitman/tutorial_libcurl" target="_blank" rel="noopener">tutorial_libcurl</a> 获取完整示例代码，包括 <code>Spring Boot</code> 的。</p>
<p><strong>ViewController.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"curl/curl.h"</span></span></div><div class="line"></div><div class="line"><span class="comment">// 我本机的 IP 和端口，实际你要换成你自己的</span></div><div class="line"><span class="meta">#define HOST_URL @<span class="meta-string">"http://172.20.10.2:8080/user"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)doHTTPGETToFileAction:(<span class="keyword">id</span>)sender</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *reqUrl = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@%@"</span>, HOST_URL, <span class="string">@"?id=1&amp;name=veryitman"</span>];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *url = [reqUrl cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    http_get_req(url);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">IBAction</span>)doHTTPPOSTToFileAction:(<span class="keyword">id</span>)sender</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *url = [HOST_URL cStringUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *data = <span class="string">"id=2&amp;name=veryitman"</span>;</div><div class="line">    http_post_req(url, data);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#pragma mark - C</span></div><div class="line"></div><div class="line"><span class="keyword">void</span> http_get_req(<span class="keyword">const</span> <span class="keyword">char</span> *url)</div><div class="line">&#123;</div><div class="line">    CURL *curl;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fpath = rspDataPath(<span class="string">@"http_get_rsp_data.log"</span>);</div><div class="line"></div><div class="line">    FILE *fp;</div><div class="line">    fp = fopen(fpath, <span class="string">"wt+"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">struct</span> curl_slist *headers = <span class="literal">NULL</span>;</div><div class="line">    <span class="comment">//增加HTTP header</span></div><div class="line">    headers = curl_slist_append(headers, <span class="string">"Accept:application/json"</span>);</div><div class="line">    headers = curl_slist_append(headers, <span class="string">"Content-Type:application/json"</span>);</div><div class="line">    headers = curl_slist_append(headers, <span class="string">"charset:utf-8"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//初始化</span></div><div class="line">    curl = curl_easy_init();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (curl) &#123;</div><div class="line">        <span class="comment">//改协议头</span></div><div class="line">        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);</div><div class="line">        curl_easy_setopt(curl, CURLOPT_URL, url);</div><div class="line"></div><div class="line">        curl_easy_setopt(curl, CURLOPT_POST, url);</div><div class="line"></div><div class="line">        <span class="comment">//wt+：读写打开或着建立一个文本文件；允许读写</span></div><div class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> != fp) &#123;</div><div class="line">            <span class="comment">// 请求结果写入到文件当中</span></div><div class="line">            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        CURLcode rsp_code = curl_easy_perform(curl);</div><div class="line">        <span class="keyword">if</span> (CURLE_OK == rsp_code) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"请求返回成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"请求返回失败，返回码是 %i"</span>, rsp_code);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        curl_slist_free_all(headers);</div><div class="line"></div><div class="line">        curl_easy_cleanup(curl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> http_post_req(<span class="keyword">const</span> <span class="keyword">char</span> *url, <span class="keyword">const</span> <span class="keyword">char</span> *req_data)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fpath = rspDataPath(<span class="string">@"http_post_rsp_data.log"</span>);</div><div class="line"></div><div class="line">    FILE *fp;</div><div class="line">    fp = fopen(fpath, <span class="string">"wt+"</span>);</div><div class="line"></div><div class="line">    CURL *curl;</div><div class="line">    curl = curl_easy_init();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (curl) &#123;</div><div class="line">        curl_easy_setopt(curl, CURLOPT_URL, url);</div><div class="line"></div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"length: %ld"</span>, strlen(req_data));</div><div class="line"></div><div class="line">        <span class="comment">/* size of the POST data */</span></div><div class="line">        curl_easy_setopt(curl, CURLOPT_POSTFIELDSIZE, strlen(req_data) + <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="comment">/* pass in a pointer to the data - libcurl will not copy */</span></div><div class="line">        curl_easy_setopt(curl, CURLOPT_POSTFIELDS, req_data);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="literal">NULL</span> != fp) &#123;</div><div class="line">            <span class="comment">// 请求结果写入到文件当中</span></div><div class="line">            curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        CURLcode rsp_code = curl_easy_perform(curl);</div><div class="line">        <span class="keyword">if</span> (CURLE_OK == rsp_code) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"请求返回成功"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"请求返回失败，返回码是 %i"</span>, rsp_code);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        curl_easy_cleanup(curl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fclose(fp);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>启动 Spring Boot 项目，启动成功后，再运行 xcode 工程，可以测试。</p>
<p><img src="/upload/images/2019/03/03/7.jpg" alt=""></p>
<p>点击对应的按钮就可以发送 GET 和 POST 请求了。</p>
<p>请求返回的结果被写入到了沙盒文件中，可以在终端使用 <code>cat</code> 命令查看对应的响应结果。</p>
<p>GET 响应结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/Library/Developer/CoreSimulator/Devices/BA882AC3-7977-49C7-8B0D-65EFD1541B68/data/Containers/Data/Application/3A21CFC5-3044-4FC0-9BFA-B311A59187AF/Documents/http_get_rsp_data.log</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user info: id=2 name=veryitman</div></pre></td></tr></table></figure>
<p>POST 响应结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/Library/Developer/CoreSimulator/Devices/BA882AC3-7977-49C7-8B0D-65EFD1541B68/data/Containers/Data/Application/86E7D457-97B1-4D8C-80D5-E8179B691F76/Documents/http_post_rsp_data.log</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">user info: id=2 name=veryitman</div></pre></td></tr></table></figure>
<p>后续为大家分享如何使用回调来接收 HTTP 响应数据、其他网络请求的情况以及 Android 上面如何使用 libcurl 库。</p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> curl libcurl springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Emscripten：JS 调用 C、C++]]></title>
      <url>/2019/03/02/Emscripten%EF%BC%9AJS-%E8%B0%83%E7%94%A8-C%E3%80%81C/</url>
      <content type="html"><![CDATA[<p>在 <a href="http://www.veryitman.com/2019/02/15/%E4%BA%86%E8%A7%A3-Emscripten/" target="_blank" rel="noopener">了解 Emscripten</a> 中，给大家简单分享了 <code>Emscripten</code> 是什么以及其使用场景。今天继续分享如何使用 JS 调用 C/C++ 代码。</p>
<h2 id="神奇的-main-函数"><a href="#神奇的-main-函数" class="headerlink" title="神奇的 main 函数"></a>神奇的 main 函数</h2><p>下面是 <a href="http://www.veryitman.com/2019/02/15/%E4%BA%86%E8%A7%A3-Emscripten/" target="_blank" rel="noopener">了解 Emscripten</a> 中的例子代码，只有一个 <code>main</code> 函数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">int main(int argc, char ** argv) </div><div class="line">&#123;</div><div class="line">    printf(&quot;Emscripten show in browser...\n&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <code>Emscripten SDK</code> 编译后生成了对应的 html、js 和 wasm 文件。</p>
<p>第一次编译会较慢, 编译完成后会在 <code>~/.emscripten_cache</code> 生成缓存目录和缓存文件, 以后再次编译就比较快了.</p>
<p>可以在火狐或者 <code>Chrome</code> 或者 <code>Safari</code> 上面运行 <code>h_emcc.html</code> 文件.</p>
<p>这里在火狐浏览器上面可以直接打开 <code>mz.html</code> 文件, 如果是在 <code>Chrome</code> 或者 <code>Safari</code> 需要执行下面命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emrun mz.html</div></pre></td></tr></table></figure>
<p>或者指定浏览器打开该文件.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emrun --browser chrome mz.html</div></pre></td></tr></table></figure>
<p>关于 <code>emrun</code> 的其他用法，可以使用 <code>emrun --help</code> 来查看。这里在浏览器可以看到对应 <code>main</code> 函数的输出，说明 <code>Emscripten</code> 生成的代码默认会调用 <code>main</code> 函数。</p>
<h2 id="EMSCRIPTEN-KEEPALIVE"><a href="#EMSCRIPTEN-KEEPALIVE" class="headerlink" title="EMSCRIPTEN_KEEPALIVE"></a>EMSCRIPTEN_KEEPALIVE</h2><p>既然 <code>Emscripten</code> 生成的代码默认会调用 <code>main</code> 函数，那么如果想使用其他函数怎么办呢？</p>
<p>我们可以在函数前添加 <code>EMSCRIPTEN_KEEPALIVE</code>，它在<code>emscripten.h</code> 文件中有声明，这个可以通过源码查看。</p>
<p>下面还是举个例子来说明。</p>
<p><strong>my.html</strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en-us"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 省略... --&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">document.querySelector('.mybutton').addEventListener('click', function()&#123;</div><div class="line">          alert('检查控制台');</div><div class="line">          var result = Module.ccall('sum', // name of C function</div><div class="line">                                     null, // return type</div><div class="line">                                     null, // argument types</div><div class="line">                                     null); // arguments</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"hello3.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>里面引用了 <code>hello3.js</code> 并且使用 <code>Module.ccall</code> 调用了 C 函数 <code>sum</code>。</p>
<p><strong>hello.c</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emscripten/emscripten.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello emcc\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="title">sum</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sum = %i\n"</span>, <span class="number">100</span>);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>编译 <code>hello.c</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emcc -o hello.html hello.c -O3 -s &quot;EXTRA_EXPORTED_RUNTIME_METHODS=[&apos;ccall&apos;]&quot;</div></pre></td></tr></table></figure>
<p>注意：<code>EXTRA_EXPORTED_RUNTIME_METHODS</code> 设置了 Module 的导出函数，不导出 <code>ccall</code> 的话，会报以下错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&apos;ccall&apos; was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)</div></pre></td></tr></table></figure>
<p>现在可以运行 <code>my.html</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emrun my.html</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2019/03/02/1.jpg" alt=""></p>
<p>可以修改一下 sum 函数，使其带参数，修改如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;emscripten/emscripten.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World emcc\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> EMSCRIPTEN_KEEPALIVE <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"sum = %i\n"</span>, (a+b));</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>需要修改 <code>my.html</code> 文件，修改内容如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var result = Module.ccall('sum', // name of C function</div><div class="line">                                     null, // return type</div><div class="line">                                     ['number'], // argument types</div><div class="line">                                     [12, 13]); // arguments</div></pre></td></tr></table></figure>
<p>注意 <code>argument types</code> 和 <code>arguments</code> 的填写，运行可以看到预期效果。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emscripten wasm JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[冷笑话的启示]]></title>
      <url>/2019/02/24/%E5%86%B7%E7%AC%91%E8%AF%9D%E7%9A%84%E5%90%AF%E7%A4%BA/</url>
      <content type="html"><![CDATA[<p>几乎所有人都比较喜欢听或者看笑话故事，笑话故事可以让你开心，也可能让你随时哈哈大笑。下面几则笑话故事，在笑的同时可以想想其中蕴藏的道理。</p>
<hr>
<p>女浴室起火，里面人乱作一团，赤裸身体往外跑，只见大街上白花花一大群，一老者大喊“快捂住”，众裸女突然醒悟，但身上要紧部位有三处，手忙脚乱捂不过来，不知所措。这时老者又大喊：“捂脸就行，下面都一样！”</p>
<blockquote>
<p>😆 在特殊情况下抓工作不可能面面俱到，要抓住重点。</p>
</blockquote>
<hr>
<p>少妇报案：“我把钱放在胸衣内，在拥挤的地铁内被一帅哥偷走了…”警察纳闷：“这么敏感的地方你就没觉察到？”少妇红着脸答：“谁能想到他是摸钱呢？”</p>
<blockquote>
<p>😆 让客户的钱在愉快体验中不知不觉地被摸走，是商业模式的最高境界。</p>
</blockquote>
<hr>
<p>某富翁想娶老婆，有三个人选，富翁给了三个女孩各一千元，请她们把房间装满。第一个女孩买了很多棉花，装满房间的1/2。第二个女孩买了很多气球，装满房间的3/4。第三个女孩买了很多蜡烛，让光线充满房间。 最终，富翁选了胸部最大的那个。</p>
<blockquote>
<p>😆 把握客户内心猥琐但真实的需求至关重要。</p>
</blockquote>
<hr>
<p>很多年前认识一小三，当然是别人的小三，但这小三算是有本领的，不仅人长的漂亮，长发飘飘，也很有脑。爱上某金融界人士，但人家已有妻室，这小三不屈不挠，投其所好，知道男人热爱古诗词，小三楞是用了不长的时间将唐诗三百首倒背如流，小三便转正了。</p>
<blockquote>
<p>😆 没有拆不散的夫妻，只有不努力的小三！</p>
</blockquote>
<hr>
<p>一男子在狱中闲来无事训练蚂蚁，蚂蚁可在他指令下倒立、翻跟头 、鞠躬…. 出狱后，男子迫不及待去酒吧炫耀他的绝活，他点了一杯啤酒，然后，掏出蚂蚁放在桌上对服务员说：看，这只蚂蚁。服务员转身一掌拍死了蚂蚁，抱歉地对他说说：对不起先生，我马上给您换一杯!</p>
<blockquote>
<p>😆 遇事要三思而后行。</p>
</blockquote>
<p>从前有只羊，它一天干10个小时的活。有一天它的主人告诉它，你好好干，多干活有奖励，于是它照做了。接下来每个月它的主人把它身上的羊毛剪了三分之一 ，年底到了，给它织了件毛衣，然后告诉它：诺，这是你的奖励，恭喜你，继续努力吧！</p>
<blockquote>
<p>😆 这笑话告诉我们：羊毛出在羊身上。</p>
</blockquote>
<hr>
<p>赵四小姐从十六岁开始跟张学良。跟一年，属奸情；跟三年，算{敏感词}；跟六十年，便成为千古爱情！</p>
<blockquote>
<p>😆 很多事情不看做不做，而看你做多久。</p>
</blockquote>
<hr>
<p>民国初名妓小凤仙，如果跟了民工，就属于扫黄对象；她跟了蔡锷，则千古留芳了；倘若她跟了孙中山，那便可能成为国母。</p>
<blockquote>
<p>😆 不在于你干什么，而看你跟谁干。</p>
</blockquote>
<hr>
<p>组织几个人收保护费，那是黑社会。朱元障组织几百万人抢下王位，就是伟大的皇帝。武则天睡了公公睡儿子，虽属乱*伦，但乱的够大，故成为女皇。</p>
<blockquote>
<p>😆 不在你干没干坏事，而在于干多大！</p>
</blockquote>
<hr>
<p>一公司在小便池上贴上条：“往前一小步，文明一大步”，结果地上仍有许多尿渍。后来公司认真吸取教训，重新设计成：“尿不到池里说明你短；尿到池外说明你软”，结果地上比以前干净许多。</p>
<blockquote>
<p>😆 给客户的投资建议一定要具体，确切，中要害。</p>
</blockquote>
<hr>
<p>某日，女秘书神色凝重地说：王总，我怀孕了。 王继续低头看文件，然后淡淡一笑：我早结扎了。 女秘书楞了一会媚笑道：我和您开玩笑呢! 王抬起头看了她一眼，喝了口茶说：我也是。</p>
<blockquote>
<p>😆 在江湖上混的人，遇事不要慌，先让子弹飞一会。</p>
</blockquote>
<hr>
<p>男子去提亲，女方家长：请自我介绍。</p>
<p>A说：我有一千万；</p>
<p>B说：我有一栋豪宅，价值两千万；</p>
<p>家长很满意。就问C，你家有什么？</p>
<p>C答：我什么都没有，只有一个孩子，在你女儿肚子里。</p>
<p>AB无语，走了。</p>
<blockquote>
<p>😆 核心竞争力不是钱和房子，是在关键的岗位有自已的人。</p>
</blockquote>
<hr>
<p>一男干部怕吃苦不愿援藏，谎称眼睛突然失明。领导闻听，出面让一美女脱光站在他面前，问“看见了吗”？答：看不见。领导飞起一脚给他臀部：狗日的，老二都直了还看不见？收拾行李，明天进藏。</p>
<blockquote>
<p>😆<br>1.人性化才能真正了解人。<br>2.组织比个人高明。<br>3.本能会出卖你</p>
</blockquote>
<hr>
<p>一小朋友问一富翁说 叔叔你为什么这么有钱。富翁摸摸小朋友的头说：小时候我爸给了我一个苹果，我卖掉了它有了两个苹果，后来我又赚到了四个苹果。小朋友若有所思的说 哦…叔叔，我好像懂了。富翁说，“你懂你妹阿，后来我爸死了，我继承了他的财产…</p>
<blockquote>
<p>😆 不要痴迷于从阅读成功人士的传记，从中寻找经验，这些书大部分经过了精致的包装，很多重要的事实不会告诉你。例如盖茨的的书不会告诉你他母亲是IBM董事，是她给儿子促成了第一单大生意，巴菲特的书只会告诉你他8岁就知道去参观纽交所，但不会告诉你他国会议员的父亲带他去的，是高盛的董事接待的。</p>
</blockquote>
<hr>
<p>参考 <a href="http://home.lupaworld.com/home-space-uid-112536-do-blog-id-239163.html" target="_blank" rel="noopener">lupaworld</a></p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 笑话 冷笑话 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[给 Homebrew 设置代理]]></title>
      <url>/2019/02/23/%E7%BB%99-Homebrew-%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<p>可以给 <code>Homebrew</code> 工具设置代理，设置方法和步骤如下。</p>
<p><strong>1、打开终端，进入用户根目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/</div></pre></td></tr></table></figure>
<p><strong>2、查看当前目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al</div></pre></td></tr></table></figure>
<p>查看是否有 <code>.curl</code> 文件，如果没有，新建一个吧</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch .curl</div></pre></td></tr></table></figure>
<p><strong>3、编辑 .curl 文件</strong></p>
<p>写入下面内容，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxy=ip:port</div></pre></td></tr></table></figure>
<p>把 ip 和 port 改为你的代理 ip 和端口值，如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxy=127.0.0.1:8087</div></pre></td></tr></table></figure>
<p>保存文件即可。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS brew proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[了解 Emscripten]]></title>
      <url>/2019/02/15/%E4%BA%86%E8%A7%A3-Emscripten/</url>
      <content type="html"><![CDATA[<h2 id="Emscripten-是什么？"><a href="#Emscripten-是什么？" class="headerlink" title="Emscripten 是什么？"></a>Emscripten 是什么？</h2><p><code>Emscripten</code> 是一个 <a href="https://github.com/emscripten-core/emscripten/tree/master" target="_blank" rel="noopener">开源的编译器</a>，可以将 C/C++ 的代码编译后高效运行在现代浏览器上面。<code>Emscripten</code> 的底层是基于 <code>LLVM</code> 编译器的，可以查看其开源的 <a href="https://github.com/emscripten-core/emscripten-fastcomp" target="_blank" rel="noopener">emscripten llvm</a> 和 <a href="https://github.com/emscripten-core/emscripten-fastcomp-clang" target="_blank" rel="noopener">emscripten clang</a>。</p>
<p>下图是其编译 C/C++ 的代码的流程图：<br><img src="/upload/images/2019/02/15/1.jpg" alt=""></p>
<p><a href="https://emscripten.org/" target="_blank" rel="noopener">官网</a> 对 <code>Emscripten</code> 的定义：</p>
<blockquote>
<p>Emscripten is a toolchain for compiling to asm.js and WebAssembly, built using LLVM, that lets you run C and C++ on the web at near-native speed without plugins.</p>
</blockquote>
<p>截止本文发布，<code>Emscripten</code> 最新版本是 <code>1.38.27</code>.</p>
<h2 id="安装条件"><a href="#安装条件" class="headerlink" title="安装条件"></a>安装条件</h2><p>以下是我安装和使用 Emscripten 的条件。</p>
<ul>
<li>macOS 版本 10.14</li>
<li>Git，可通过 Homebrew 安装</li>
<li>CMake，可通过 Homebrew 安装</li>
<li>Xcode 10.1</li>
<li>Python 2.7.x，Mac 系统自带</li>
<li>稳定快速的网络环境，最重要和最关键的的是要有(neng)梯(fan)子(qiang)</li>
<li>解决问题的态度和毅力</li>
</ul>
<h2 id="通过-emsdk-安装"><a href="#通过-emsdk-安装" class="headerlink" title="通过 emsdk 安装"></a>通过 emsdk 安装</h2><p>安装 <code>Emscripten</code> 可以通过安装 <a href="https://github.com/emscripten-core/emsdk" target="_blank" rel="noopener">emscripten SDK</a> 来完成，<code>emscripten SDK</code> 可以简单的理解为是 <code>Emscripten</code> 的一套工具链。</p>
<p>在你自己的电脑上面任意新建一个目录，如我的 <code>~/dev/emscwork</code>，打开终端，进入此目录。</p>
<p><strong>1、</strong>下载 <code>emsdk</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/juj/emsdk.git</div></pre></td></tr></table></figure>
<p><strong>2、</strong>进入 <code>emsdk</code> 目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd emsdk</div></pre></td></tr></table></figure>
<p><strong>3、</strong>开始安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># Fetch the latest version of the emsdk (not needed the first time you clone)</div><div class="line">git pull</div><div class="line"></div><div class="line"># Download and install the latest SDK tools.</div><div class="line">./emsdk install latest</div><div class="line"></div><div class="line"># Make the &quot;latest&quot; SDK &quot;active&quot; for the current user. (writes ~/.emscripten file)</div><div class="line">./emsdk activate latest</div><div class="line"></div><div class="line"># Activate PATH and other environment variables in the current terminal</div><div class="line">source ./emsdk_env.sh</div></pre></td></tr></table></figure>
<p><strong>注意: 每次更新完 <code>emsdk</code> 后，依旧需要执行上面命令重新安装和激活。</strong></p>
<p>另外一个比较常用的是 <code>./emsdk update-tags</code> 这个命令，可以直接更新 <code>emsdk</code> 的最新 tags 版本，更新 tags 完成后，重新安装和激活最新版的 <code>emsdk</code> 套件。</p>
<h2 id="配置-emsdk"><a href="#配置-emsdk" class="headerlink" title="配置 emsdk"></a>配置 emsdk</h2><p>如果你想在任意路径下都可以使用 <code>emsdk</code> 里面的各种工具(就是一些二进制可执行文件)，需要为其设置环境变量。</p>
<p>编辑 <code>~/.bash_profile</code> 文件，新增如下代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export EMSDK=~/emscwork/emsdk</div><div class="line">export EMSCRIPTEN=$EMSDK/emscripten/1.38.27</div><div class="line">export BINARYEN_ROOT=$EMSDK/binaryen/master_64bit_binaryen</div><div class="line">export PATH=$EMSDK:$EMSCRIPTEN:$BINARYEN_ROOT:$PATH</div></pre></td></tr></table></figure>
<p>执行下面命令, 使刚配置的文件生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>至此，安装和设置环境变量完成。</p>
<p>可以使用下面命令来查看 <code>emsdk</code> 的安装情况。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emcc --version</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">emcc (Emscripten gcc/clang-like replacement) 1.38.27 (commit ea5d631a5446632e195765d89a53ead71cd6de45)</div><div class="line">Copyright (C) 2014 the Emscripten authors (see AUTHORS.txt)</div><div class="line">This is free and open source software under the MIT license.</div><div class="line">There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</div></pre></td></tr></table></figure>
<p><code>emcc</code> 是一个可执行脚本，该脚本在 <code>emsdk/emscripten/1.38.27</code> 目录下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emcc --help</div></pre></td></tr></table></figure>
<p>上面命令可以查看更多关于 <code>emcc</code> 的使用方法.</p>
<h2 id="编译-C-C-代码"><a href="#编译-C-C-代码" class="headerlink" title="编译 C/C++ 代码"></a>编译 C/C++ 代码</h2><p>这里举个实际的例子。</p>
<p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Emscripten show in browser...\n"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 <code>emcc</code> 编译，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emcc main.c -s WASM=<span class="number">1</span> -o mz.html</div></pre></td></tr></table></figure>
<p>这里要注意 <code>WASM=1</code> 这个选项，现在新版 SDK 默认 <code>WASM=1</code> 了，如果不想生成 <code>.wasm</code> 这个文件，需要指定 <code>WASM=0</code> 选项。</p>
<p>生成另外三个文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mz.html  mz.js  mz.wasm</div></pre></td></tr></table></figure>
<p>简单介绍一下这三个文件</p>
<p><strong>1、mz.wasm</strong></p>
<blockquote>
<p>二进制的 <code>wasm</code> 模块代码</p>
</blockquote>
<p><strong>2、mz.js</strong></p>
<blockquote>
<p>胶水代码，包含了原生 C 函数和 JavaScript/wasm 之间转换的 JS 文件</p>
</blockquote>
<p><strong>3、mz.html</strong></p>
<blockquote>
<p>用来加载、编译和实例化 <code>wasm</code> 代码并且将其输出在浏览器显示上的 <code>HTML</code> 文件</p>
</blockquote>
<p>最后执行下面的命令，可以在 Safari 浏览器中显示效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emrun mz.html</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2019/02/15/2.jpg" alt=""></p>
<p><strong>main.cpp</strong></p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Emscripten show in browser..."</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译 C++ 文件(main.cpp)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">emcc main.cpp -s WASM=1 -o mzcpp.html</div></pre></td></tr></table></figure>
<p>同样的方式编译和运行 <code>mzcpp.html</code> 即可看到同样的效果。</p>
<h2 id="Emscripten-应用场景"><a href="#Emscripten-应用场景" class="headerlink" title="Emscripten 应用场景"></a>Emscripten 应用场景</h2><p><code>Emscripten</code> 只是一个编译器，能将我们的高级语言编译为浏览器可以识别并运行的程序，这个看起来确实很诱人。</p>
<p>就目前来说，Emscripten 应用场景可以使用在安全和游戏上面。</p>
<p><strong>1、安全</strong></p>
<p>C/C++ 代码经过编译之后，会生成 <a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly" target="_blank" rel="noopener"><code>wasm</code> 格式</a> 的二进制文件，这个安全级别较高，即使在浏览器中运行，破解者也不会很轻松的破解代码，这样一些在 JS 中涉及到安全的问题，可以使用 C/C++ 来写结合一些加密技术，然后用 <code>Emscripten</code> 编译。</p>
<p><strong>2、游戏</strong></p>
<p>如果能把用 C/C++ 语言写的游戏，转为可在浏览器直接运行的H5游戏，那就很美好了，用户不需要下载游戏，直接玩。现代浏览器技术的更新和发展已经让这个想法变成了现实，至少在主流的浏览器上面。</p>
<p>推荐大家看看这篇文章 <a href="https://blog.fundebug.com/2018/12/24/how-does-webassembly-works/" target="_blank" rel="noopener">JavaScript是如何工作的：与WebAssembly比较及其使用场景</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://emscripten.org/docs/introducing_emscripten/about_emscripten.html" target="_blank" rel="noopener">About Emscripten</a></p>
<p><a href="https://emscripten.org/docs/getting_started/downloads.html" target="_blank" rel="noopener">Download and install</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly/C_to_wasm" target="_blank" rel="noopener">编译 C/C++ 为 WebAssembly</a></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/WebAssembly/Concepts" target="_blank" rel="noopener">WebAssembly 概念</a></p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Emscripten wasm JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C 结构体指针初始化]]></title>
      <url>/2019/02/08/C-%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>在使用指针之前，务必要将其初始化。这个是我们最早学习 C 语言的时候，书上经常说的一个问题。在工作中，我们反而会经常忘记这条金科玉律。</p>
<p>本篇文章的所有代码都经 <code>gcc-7</code> 编译器编译过。关于在 macOS 中如何安装和使用 <code>gcc</code>，可以参考 <a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/" target="_blank" rel="noopener">GCC: Homebrew 安装 GCC 和 Binutils</a> 这篇文章。</p>
<h2 id="结构体成员指针的初始化"><a href="#结构体成员指针的初始化" class="headerlink" title="结构体成员指针的初始化"></a>结构体成员指针的初始化</h2><blockquote>
<p>结构体成员指针的初始化，指的是初始化结构体中指针变量的成员。</p>
</blockquote>
<p>我们举个例子，下面是 <code>Animal</code> 的结构体。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> *name; <span class="comment">//指针成员</span></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> info[<span class="number">200</span>]; <span class="comment">//字符数组</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">nextAnimal</span>;</span> <span class="comment">//指针成员</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>结构体 <code>Animal</code> 含有4个成员变量，其中 <code>name</code>、<code>info</code> 和 <code>nextAnimal</code> 是指针变量。</p>
<p>写一段测试代码，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal's name: %s, age: %i, info: %s\n"</span>, animal.name, animal.age, animal.info);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果正常，终端输出如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animal&apos;s name: (null), age: 0, info:</div></pre></td></tr></table></figure>
<p>我们来验证一下 <code>Animal *nextAnimal</code> 在没有初始化的情况下，会不会有什么问题。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal's name: %s, age: %i, info: %s\n"</span>, animal.name, animal.age, animal.info);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal: %p\n"</span>, animal.nextAnimal);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n"</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序编译没有问题，运行报错</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">animal's name: (null), age: <span class="number">0</span>, info: </div><div class="line">animal.nextAnimal: <span class="number">0x1127fa036</span></div><div class="line">Segmentation fault: <span class="number">11</span></div></pre></td></tr></table></figure>
<p>修改一下代码，初始化一下 <code>animal.nextAnimal</code> 这个指针，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal's name: %s, age: %i, info: %s\n"</span>, animal.name, animal.age, animal.info);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal: %p\n"</span>, animal.nextAnimal);</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化指针变量</span></div><div class="line">    animal.nextAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n"</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次编译重新运行，还是报错。还需要初始化 <code>animal.nextAnimal-&gt;name</code> 这个变量。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal's name: %s, age: %i, info: %s\n"</span>, animal.name, animal.age, animal.info);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal: %p\n"</span>, animal.nextAnimal);</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化指针变量</span></div><div class="line">    animal.nextAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化 name 变量</span></div><div class="line">    animal.nextAnimal-&gt;name = <span class="string">"cat"</span>;</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n"</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">编译运行，一切正常。</div><div class="line"></div><div class="line">```c</div><div class="line">animal's name: (null), age: <span class="number">0</span>, info: </div><div class="line">animal.nextAnimal: <span class="number">0x10f0f1036</span></div><div class="line">animal.nextAnimal-&gt;name: cat, age: <span class="number">0</span>, info:</div></pre></td></tr></table></figure>
<p>通过上面的例子，结构体指针变量有些会给默认值，有些又不会给，所以都要初始化指针变量。修改一下代码，示例如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> *name; <span class="comment">//指针成员</span></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> info[<span class="number">200</span>]; <span class="comment">//字符数组</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">nextAnimal</span>;</span> <span class="comment">//指针成员</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></div><div class="line">    </div><div class="line">    animal.name = <span class="string">"cat"</span>;</div><div class="line">    <span class="built_in">strcpy</span>(animal.info, <span class="string">"This is a cat."</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal's name: %s, age: %i, info: %s\n"</span>, animal.name, animal.age, animal.info);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal: %p\n"</span>, animal.nextAnimal);</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化指针变量</span></div><div class="line">    animal.nextAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化变量</span></div><div class="line">    animal.nextAnimal-&gt;name = <span class="string">"cat"</span>;</div><div class="line">    <span class="built_in">strcpy</span>(animal.nextAnimal-&gt;info, <span class="string">"This is a cat."</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n"</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结构体指针的初始化"><a href="#结构体指针的初始化" class="headerlink" title="结构体指针的初始化"></a>结构体指针的初始化</h2><blockquote>
<p>指的是初始化结构体指针变量。</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;  </div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">ptAnimal</span>;</span></div><div class="line">        </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ptAnimal's name: %s, age: %i， info: %s\n"</span>, ptAnimal-&gt;name, ptAnimal-&gt;age, ptAnimal-&gt;info);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译运行报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Segmentation fault: 11</div></pre></td></tr></table></figure>
<p>同样的道理，需要初始化指针变量。完成后的示例代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">ptAnimal</span>;</span></div><div class="line">    </div><div class="line">    <span class="comment">// 初始化结构体指针</span></div><div class="line">    ptAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">    </div><div class="line">    ptAnimal-&gt;name = <span class="string">"dog"</span>;</div><div class="line">    <span class="built_in">strcpy</span>(ptAnimal-&gt;info, <span class="string">"This is a big dog"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ptAnimal's name: %s, age: %i， info: %s\n"</span>, ptAnimal-&gt;name, ptAnimal-&gt;age, ptAnimal-&gt;info);</div><div class="line">    </div><div class="line">    <span class="comment">// 初始化结构体指针的成员指针变量 nextAnimal</span></div><div class="line">    ptAnimal-&gt;nextAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">    ptAnimal-&gt;nextAnimal-&gt;name = <span class="string">"dog"</span>;</div><div class="line">    <span class="built_in">strcpy</span>(ptAnimal-&gt;nextAnimal-&gt;info, <span class="string">"This is a big dog"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"ptAnimal-&gt;nextAnimal's name: %s, age: %i， info: %s\n"</span>,</div><div class="line">           ptAnimal-&gt;nextAnimal-&gt;name, ptAnimal-&gt;nextAnimal-&gt;age, ptAnimal-&gt;nextAnimal-&gt;info);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h2><p><strong>main.c</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> &#123;</span></div><div class="line">    <span class="keyword">char</span> *name; <span class="comment">//指针成员</span></div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">char</span> info[<span class="number">200</span>]; <span class="comment">//字符数组</span></div><div class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">nextAnimal</span>;</span> <span class="comment">//指针成员</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="comment">/// 验证结构体指针成员变量</span></div><div class="line">    &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> <span class="title">animal</span>;</span></div><div class="line">        </div><div class="line">        animal.name = <span class="string">"cat"</span>;</div><div class="line">        <span class="built_in">strcpy</span>(animal.info, <span class="string">"This is a cat."</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"animal's name: %s, age: %i, info: %s\n"</span>, animal.name, animal.age, animal.info);</div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal: %p\n"</span>, animal.nextAnimal);</div><div class="line">        </div><div class="line">        <span class="comment">// 初始化指针变量</span></div><div class="line">        animal.nextAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">        </div><div class="line">        <span class="comment">// 初始化变量</span></div><div class="line">        animal.nextAnimal-&gt;name = <span class="string">"cat"</span>;</div><div class="line">        <span class="built_in">strcpy</span>(animal.nextAnimal-&gt;info, <span class="string">"This is a cat."</span>);</div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"animal.nextAnimal-&gt;name: %s, age: %i, info: %s\n"</span>, animal.nextAnimal-&gt;name, animal.nextAnimal-&gt;age, animal.nextAnimal-&gt;info);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/// 验证结构体指针</span></div><div class="line">    &#123;</div><div class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">Animal</span> *<span class="title">ptAnimal</span>;</span></div><div class="line">        </div><div class="line">        <span class="comment">// 初始化结构体指针</span></div><div class="line">        ptAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">        </div><div class="line">        ptAnimal-&gt;name = <span class="string">"dog"</span>;</div><div class="line">        <span class="built_in">strcpy</span>(ptAnimal-&gt;info, <span class="string">"This is a big dog"</span>);</div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ptAnimal's name: %s, age: %i， info: %s\n"</span>, ptAnimal-&gt;name, ptAnimal-&gt;age, ptAnimal-&gt;info);</div><div class="line">        </div><div class="line">        <span class="comment">// 初始化结构体指针的成员指针变量 nextAnimal</span></div><div class="line">        ptAnimal-&gt;nextAnimal = (struct Animal *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct Animal));</div><div class="line">        ptAnimal-&gt;nextAnimal-&gt;name = <span class="string">"dog"</span>;</div><div class="line">        <span class="built_in">strcpy</span>(ptAnimal-&gt;nextAnimal-&gt;info, <span class="string">"This is a big dog"</span>);</div><div class="line">        </div><div class="line">        <span class="built_in">printf</span>(<span class="string">"ptAnimal-&gt;nextAnimal's name: %s, age: %i， info: %s\n"</span>,</div><div class="line">               ptAnimal-&gt;nextAnimal-&gt;name, ptAnimal-&gt;nextAnimal-&gt;age, ptAnimal-&gt;nextAnimal-&gt;info);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>编译</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc<span class="number">-7</span> main.c -o main</div></pre></td></tr></table></figure>
<p><strong>运行</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./main</div></pre></td></tr></table></figure>
<p>运行结果如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">animal's name: cat, age: <span class="number">0</span>, info: This is a cat.</div><div class="line">animal.nextAnimal: <span class="number">0x0</span></div><div class="line">animal.nextAnimal-&gt;name: cat, age: <span class="number">0</span>, info: This is a cat.</div><div class="line">ptAnimal's name: dog, age: <span class="number">0</span>， info: This is a big dog</div><div class="line">ptAnimal-&gt;nextAnimal's name: dog, age: <span class="number">0</span>， info: This is a big dog</div></pre></td></tr></table></figure>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gcc macOS struct </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[致结婚8周年]]></title>
      <url>/2019/01/30/%E8%87%B4%E7%BB%93%E5%A9%9A8%E5%91%A8%E5%B9%B4/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2019/01/30/1.jpg" alt=""></p>
<p>自己明明是个理科生，偏偏有颗文科生的心，多愁善感，心理总有道不完的情结。</p>
<p>很多人问我：“写博客是不是很费时间，把写博客的时间腾出来做点其他的不是更好吗？“</p>
<p>言下之意在说，反正你也成不了作家，干嘛浪费这个时间呢？人生有很多有乐趣的事情可以做，兴趣是最好的老师，不是吗？写博客的确是费时间，但这是个人的一个小爱好，所以，在我看来不算是浪费时间。坚持阅读和写作是我唯一没有放弃的爱好之一，因为它们能给我带来快乐，也是我忙碌之后停歇的港湾，能让我独立思考，静下心来憧憬美好的未来。</p>
<p><strong>所以，爱你所爱吧！</strong></p>
<p>2010年农历12月21日我们结婚了，在结婚之前我和太太认识了大概5年的时间，风风雨雨的一路走来，坎坷而又幸福，一个女人能为你坚守这么多年，并且总是能帮你，娶她两遍都不为过，哈哈！</p>
<p>那个时候家里条件很不好，在我的记忆深处，家里总是有还不完的债，每个学期的学杂费让父母焦头烂额，但最终还是被父母搞定了，所以我觉得他们很了不起。我坚持着自己的信念：“必须要考上大学，走出这里！”，母亲是家里最赞成我上学的，可能是被我炽热的学习热情给感染到了，这辈子不能忘记母亲为我上学奔波的日子，母爱之所以伟大是因为他为自己的孩子能倾出所有，并且不求回报！</p>
<p>大学时期，平时自己会找一些家教做，算是补贴一下日常的开销，寒暑假是我最盼望的日子，因为可以和太太在一起打工挣钱了，那时候挣钱只有一个目的，赚到学费！一到开学她就把自己积累的钱都给我了，简直是义薄云天，她还壮志豪情的说：“拿去花！”，我也厚颜无耻的接过来了。当时我在想，这姑娘就不怕我以后跑掉吗？！关于这个事情，后来我问过她，她说：“我相信你！”，朴实的回答让我无言以对。其实，当我看见她的第一眼，就毅然决定这辈子非她不娶了！</p>
<p>我们结婚后没几天，就离开了老家赶往深圳，我们手里也没有钱，穷的叮当响，记得去深圳的盘缠还是弟弟给我的。在深圳刚工作的日子里，每天中午我们还要自己做饭，粗茶淡饭的倒也觉得开心，就是在那个时候太太开始会做饭了，特别是捞面和蛋炒饭，至今还让我记忆犹新，每天晚上下班我都会去接她，在月光下她瘦小的身影显得格外别致，一起牵手回家，我们决定就这样幸福的奋斗下去！</p>
<p>结婚前我们彼此骂过、切磋过，多半是我的过错但我总是觉得自己是个男人，不能低头，不然真他妈没面子。现在想想自己挺可笑的，所以婚后我基本上没有和太太打骂过，女人的脾气很奇怪，一会晴天一会雨天，自己忍一忍就过去了，不要再火上浇油了，就像这句话所说的：“你虽然赢了吵架，但是你却输了感情”，退一步海阔天空！</p>
<p>2012年3月，儿子出生了，这个小家伙的到来让我们的生活变得更加忙碌了，我们算是步入了父母的行列了。太太算告别了所有的打工生涯，全职在家照顾孩子，我负责在外挣钱，一家三口幸福的生活在一起！太太自从有了儿子之后，儿子就像是他的全部，把孩子照顾的无微不至，做事情比以前认真了很多，开始关注一些公众号，读一些育儿书籍，学习别人是怎么养育孩子的，孩子在成长，太太也在成长。也许，女人从一名妻子的角色转换为母亲的角色的这个过程，算是一次蜕变，尤其是母亲的角色，她扮演的十分精彩！</p>
<p>2019年1月，我们的第二个孩子出生了，是个可爱的千金，我们之前也讨论过到底要不要二胎，我说生孩子太辛苦了，有一个孩子就够折腾的了，不要二胎也罢。太太坚决反对，说一个孩子太孤单，以后遇到事情连个商量的亲人都没有，必须要二胎，就这样我们孕育了这个小千金。无论你跟你的太太有多大的仇多大的冤，她能为你生孩子，就值得你为她付出一辈子。</p>
<p>今年是我们结婚8周年，7年之痒的传说没有在我们两个身上发生，我们会这样继续幸福下去，迎接下一个周年。</p>
<p>祝大家新年新气象，身体健康，阖家幸福，万事如意，诸事顺利！祝天下有情人终成眷属！</p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Class、isa、元类]]></title>
      <url>/2019/01/29/Class%E3%80%81isa%E3%80%81%E5%85%83%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>本文的所涉及到的源码是 <a href="https://opensource.apple.com/source/objc4/" target="_blank" rel="noopener">objc4</a> 源码，截止到写本文最新的是 <code>objc4-750</code> 这个版本。</p>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>我们在学习面向对象的学习中，接触最多的就是类，那么在OC类是由Class类型来表示的，Class是用C的数据结构来表示的。</p>
<p>看一下 <code>NSObject</code> 的声明，在头文件中，如下图所示：<br><img src="/upload/images/2019/01/29/1.jpg" alt=""></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> &lt;<span class="title">NSObject</span>&gt; </span>&#123;</div><div class="line"><span class="meta">#pragma clang diagnostic push</span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Wobjc-interface-ivars"</span></span></div><div class="line">    Class isa  OBJC_ISA_AVAILABILITY;</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到：<br>1、<code>NSObject</code> 是实现了 <code>&lt;NSObject&gt;</code> 协议的。<br>2、<code>NSObject</code> 中有 <code>Class</code> 类型的 <code>isa</code> 成员变量，外界是无法访问的，另外 <code>isa</code> 指针可能在将来也会被隐藏起来(OBJC_ISA_AVAILABILITY标示了)。</p>
<p>继续看一下 <code>Class</code> 到底是什么？</p>
<p><img src="/upload/images/2019/01/29/2.jpg" alt=""></p>
<p>在上面的文件中可以看到 <code>Class</code> 的定义，如下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_class *Class;</div><div class="line"></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_object *<span class="keyword">id</span>;</div></pre></td></tr></table></figure>
<p>可以看出 <code>Class</code> 是一个指向 <code>objc_class</code> 的结构体指针，<code>Objective-C</code> 中的类是由 <code>Class</code> 类型来表示的，它实际上是一个指向 <code>objc_class</code> 结构体的指针。</p>
<p>在下面的头文件中看一下 <code>objc_class</code> 的定义，如下：</p>
<p><img src="/upload/images/2019/01/29/3.jpg" alt=""></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_class : objc_object &#123;</div><div class="line">    <span class="comment">// Class ISA;</span></div><div class="line">    Class superclass;</div><div class="line">    cache_t cache;             <span class="comment">// formerly cache pointer and vtable</span></div><div class="line">    class_data_bits_t bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></div><div class="line">    </div><div class="line">    <span class="comment">// ....</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，<code>objc_class</code> 用来描述OC中的类，而 <code>objc_object</code> 用来描述OC中的对象，类(objc_class)其实也是一个对象(objc_object)，另外 <code>id</code> 是代表对象的，它是指向 <code>objc_object</code> 的结构体指针，它的存在可以让我们实现类似于C++中泛型的一些操作。该类型的对象可以转换为任何一种对象，有点类似于C语言中 <code>void *</code> 指针类型的作用。</p>
<p>这里要注意，<code>objc_class</code> 的定义在 <code>objc-runtime-old.h</code>中和 <code>objc-runtime-new.h</code> 中的不一样。这里以 <code>objc-runtime-new.h</code> 为主，建议可以看看 <a href="http://www.veryitman.com/2019/01/28/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84-objc-class/" target="_blank" rel="noopener">被误解的 objc_class</a> 这篇文章。</p>
<p>再来看一下 <code>objc_object</code>，如下图所示：</p>
<p><img src="/upload/images/2019/01/29/4.jpg" alt=""></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line">private:</div><div class="line">    isa_t isa;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>objc_object</code> 是一个结构体，里面有个私有成员变量 <code>isa</code> 是 <code>isa_t</code> 类型的。</p>
<p>而 <code>isa_t</code> 是一个 union 类型的，如下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">union</span> isa_t &#123;</div><div class="line">    isa_t() &#123; &#125;</div><div class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</div><div class="line"></div><div class="line">    Class cls;</div><div class="line">    uintptr_t bits;</div><div class="line"><span class="meta">#if defined(ISA_BITFIELD)</span></div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">        ISA_BITFIELD;  <span class="comment">// defined in isa.h</span></div><div class="line">    &#125;;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>总之在OC中，类也是一个对象称之为类对象，根据凡是对象都有自己的类的原理，那么类对象的肯定存在自己的类，这个类就是元类(meta-class)。</p>
<h2 id="元类"><a href="#元类" class="headerlink" title="元类"></a>元类</h2><p>在说元类之前，先看一下下面的例子，创建一个 <code>NSMutableDictionary</code> 实例对象 <code>dict</code>，即向 <code>NSMutableDictionary</code> 发送 <code>alloc</code> 和 <code>init</code> 消息。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableDictionary</span> *dict = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div></pre></td></tr></table></figure>
<p>上面代码的大概执行流程如下几个步骤：</p>
<p><strong>1</strong>、先执行 <code>[NSMutableDictionary alloc]</code>，但是 <code>NSMutableDictionary</code> 没有 <code>+alloc</code> 方法，于是再去父类<code>NSObject</code> 中查找该方法。</p>
<p><strong>2</strong>、<code>NSObject</code> 响应 <code>+alloc</code> 方法，开始检测 <code>NSMutableDictionary</code> 类，并根据其所需的内存空间大小开始分配内存空间，然后把 <code>isa</code> 指针指向 <code>NSMutableDictionary</code> 类。同时，<code>+alloc</code> 也被加进 cache 列表里面。</p>
<p><strong>3</strong>、接着，执行 <code>-init</code> 方法，如果 <code>NSMutableDictionary</code> 响应该方法，则直接将其加入 <code>cache</code>，如果不响应，则去父类查找。</p>
<p><strong>4</strong>、在后期的操作中，如果再以 <code>[[NSMutableDictionary alloc] init]</code> 这种方式来创建字典对象，则会直接从 cache 中取出相应的方法，直接调用。</p>
<p>上面是创建一个实例对象的大致流程，接下来我们说说元类。</p>
<p><strong>元类简单来说就是类对象的类。</strong>类描述的是对象，那么元类描述的就是Class类对象的类。元类定义了类的行为（类方法），在平时开发时，meta-class 基本是用不着接触的，但最好还是要知道它的存在，这样可以更好的理解OC的设计。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableDictionary</span> *tDatas = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">5</span>];</div></pre></td></tr></table></figure>
<p>拿上面的示例来说，向 <code>NSMutableDictionary</code> 发送 <code>dictionaryWithCapacity</code> 这个消息的时候，Runtime 会在这个类的 meta-class 的方法列表中查找，通过 SEL 找到后取出方法中的 IMP 函数入口指针，并执行该方法，如果找不到就进行消息转发的流程中，最终可能会导致 Crash，消息转发的原理和机制可以参考 <a href="http://www.veryitman.com/categories/iOS/page/2/" target="_blank" rel="noopener">消息机制</a> 这几篇文章。</p>
<p>元类保存了类方法的列表。当一个类方法被调用时，元类会首先查找它本身是否有该类方法的实现，如果没有则该元类会向它的父类查找该方法，直到一直找到继承链的头。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Class object_getClass(<span class="keyword">id</span> obj);</div></pre></td></tr></table></figure>
<p><code>object_getClass</code> 可以获取一个对象的 class object，其源码实现如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Class object_getClass(<span class="keyword">id</span> obj)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) <span class="keyword">return</span> obj-&gt;getIsa();</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> Nil;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>举个例子吧，示例如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> new];</div><div class="line">Class obj1 = object_getClass(obj);</div><div class="line">Class obj2 = object_getClass([<span class="built_in">NSObject</span> <span class="keyword">class</span>]);</div><div class="line">Class obj3 = objc_getMetaClass(<span class="string">"NSObject"</span>);</div><div class="line">Class obj4 = object_getClass(obj1);</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *name = [<span class="built_in">NSStringFromClass</span>(obj1) UTF8String];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name: %s"</span>, name); <span class="comment">//name: NSObject</span></div><div class="line">Class obj5 = objc_getMetaClass(name);</div><div class="line">Class obj6 = objc_getClass(name);</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj : %@, -&gt;%p: "</span>, obj,  obj);</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj1: %@, -&gt;%p: "</span>, obj1, obj1);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj2: %@, -&gt;%p: "</span>, obj2, obj2);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj3: %@, -&gt;%p: "</span>, obj3, obj3);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj4: %@, -&gt;%p: "</span>, obj4, obj4);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj5: %@, -&gt;%p: "</span>, obj5, obj5);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj6: %@, -&gt;%p: "</span>, obj6, obj6);</div></pre></td></tr></table></figure>
<p>打印结果如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">obj : &lt;<span class="built_in">NSObject</span>: <span class="number">0x600002b19d70</span>&gt;, -&gt;<span class="number">0x600002b19d70</span>:</div><div class="line">obj1: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bf38</span>:</div><div class="line">obj2: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</div><div class="line">obj3: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</div><div class="line">obj4: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</div><div class="line">obj5: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bee8</span>:</div><div class="line">obj6: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10c96bf38</span>:</div></pre></td></tr></table></figure>
<p>可以看出，obj 是一个实例对象，obj1和obj6是一个 class object，其二者地址也一致，obj2、obj3、obj4 和 obj5 都获取到的是元类。</p>
<p>通过类对象调用的 <code>object_getClass</code> 得到的是该类对象的 meta-class，如 obj2 和 obj4，而通过实例对象调用的<code>object_getClass</code> 得到的是该实例对象的类对象，如 obj1，<code>objc_getClass</code> 这个方法获取是实例对象的类对象，与<code>object_getClass</code> 还是有点不一样的。而 <code>objc_getMetaClass</code> 可以直接获取 meta-class，如 obj3。</p>
<p><strong>总之:</strong><br>1、<code>objc_getClass</code> 参数是类名的字符串，返回的就是这个类的类对象。<br>2、<code>object_getClass</code> 参数是 <code>id</code> 类型，它返回的是这个 <code>id</code> 的 <code>isa</code> 指针所指向的Class；如果传参是Class，则返回该Class的meta-class。</p>
<p>在 <strong>NSObject.mm</strong> 中，可以看到 self 和 class 方法都要实例和类方法，class 方法返回的都是类对象。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">id</span>)<span class="keyword">self</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">id</span>)<span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)<span class="keyword">self</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (Class)<span class="keyword">class</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (Class)<span class="keyword">class</span> </div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> object_getClass(<span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，无论是类还是实例调用 class 方法，返回的都是同一个 class object，举例：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Class objClz1 = [<span class="built_in">NSObject</span> <span class="keyword">class</span>];</div><div class="line">Class objClz2 = [[[<span class="built_in">NSObject</span> alloc] init] <span class="keyword">class</span>];</div><div class="line">    </div><div class="line"><span class="keyword">if</span> (objClz1 == objClz2) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"objClz1: %@, -&gt;%p"</span>, objClz1, objClz1);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果是：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">objClz1: <span class="built_in">NSObject</span>, -&gt;<span class="number">0x10fa30f38</span></div></pre></td></tr></table></figure>
<h2 id="isa"><a href="#isa" class="headerlink" title="isa"></a>isa</h2><p>下面的例子来源自 <a href="http://zziking.github.io/ios/2016/02/08/Objective-C_Runtime_1_The_object_model.html" target="_blank" rel="noopener">这里</a>，感谢 kingizz’s blog，代码中 <code>Son</code> 是 <code>Father</code> 的子类，而 <code>Father</code> 是 <code>NSObject</code> 的子类。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Father</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Son</span> : <span class="title">Father</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>我们结合下面这个图来理解一下，子类、父类、元类以及 isa 指针。</p>
<p><img src="/upload/images/2019/01/29/5.jpg" alt=""></p>
<p>一个实例对象的 <code>isa</code> 指向对象所属的类，这个类的 <code>isa</code> 指向这个类的元类，而这个元类的 <code>isa</code> 又指向 <code>NSObject</code> 的元类，<code>NSObject</code> 的元类的 <code>isa</code> 指向其本身，最终形成形成一个完美的闭环。</p>
<p>在OC中，所有的对象都有一个 <code>isa</code> 指针，指向对象所属的类，类也是一个对象，类对象的 <code>isa</code> 指针指向类的元类。    </p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p>1、<a href="https://tingxins.com/2017/05/metaclass-class-relationship/" target="_blank" rel="noopener">Objective-C 中的对象、类、元类</a></p>
<p>2、<a href="http://zziking.github.io/ios/2016/02/08/Objective-C_Runtime_1_The_object_model.html" target="_blank" rel="noopener">Objective-C Runtime(一)对象模型及类与元类</a></p>
<p>3、<a href="http://www.veryitman.com/2019/01/28/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84-objc-class/" target="_blank" rel="noopener">被误解的 objc_class</a> </p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 元类 isa class meta-class </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[被误解的 objc_class]]></title>
      <url>/2019/01/28/%E8%A2%AB%E8%AF%AF%E8%A7%A3%E7%9A%84-objc-class/</url>
      <content type="html"><![CDATA[<p>网上绝大多数的博客讲 <code>objc_class</code> 的定义，基本上都使用了下面的<strong>代码一</strong>来讲解，与 <a href="https://opensource.apple.com/source/objc4/" target="_blank" rel="noopener">objc4</a> 源码 <code>objc-runtime-new.h</code> 中关于 <code>objc_class</code> 中的定义完全不一样，我认真地去探究了一下，发现这个世界上实属雷同的事件还是蛮多的，老实做事做学问的缺少的可怜！</p>
<p><img src="/upload/images/2019/01/28/1.jpg" alt=""></p>
<p>本文的所涉及到的 <a href="https://opensource.apple.com/source/objc4/" target="_blank" rel="noopener">objc4</a> 源码，截止到写本文最新的是 <code>objc4-750</code> 这个版本。</p>
<p><strong>代码一：简洁版也称坑货版</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class="line"></div><div class="line"><span class="meta">#if !__OBJC2__</span></div><div class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div><div class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></div></pre></td></tr></table></figure>
<p>在上面的代码中 <code>OBJC2_UNAVAILABLE</code> 看起来让人觉得有点奇怪，从字面意思上可以理解为在OC2.0版本不可用了，还有一个 <code>OBJC_ISA_AVAILABILITY</code> 是在表示 Objective-C 都可以使用吗？</p>
<p>在 <code>objc-api.h</code> 中有关于这两个宏的定义，如下：</p>
<p><strong>代码二：关键宏定义</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* OBJC_ISA_AVAILABILITY: `isa` will be deprecated or unavailable </span></div><div class="line"><span class="comment"> * in the future */</span></div><div class="line"><span class="meta">#if !defined(OBJC_ISA_AVAILABILITY)</span></div><div class="line"><span class="meta">#   if __OBJC2__</span></div><div class="line"><span class="meta">#       define OBJC_ISA_AVAILABILITY  __attribute__((deprecated))</span></div><div class="line"><span class="meta">#   else</span></div><div class="line"><span class="meta">#       define OBJC_ISA_AVAILABILITY  /* still available */</span></div><div class="line"><span class="meta">#   endif</span></div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line"><span class="comment">/* OBJC2_UNAVAILABLE: unavailable in objc 2.0, deprecated in Leopard */</span></div><div class="line"><span class="meta">#if !defined(OBJC2_UNAVAILABLE)</span></div><div class="line"><span class="meta">#   if __OBJC2__</span></div><div class="line"><span class="meta">#       define OBJC2_UNAVAILABLE UNAVAILABLE_ATTRIBUTE</span></div><div class="line"><span class="meta">#   else</span></div><div class="line">        <span class="comment">/* plain C code also falls here, but this is close enough */</span></div><div class="line"><span class="meta">#       define OBJC2_UNAVAILABLE                                       \</span></div><div class="line">            __OSX_DEPRECATED(<span class="number">10.5</span>, <span class="number">10.5</span>, <span class="string">"not available in __OBJC2__"</span>) \</div><div class="line">            __IOS_DEPRECATED(<span class="number">2.0</span>, <span class="number">2.0</span>, <span class="string">"not available in __OBJC2__"</span>)   \</div><div class="line">            __TVOS_UNAVAILABLE __WATCHOS_UNAVAILABLE __BRIDGEOS_UNAVAILABLE</div><div class="line"><span class="meta">#   endif</span></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>从定义来看，<code>OBJC_ISA_AVAILABILITY</code> 在OC2.0版本中标示已经过时了，<code>OBJC2_UNAVAILABLE</code> 标示在OC2.0中已经不可用了，将来会被移除的。</p>
<p>我们不妨来摘录完整的代码，如下：</p>
<p><strong>代码三：完整版也称整明白版</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if !OBJC_TYPES_DEFINED</span></div><div class="line"></div><div class="line"><span class="comment">/// An opaque type that represents a method in a class definition.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_method *Method;</div><div class="line"></div><div class="line"><span class="comment">/// An opaque type that represents an instance variable.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_ivar *Ivar;</div><div class="line"></div><div class="line"><span class="comment">/// An opaque type that represents a category.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_category *Category;</div><div class="line"></div><div class="line"><span class="comment">/// An opaque type that represents an Objective-C declared property.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_property *objc_property_t;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_class &#123;</div><div class="line">    Class _Nonnull isa  OBJC_ISA_AVAILABILITY;</div><div class="line"></div><div class="line"><span class="meta">#if !__OBJC2__</span></div><div class="line">    Class _Nullable super_class                              OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> * _Nonnull name                               OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> version                                             OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> info                                                OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">long</span> instance_size                                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_ivar_list * _Nullable ivars                  OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_method_list * _Nullable * _Nullable methodLists                    OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_cache * _Nonnull cache                       OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">struct</span> objc_protocol_list * _Nullable protocols          OBJC2_UNAVAILABLE;</div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line">&#125; OBJC2_UNAVAILABLE;</div><div class="line"><span class="comment">/* Use `Class` instead of `struct objc_class *` */</span></div><div class="line"></div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>这里居然还有个宏 <code>OBJC_TYPES_DEFINED</code>，看一下其在 <code>objc-private.h</code> 中的定义，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define OBJC_TYPES_DEFINED 1</span></div></pre></td></tr></table></figure>
<p>那么 <code>#if !OBJC_TYPES_DEFINED</code> 已经限制了其到 <code>#endif</code> 中间的代码都是无效的，所以关于<strong>代码一</strong>处的代码其实已经没有实际意义了，网上的朋友们请不要拿这段代码再 <code>骗人</code> 了。</p>
<p>源码 <code>objc-runtime-new.h</code> 中关于 <code>objc_class</code> 中的定义代码如下：</p>
<p><strong>代码四：正解版</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_class : objc_object &#123;</div><div class="line">    <span class="comment">// Class ISA;</span></div><div class="line">    Class superclass;</div><div class="line">    cache_t cache;             <span class="comment">// formerly cache pointer and vtable</span></div><div class="line">    class_data_bits_t bits;    <span class="comment">// class_rw_t * plus custom rr/alloc flags</span></div><div class="line">    </div><div class="line">    <span class="comment">// ....</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> objc_object &#123;</div><div class="line">private:</div><div class="line">    isa_t isa;</div><div class="line"><span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">union</span> isa_t &#123;</div><div class="line">    isa_t() &#123; &#125;</div><div class="line">    isa_t(uintptr_t value) : bits(value) &#123; &#125;</div><div class="line"></div><div class="line">    Class cls;</div><div class="line">    uintptr_t bits;</div><div class="line"><span class="meta">#if defined(ISA_BITFIELD)</span></div><div class="line">    <span class="keyword">struct</span> &#123;</div><div class="line">        ISA_BITFIELD;  <span class="comment">// defined in isa.h</span></div><div class="line">    &#125;;</div><div class="line"><span class="meta">#endif</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>无论是学知识还是做知识，老实认真应该是最基本的要求，千万不要以讹传讹，误人子弟！</strong></p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS objc_class </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[集合对象可变与不可变的那点事]]></title>
      <url>/2019/01/13/%E9%9B%86%E5%90%88%E5%AF%B9%E8%B1%A1%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E7%82%B9%E4%BA%8B/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在文章 <a href="http://www.veryitman.com/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/" target="_blank" rel="noopener">NSString NSMutableString 可变与不可变的那些事儿</a> 分享了关于 <code>NSString</code> 和 <code>NSMutableString</code> 与 <code>copy</code> 以及 <code>mutableCopy</code> 之间的点滴。</p>
<p>今天跟大家分享一下集合类数据的可变与不可变性，再结合 <code>copy</code> 以及 <code>mutableCopy</code> 说一说注意事项。如果你仔细看过 <a href="http://www.veryitman.com/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/" target="_blank" rel="noopener">NSString NSMutableString 可变与不可变的那些事儿</a>  这篇文章，那么接下来看本篇会很轻松。</p>
<p><strong>本篇内容主要涉及以下几个方面:</strong></p>
<ul>
<li>在 OC 中的集合对象</li>
<li>集合对象的 copy、mutableCopy</li>
<li>可变与不可变集合对象之间等号赋值</li>
<li>property 中的集合对象的 copy 和 strong</li>
<li>实际案例分析</li>
</ul>
<p>为了说明问题，这里，我选用数组(NSArray)作为集合对象的代表，其他的集合类以此类推即可。</p>
<h2 id="集合对象"><a href="#集合对象" class="headerlink" title="集合对象"></a>集合对象</h2><p>在 <code>Objective-C</code> 中，非集合类对象指的是 <code>NSString</code>、<code>NSNumber</code>、<code>NSValue</code> 之类的对象，除了 <code>NSString</code> 有对应的可变类 <code>NSMutableString</code> 外，<code>NSNumber</code>、<code>NSValue</code> 都没有可变类与其对应。</p>
<p>集合类对象是指 <code>NSArray</code>、<code>NSMutableArray</code>、 <code>NSDictionary</code>、<code>NSMutableDictionary</code>、<code>NSSet</code>、<code>NSMutableSet</code> 之类的对象。</p>
<h2 id="集合对象的-copy、mutableCopy"><a href="#集合对象的-copy、mutableCopy" class="headerlink" title="集合对象的 copy、mutableCopy"></a>集合对象的 copy、mutableCopy</h2><p>看一个具体例子，请接着看下面的示例代码和说明。</p>
<p><strong>例子1：NSArray 的 copy、mutableCopy</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"veryitman.com"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"array  addr: %p, array: %@ "</span>, array, array);</div><div class="line"></div><div class="line"><span class="comment">// 地址未变和array一致，内容也一致</span></div><div class="line"><span class="built_in">NSArray</span> *array1 = array;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"array1 addr: %p, array1: %@"</span>, array1, array1);</div><div class="line"></div><div class="line"><span class="comment">// 地址未变和array一致，内容也一致</span></div><div class="line"><span class="comment">// copy 之后仍然是不可变的数组对象</span></div><div class="line"><span class="keyword">id</span> array2 = [array <span class="keyword">copy</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"array2 addr: %p, array2: %@"</span>, array2, array2);</div><div class="line"></div><div class="line"><span class="comment">// 地址改变</span></div><div class="line"><span class="keyword">id</span> array3 = [array mutableCopy];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"array3 addr: %p, array3: %@"</span>, array3, array3);</div><div class="line"></div><div class="line"><span class="comment">// 进一步说明了经过mutableCopy后，array3变成了可变数组</span></div><div class="line">[(<span class="built_in">NSMutableArray</span> *)(array3) addObject:<span class="string">@"my blog"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"array3 addr: %p, array3: %@"</span>, array3, array3);</div><div class="line"></div><div class="line"><span class="comment">// 因为array3地址变了，不会影响array的地址和值</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"array  addr: %p, array: %@ "</span>, array, array);</div></pre></td></tr></table></figure>
<p><strong>小结 1：</strong></p>
<p>1、不可变数组 <code>copy</code> 之后，仍然是不可变数组，其地址和内容不变，即拷贝了原对象的内容和指针，属于指针拷贝。</p>
<p>2、不可变数组 <code>mutableCopy</code> 之后，变成了可变数组，其地址发生了变化，即只拷贝了原对象的内容，指针没有拷贝，属于内容拷贝。</p>
<p>3、不可变数组之间的<code>等号(=)</code>赋值，是指针拷贝。</p>
<p><strong>例子2：NSMutableArray 的 copy、mutableCopy</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableArray</span> *marray = [<span class="built_in">NSMutableArray</span> arrayWithObjects:<span class="string">@"veryitman.com"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"marray  addr: %p, marray: %@ "</span>, marray, marray);</div><div class="line"></div><div class="line"><span class="comment">// 地址未变和marray一致，内容也一致</span></div><div class="line"><span class="built_in">NSMutableArray</span> *marray1 = marray;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"marray1 addr: %p, marray1: %@ "</span>, marray1, marray1);</div><div class="line"></div><div class="line"><span class="comment">// copy 之后，地址改变且变成了不可变的数组对象</span></div><div class="line"><span class="keyword">id</span> marray2 = [marray <span class="keyword">copy</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"marray2 addr: %p, marray2: %@ "</span>, marray2, marray2);</div><div class="line"></div><div class="line"><span class="comment">// mutableCopy 之后，地址改变但仍是可变数组对象</span></div><div class="line"><span class="keyword">id</span> marray3 = [marray mutableCopy];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"marray3 addr: %p, marray3: %@ "</span>, marray3, marray3);</div><div class="line"></div><div class="line"><span class="comment">// Crash：进一步说明了可变数组对象经过 copy 之后变成了不可变的marray2</span></div><div class="line"><span class="comment">// -[__NSSingleObjectArrayI addObject:]: unrecognized selector sent to instance 0x600002cbd320</span></div><div class="line"><span class="comment">// *** Terminating app due to uncaught exception 'NSInvalidArgumentException',</span></div><div class="line"><span class="comment">// reason: '-[__NSSingleObjectArrayI addObject:]: unrecognized selector sent to instance 0x600002cbd320'</span></div><div class="line"><span class="comment">// [(NSMutableArray *)(marray2) addObject:@"my blog"];</span></div><div class="line"><span class="comment">// NSLog(@"marray2 addr: %p, marray2: %@ ", marray2, marray2);</span></div><div class="line"></div><div class="line"><span class="comment">// 进一步证明了mutableCopy 之后，marray3是可变数组</span></div><div class="line">[(<span class="built_in">NSMutableArray</span> *)(marray3) addObject:<span class="string">@"my blog"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"marray3 addr: %p, marray3: %@ "</span>, marray3, marray3);</div><div class="line"></div><div class="line"><span class="comment">// 因为marray3地址改变了，所以对marray3的操作不会影响原来的数组对象marray</span></div><div class="line"><span class="comment">// marray 地址和内容保持不变</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"marray  addr: %p, marray: %@ "</span>, marray, marray);</div></pre></td></tr></table></figure>
<p><strong>小结 2：</strong></p>
<p>1、可变数组 <code>copy</code> 之后，会变成不可变数组，其内容不变，但是地址改变了，即只拷贝了原对象的内容，没有进行指针拷贝，属于内容拷贝。</p>
<p>2、可变数组 <code>mutableCopy</code> 之后，仍然是不可变数组，其地址发生了变化，内容没有变化，即只拷贝了原对象的内容，指针没有拷贝，属于内容拷贝。</p>
<p>3、可变数组之间<code>等号(=)</code>赋值，是指针拷贝。</p>
<p><strong>例子3：NSMutableArray 和 NSArray 之间等号赋值</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 向不可变数组赋值可变数组 */</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSMutableArray</span> *tDatas = [<span class="built_in">NSMutableArray</span> arrayWithObjects:<span class="string">@"veryitman.com"</span>, <span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--1--- tDatas addr: %p, tDatas: %@"</span>, tDatas, tDatas);</div><div class="line">    </div><div class="line">    <span class="comment">// 类似但不同于可变数组的mutableCopy操作，此时 array 的地址未变和tDatas地址一致</span></div><div class="line">    <span class="comment">// array的内容和地址未发生变化，和tDatas一致</span></div><div class="line">    <span class="built_in">NSArray</span> *array = tDatas;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--2--- array addr: %p, array: %@"</span>, array, array);</div><div class="line">&#125;</div><div class="line">    </div><div class="line"> <span class="comment">/** 向可变数组赋值不可变数组 */</span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSArray</span> *tDatas = [<span class="built_in">NSArray</span> arrayWithObjects:<span class="string">@"veryitman.com"</span>, <span class="literal">nil</span>];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--1--- tDatas addr: %p, tDatas: %@"</span>, tDatas, tDatas);</div><div class="line">    </div><div class="line">    <span class="comment">// 类似进行了不可变数组的 copy 操作</span></div><div class="line">    <span class="comment">// array 仍旧是不可变的，地址和内容与tDatas一致</span></div><div class="line">    <span class="built_in">NSMutableArray</span> *array = tDatas;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--2--- array addr: %p, array: %@"</span>, array, array);</div><div class="line">    </div><div class="line">    <span class="comment">// crash: 还是不可变的数组</span></div><div class="line">    <span class="comment">// -[__NSArrayI addObject:]: unrecognized selector sent to instance 0x6000025499c0</span></div><div class="line">    <span class="comment">// Terminating app due to uncaught exception 'NSInvalidArgumentException',</span></div><div class="line">    <span class="comment">// reason: '-[__NSArrayI addObject:]: unrecognized selector sent to instance 0x6000025499c0'</span></div><div class="line">    <span class="comment">// [array addObject:@"blog"];</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-<span class="number">-1</span>--- tDatas addr: <span class="number">0x6000023a8bd0</span>, tDatas: (</div><div class="line">    <span class="string">"veryitman.com"</span></div><div class="line">)</div><div class="line">-<span class="number">-2</span>--- array addr: <span class="number">0x6000023a8bd0</span>, array: (</div><div class="line">    <span class="string">"veryitman.com"</span></div><div class="line">)</div><div class="line"></div><div class="line">-<span class="number">-1</span>--- tDatas addr: <span class="number">0x600002dbbf00</span>, tDatas: (</div><div class="line">    <span class="string">"veryitman.com"</span></div><div class="line">)</div><div class="line">-<span class="number">-2</span>--- array addr: <span class="number">0x600002dbbf00</span>, array: (</div><div class="line"> 	 <span class="string">"veryitman.com"</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>以上是使用 <code>NSArray</code>、<code>NSMutableArray</code> 来进行测试的，<code>NSDictionary</code> 和 <code>NSSet</code> 以及其对应的可变类型都遵循上面总结的内容。</p>
<h2 id="copy、strong-修饰属性"><a href="#copy、strong-修饰属性" class="headerlink" title="copy、strong 修饰属性"></a>copy、strong 修饰属性</h2><p>在属性中，我们如何来选择 <code>copy</code> 或者 <code>strong</code> 来作为集合数据的修饰语呢？</p>
<p>根据上面示例分析结果可以看出，在属性中，如果使用 <code>strong</code> 修饰不可变数组，那么在使用过程中(被可变数组赋值)该不可变数组有可能会变为可变数组。如果使用 <code>copy</code> 修饰可变数组，那么在使用过程中（被不可变数组赋值）该可变数组有可能变为不可变数组。</p>
<p><strong>小结 3：</strong></p>
<p>当修饰可变类型的属性时，如 <code>NSMutableArray</code>、<code>NSMutableDictionary</code>、<code>NSMutableSet</code> 等集合类型时，用 <code>strong</code> 修饰。</p>
<p>当修饰不可变类型的属性时，如 <code>NSArray</code>、<code>NSDictionary</code>、<code>NSSet</code> 等集合类型时，用 <code>copy</code> 修饰。</p>
<p>大家如果有兴趣可以参考文章 <a href="http://www.veryitman.com/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/" target="_blank" rel="noopener">NSString NSMutableString 可变与不可变的那些事儿</a>  的做法来验证上面的理论知识。</p>
<h2 id="实际案例分析"><a href="#实际案例分析" class="headerlink" title="实际案例分析"></a>实际案例分析</h2><p>再给大家举个实际的开发案例，我们需要定时上报目采集APP的数据，这个需求看起来是没有任何难度的。</p>
<p>我们使用代码来模拟一下上报数据的这个过程。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 采集到的数据</span></div><div class="line"><span class="built_in">NSMutableDictionary</span> *tDatas = [<span class="built_in">NSMutableDictionary</span> dictionaryWithCapacity:<span class="number">5</span>];</div><div class="line">[tDatas setObject:<span class="string">@"https://"</span> forKey:<span class="string">@"req_m"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"--采集数据--- tDatas addr: %p, tDatas: %@"</span>, tDatas, tDatas);</div><div class="line"><span class="comment">// 开始发送</span></div><div class="line">[<span class="keyword">self</span> sendDatas:tDatas];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"--上报完成，原数据--- tDatas addr: %p, tDatas: %@"</span>, tDatas, tDatas);</div></pre></td></tr></table></figure>
<p>发送数据的模拟示例如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sendDatas:(<span class="built_in">NSDictionary</span> *)datas</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--上报中--- datas addr: %p, datas: %@"</span>, datas, datas);</div><div class="line">    </div><div class="line">    <span class="comment">/** 下面两行代码只是为了模拟原数据被外界在传输过程中被改变，比如其他采集线程改变了它 */</span></div><div class="line">    <span class="keyword">if</span> ([datas isKindOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        [(<span class="built_in">NSMutableDictionary</span> *)datas setObject:<span class="string">@"veryitman.com"</span> forKey:<span class="string">@"test_m"</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--上报完成--- datas addr: %p, datas: %@"</span>, datas, datas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据上面<strong>例子3</strong>提到的，不可变向可变等号赋值时，原不可变对象会变成可变对象。</p>
<p>控制台输出日志，如下所示：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">--采集数据--- tDatas addr: <span class="number">0x600000b788e0</span>, tDatas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">--上报中--- datas addr: <span class="number">0x600000b788e0</span>, datas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">--上报完成--- datas addr: <span class="number">0x600000b788e0</span>, datas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">    test_m = veryitman.com;</div><div class="line">&#125;</div><div class="line"></div><div class="line">--上报完成，原数据--- tDatas addr: <span class="number">0x600000b788e0</span>, tDatas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">    test_m = veryitman.com;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面代码的代码，我是为了模拟原数据被其他代码改变了的情况，只是为了说明，不可变对象容易被外界影响和改变。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 下面两行代码只是为了模拟原数据被外界在传输过程中被改变，比如其他采集线程改变了它 */</span></div><div class="line"><span class="keyword">if</span> ([datas isKindOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">    [(<span class="built_in">NSMutableDictionary</span> *)datas setObject:<span class="string">@"veryitman.com"</span> forKey:<span class="string">@"test_m"</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的总结又提到无论是可变对象还是不可变对象经过 <code>copy</code> 之后都是不可变对象的原理，我们修改一下代码，示例如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)sendDatas:(<span class="built_in">NSDictionary</span> *)datas</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSDictionary</span> *copy_datas = [datas <span class="keyword">copy</span>];</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--上报中--- copy_datas addr: %p, copy_datas: %@"</span>, copy_datas, copy_datas);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([copy_datas isKindOfClass:[<span class="built_in">NSMutableDictionary</span> <span class="keyword">class</span>]]) &#123;</div><div class="line">        [(<span class="built_in">NSMutableDictionary</span> *)copy_datas setObject:<span class="string">@"veryitman.com"</span> forKey:<span class="string">@"test_m"</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"Yes, copy_datas 是不可变字典。"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--上报完成--- copy_datas addr: %p, copy_datas: %@"</span>, copy_datas, copy_datas);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> --采集数据--- tDatas addr: <span class="number">0x600003b08740</span>, tDatas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">--上报中--- copy_datas addr: <span class="number">0x600003b08700</span>, copy_datas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">Yes, copy_datas 是不可变字典。</div><div class="line"></div><div class="line">--上报完成--- copy_datas addr: <span class="number">0x600003b08700</span>, copy_datas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">--上报完成，原数据--- tDatas addr: <span class="number">0x600003b08740</span>, tDatas: &#123;</div><div class="line">    req_m = https:<span class="comment">//;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS 集合对象 可变 不可变 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[macOS下生成字符串md5]]></title>
      <url>/2019/01/13/macOS%E4%B8%8B%E7%94%9F%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2md5/</url>
      <content type="html"><![CDATA[<p>在 macOS 系统下生成任意字符串的 md5 值，很简单，直接使用 <code>md5</code> 命令即可。</p>
<p>例如，要生成 <code>veryitman.com</code> 这个字符串的md5值，直接使用下面的命令即可，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">md5 -s veryitman.com</div></pre></td></tr></table></figure>
<p>对应生成的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MD5 (&quot;veryitman.com&quot;) = c5c401dcdacd95052eef360c3533a8bd</div></pre></td></tr></table></figure>
<p>这里要注意，有些使用者会这样来计算：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo &quot;veryitman.com&quot; | md5</div></pre></td></tr></table></figure>
<p>生成结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bc239ea4ba4ebbd4ef9e61c160fcac3c</div></pre></td></tr></table></figure>
<p>发现和上面的结果不一致，这是因为 <code>echo</code> 默认会添加一个换行符，导致计算的md5值不一致，修改一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo -n &quot;veryitman.com&quot; | md5</div></pre></td></tr></table></figure>
<p>生成结果 <code>c5c401dcdacd95052eef360c3533a8bd</code> 与上面一致了。</p>
<p><strong>注意： <code>echo -n</code> 用来不显示结尾的换行符。</strong></p>
<p>更多关于 <code>md5</code> 的命令 可以问男人(man)，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man md5</div></pre></td></tr></table></figure>
<p><code>MD5(Message-Digest Algorithm 5)</code> 全称是报文摘要算法，此算法对任意长度的信息逐位进行计算，产生一个二进制长度为128位（十六进制长度就是32位）的“指纹”（或称“报文摘要”），不同的文件也能产生相同的报文摘要，但是可能性是极其小的。 </p>
<p><code>MD5 算法</code> 常常被用来验证网络文件传输的完整性，防止文件被人篡改，但是现在 MD5 的算法并不安全了。</p>
<p>在 macOS 上面还有 <code>md5sum</code> 这个命令，一般用来计算文件的md5值。</p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> macOS string md5 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 中如何使用对象的弱引用]]></title>
      <url>/2019/01/06/iOS-%E4%B8%AD%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%BC%B1%E5%BC%95%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我们都知道使用 <code>UIImage imageNamed</code> 创建的 <code>UIImage</code> 对象会被持有(强引用)，如果图片太大会占用内存，损耗 APP 的性能，影响用户体验，如果能改造对其的强引用变为弱引用就可以解决问题。</p>
<p>我们可能会有类似上面的场景，有些对象暂时保存起来，可能后面会用到，也有可能不会使用，但是又不想去管理它们的生命周期，如果它们能够自己被销毁就很省事，不需要去关心这些对象到底耗费了多少内存。</p>
<p>今天跟大家聊聊如何在 iOS 开发中保持对对象的弱引用而不是强引用，希望看完之后，能帮助到大家去解决实际问题。</p>
<h2 id="NSObject-retainCount"><a href="#NSObject-retainCount" class="headerlink" title="NSObject retainCount"></a>NSObject retainCount</h2><p>在 iOS 中创建一个对象，该对象的引用计数就会加1，例如下面的例子：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSObject</span> *obj = [<span class="built_in">NSObject</span> alloc] init];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj retain count: %zd"</span>, [obj retainCount]);</div></pre></td></tr></table></figure>
<p>上面的例子输出是1，当然在 ARC 下是无法使用 <code>retainCount</code> 这个方法的，只有在非 ARC 条件下才可以，如果要运行上面的例子，对应的文件需要设置为 <code>-fno-objc-arc</code>.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSUInteger</span>)retainCount OBJC_ARC_UNAVAILABLE;</div></pre></td></tr></table></figure>
<p>可以在 <code>usr/include/objc/NSObject.h</code> 中查看，<code>retainCount</code> 是 <code>NSObject 协议</code>（<code>@protocol NSObject</code>）中定义的一个方法，而 <code>NSObject</code> 类是实现了该协议的，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSObject</span> &lt;<span class="title">NSObject</span>&gt;</span></div></pre></td></tr></table></figure>
<p>所以，任何OC对象都具有 <code>retainCount</code> 方法。另外，你添加一个视图，视图其实也是被容器引用了，其计数也会加1被容器持有其强引用，再例如在数组中添加一个对象，会使对象的引用计数加1，被数组所持有。 </p>
<h2 id="NSValue-valueWithNonretainedObject"><a href="#NSValue-valueWithNonretainedObject" class="headerlink" title="NSValue valueWithNonretainedObject"></a>NSValue valueWithNonretainedObject</h2><p>在 iOS 中，<code>NSValue</code> 的类方法 <code>valueWithNonretainedObject</code> 可以保持对对象的弱引用。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSValue</span> *)valueWithNonretainedObject:(<span class="keyword">nullable</span> <span class="keyword">id</span>)anObject;</div></pre></td></tr></table></figure>
<blockquote>
<p>This method is useful if you want to add an object to a Collection but don’t want the collection to create a strong reference to it.</p>
</blockquote>
<p>大概意思是，该方法可以不持有对象的强引用，换句话说，只持有对象的弱引用。</p>
<p>举个栗子~</p>
<p><strong>MZDog.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MZDog</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>MZDog.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"MZDog.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZDog</span></span></div><div class="line"></div><div class="line">- (<span class="built_in">NSString</span> *)description</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"MZDog-obj retain count: %zd"</span>, [<span class="keyword">self</span> retainCount]];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里 <code>MZDog</code> 是设置了非 ARC 的，如图：<br><img src="/upload/images/2019/01/06/1.jpg" alt=""></p>
<p>在测试文件中使用 <code>MZDog</code>，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div><div class="line">    </div><div class="line"><span class="comment">// 对 dog 使用弱引用，此时其引用计数还是1</span></div><div class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithNonretainedObject:dog];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@, value: %@"</span>, dog, value);</div><div class="line">    </div><div class="line"><span class="comment">// 获取 value 对应的对象</span></div><div class="line"><span class="keyword">id</span> obj = value.nonretainedObjectValue;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj isKindOfClass MZDog: %i"</span>, [obj isKindOfClass:[MZDog <span class="keyword">class</span>]]);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (obj == dog) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"The obj is same dog object."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的控制台输出，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span></div><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, value: &lt;<span class="number">308</span>cf600 <span class="number">00600000</span>&gt;</div><div class="line">obj isKindOfClass MZDog: <span class="number">1</span></div><div class="line">The obj is same dog object.</div></pre></td></tr></table></figure>
<p>从上面的例子可以看出，<code>valueWithNonretainedObject</code> 对 <code>MZDog</code> 对象 <code>dog</code> 是没有强应用的。修改代码，示例一下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div><div class="line">    </div><div class="line"><span class="comment">// 对 dog 使用弱引用，此时其引用计数还是1</span></div><div class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithNonretainedObject:dog];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@, value: %@"</span>, dog, value);</div><div class="line">    </div><div class="line"><span class="comment">// 经过NSValue包装后，可以放到对应的集合对象(如数组，字典等)中，这样这些集合就不会对 dog 进行强引用了</span></div><div class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:value, <span class="literal">nil</span>];</div><div class="line"><span class="comment">// dog 的引用计数还是1</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@, array: %@"</span>, dog, array);</div></pre></td></tr></table></figure>
<p>对应的输出日志：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span></div><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, value: &lt;<span class="number">40</span>b7a401 <span class="number">00600000</span>&gt;</div><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, array: (<span class="string">"&lt;40b7a401 00600000&gt;"</span>)</div></pre></td></tr></table></figure>
<p>方法 <code>valueWithNonretainedObject</code> 等同于</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSValue</span> *theValue = [<span class="built_in">NSValue</span> value:&amp;anObject withObjCType:<span class="keyword">@encode</span>(<span class="keyword">void</span> *)];</div></pre></td></tr></table></figure>
<p>上面的示例，可以改写一下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div><div class="line">    </div><div class="line"><span class="comment">// 对 dog 使用弱引用，此时其引用计数还是1</span></div><div class="line"><span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> value:&amp;dog withObjCType:<span class="keyword">@encode</span>(<span class="keyword">void</span> *)];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@, value: %@"</span>, dog, value);</div><div class="line"></div><div class="line"><span class="comment">// 经过NSValue包装后，可以放到对应的集合对象(如数组，字典等)中，这样这些集合就不会对 dog 进行强引用了</span></div><div class="line"><span class="built_in">NSArray</span> *array = [<span class="built_in">NSArray</span> arrayWithObjects:value, <span class="literal">nil</span>];</div><div class="line"><span class="comment">// dog 的引用计数还是1</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@, array: %@"</span>, dog, array);</div></pre></td></tr></table></figure>
<p>输出日志：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span></div><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, value: &lt;<span class="number">40568</span>a02 <span class="number">00600000</span>&gt;</div><div class="line">dog: MZDog-obj <span class="keyword">retain</span> count: <span class="number">1</span>, array: (<span class="string">"&lt;40568a02 00600000&gt;"</span>)</div></pre></td></tr></table></figure>
<p>此时 <code>dog</code> 的引用计数还是没有增加~</p>
<h2 id="自写弱引用的集合分类"><a href="#自写弱引用的集合分类" class="headerlink" title="自写弱引用的集合分类"></a>自写弱引用的集合分类</h2><p>根据上面的理论知识，我们可以使用 <code>NSValue</code> 写出弱引用的集合对象，思路很简单，创建集合类的分类，然后使用 <code>NSValue</code> 来进行包装。看下面的示例代码即可。</p>
<p><strong>NSArray+MZWeak.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSArray</span> (<span class="title">MZWeak</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)mz_weak_objectAtIndex:(<span class="built_in">NSUInteger</span>)index;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSMutableArray</span> (<span class="title">MZWeak</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mz_weak_addObject:(<span class="keyword">id</span>)obj;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>NSArray+MZWeak.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"NSArray+MZWeak.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSArray</span> (<span class="title">MZWeak</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)mz_weak_objectAtIndex:(<span class="built_in">NSUInteger</span>)index</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSValue</span> *value = [<span class="keyword">self</span> objectAtIndex:index];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> value.nonretainedObjectValue;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">NSMutableArray</span> (<span class="title">MZWeak</span>)</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mz_weak_addObject:(<span class="keyword">id</span>)obj</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSValue</span> *value = [<span class="built_in">NSValue</span> valueWithNonretainedObject:obj];</div><div class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> != value) &#123;</div><div class="line">        [<span class="keyword">self</span> addObject:value];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在文件中使用，示例如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div><div class="line">    </div><div class="line"><span class="built_in">NSMutableArray</span> *array = [<span class="built_in">NSMutableArray</span> arrayWithCapacity:<span class="number">1</span>];</div><div class="line"><span class="comment">// 弱引用</span></div><div class="line">[array mz_weak_addObject:dog];</div><div class="line">    </div><div class="line"><span class="comment">// 此时 dog 的引用计数还是1</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div></pre></td></tr></table></figure>
<p>依次类推，对于其他集合类 <code>NSDictionary</code>、<code>NSSet</code> 都可以实现。当然实现方式不止这一种，这里只是举了一个 <code>NSValue</code> 包装对象来实现的例子。</p>
<p>当然你也可以使用 <code>NSProxy</code> 或者 <code>block</code> 来解除对对象的强引用。关于 <code>block</code> 的解除方法，可以参考开源项目 <a href="https://github.com/Magic-Unique/HXImage/blob/master/Plan%20B/WeakReference.m" target="_blank" rel="noopener">HXImage</a>，另外开源项目 <a href="https://github.com/ibireme/YYKit/blob/master/YYKit/Utility/YYWeakProxy.m" target="_blank" rel="noopener">YYWeakProxy</a> 里面使用了 <code>NSProxy</code> 来解除强引用。</p>
<p>那么，除了上面提到的方法，系统类库中有没有现成的类呢？聪明的你一定猜到了，一定有！</p>
<p>是的，往下看。。。</p>
<h2 id="NSPointerArray、NSMapTable、NSHashTable"><a href="#NSPointerArray、NSMapTable、NSHashTable" class="headerlink" title="NSPointerArray、NSMapTable、NSHashTable"></a>NSPointerArray、NSMapTable、NSHashTable</h2><p>集合类 <code>NSArray</code>、<code>NSDictionary</code> 和 <code>NSSet</code> 以及其对应的可变版本，都可以用来存储 OC对象的, 但是对其中的对象都是强引用的。</p>
<p>从 <code>iOS6.0</code> 版本及以后的版本中，系统给我们提供了 <code>NSPointerArray</code>、<code>NSMapTable</code> 和 <code>NSHashTable</code> 分别对应 <code>NSArray</code>、<code>NSDictionary</code> 和 <code>NSSet</code>，最大的不同就是，<code>NSPointerArray</code>、<code>NSMapTable</code> 和 <code>NSHashTable</code> 对对象是弱引用而不是强引用。</p>
<blockquote>
<p>现在大部分的 iOS APP 或者 iOS 游戏应该都至少在 iOS7 以上了吧，所以可以尽情使用这些系统提供的类库了。</p>
</blockquote>
<p>使用 <code>NSPointerArray</code> 保存弱引用的对象，需要使用下面三种方式来创建 <code>NSPointerArray</code> 对象，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建 NSPointerArray 对象方式一</span></div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</div><div class="line">    </div><div class="line"><span class="comment">// 创建 NSPointerArray 对象方式二</span></div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray1 = [[<span class="built_in">NSPointerArray</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</div><div class="line">    </div><div class="line"><span class="comment">// 创建 NSPointerArray 对象方式三</span></div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray2 = [<span class="built_in">NSPointerArray</span> pointerArrayWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</div></pre></td></tr></table></figure>
<p>那么下面还是以 <code>MZDog</code> 来举例子，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div><div class="line">    </div><div class="line"><span class="comment">// 创建 NSPointerArray 对象方式一</span></div><div class="line"><span class="comment">// 注意 weakObjectsPointerArray 而不是 strongObjectsPointerArray</span></div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</div><div class="line">[pointerArray addPointer:(__bridge <span class="keyword">void</span> *)(dog)];</div><div class="line">    </div><div class="line"><span class="comment">// 创建 NSPointerArray 对象方式二</span></div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray1 = [[<span class="built_in">NSPointerArray</span> alloc] initWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</div><div class="line">[pointerArray1 addPointer:(__bridge <span class="keyword">void</span> *)(dog)];</div><div class="line">    </div><div class="line"><span class="comment">// 创建 NSPointerArray 对象方式三</span></div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray2 = [<span class="built_in">NSPointerArray</span> pointerArrayWithOptions:<span class="built_in">NSPointerFunctionsWeakMemory</span>];</div><div class="line">[pointerArray2 addPointer:(__bridge <span class="keyword">void</span> *)(dog)];</div><div class="line">    </div><div class="line"><span class="comment">// dog 引用计数还是1</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div></pre></td></tr></table></figure>
<p>对应的输出 <code>dog</code> 对象的 <code>retainCount</code> 仍然是 1，其引用计数没有增加。</p>
<p>对应 <code>NSMapTable</code> 和 <code>NSHashTable</code> 的示例如下：</p>
<p><strong>NSMapTable 示例</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div><div class="line">    </div><div class="line"><span class="comment">// 弱应用对象</span></div><div class="line"><span class="built_in">NSMapTable</span> *map = [<span class="built_in">NSMapTable</span> weakToWeakObjectsMapTable];</div><div class="line">[map setObject:dog forKey:<span class="string">@"first"</span>];</div><div class="line">    </div><div class="line"><span class="comment">// 引用计数还是1，没变</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div></pre></td></tr></table></figure>
<p><strong>NSHashTable 示例</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div><div class="line">    </div><div class="line"><span class="comment">// 弱应用对象</span></div><div class="line"><span class="built_in">NSHashTable</span> *hashTable = [<span class="built_in">NSHashTable</span> weakObjectsHashTable];</div><div class="line">[hashTable addObject:dog];</div><div class="line">    </div><div class="line"><span class="comment">// 引用计数还是1，没变</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div></pre></td></tr></table></figure>
<h2 id="NSPointerArray-与-NULL"><a href="#NSPointerArray-与-NULL" class="headerlink" title="NSPointerArray 与 NULL"></a>NSPointerArray 与 NULL</h2><p>在 <code>NSMutableArray</code> 中添加的对象不可以是 <code>nil</code>，而 <code>NSPointerArray</code> 中却可存储 <code>NULL</code>(nil 经过转换得到C指针为 NULL)，也可以用来存储weak对象。weak类型的对象释放之后，<code>NSPointerArray</code> 的对应位置会自动变成 <code>NULL</code>，使用<code>count</code> 属性, 会将 <code>NULL</code> 元素也计算进来，即 NULL 算是它的一员。下面示例可以证明，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">MZDog *dog = <span class="literal">nil</span>;</div><div class="line">        </div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</div><div class="line"><span class="keyword">void</span> *cobj = (__bridge <span class="keyword">void</span> *)(dog);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"obj: %@"</span>, cobj); <span class="comment">//NULL</span></div><div class="line">[pointerArray addPointer:cobj];</div><div class="line"></div><div class="line"><span class="comment">// 虽然存储的是 NULL，但是 count 仍然是 1</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"pointerArray count: %zd"</span>, [pointerArray count]);</div><div class="line"></div><div class="line"><span class="built_in">NSArray</span> *array = [pointerArray allObjects];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"pointerArray allObjects: %@"</span>, array);</div></pre></td></tr></table></figure>
<p>一般这样删除 <code>NSPointerArray</code> 中的 <code>NULL</code> 元素，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[pointerArray addPointer:<span class="literal">NULL</span>];</div><div class="line">[pointerArray compact];</div></pre></td></tr></table></figure>
<p>这里要注意，将OC对象转换为C指针要使用 <code>(__bridge void *)</code> 这种方式，不要使用 <code>(__bridge_retained void *)</code> 或者 <code>CFBridgingRetain</code>，这二者会对 <code>dog</code> 对象进行强引用。如下示例：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// retainCount -&gt; 1</span></div><div class="line">MZDog *dog = [MZDog new];</div><div class="line"><span class="built_in">NSPointerArray</span> *pointerArray = [<span class="built_in">NSPointerArray</span> weakObjectsPointerArray];</div><div class="line"><span class="comment">// 这里会 retain dog 对象，使其引用计数加1，此时retainCount 是 2</span></div><div class="line">[pointerArray addPointer:(__bridge_retained <span class="keyword">void</span> *)dog];</div><div class="line"><span class="comment">// 这里会 retain dog 对象，使其引用计数再加1，retainCount 是 3</span></div><div class="line">[pointerArray addPointer:<span class="built_in">CFBridgingRetain</span>(dog)];</div><div class="line">    </div><div class="line"><span class="comment">// 此时的 retainCount 是 3</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"dog: %@"</span>, dog);</div></pre></td></tr></table></figure>
<p>如果你对 <code>(__bridge_retained void *)</code> 或者 <code>CFBridgingRetain</code> 感兴趣，可以看看 <a href="http://www.veryitman.com/2018/03/07/C-%E6%8C%87%E9%92%88%E4%B8%8E-OC-%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/" target="_blank" rel="noopener">C 指针与 OC 对象之间的转换</a> 这篇文章。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> weak strong NSPointerArray </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2018，不会重来]]></title>
      <url>/2018/12/31/2018%EF%BC%8C%E4%B8%8D%E4%BC%9A%E9%87%8D%E6%9D%A5/</url>
      <content type="html"><![CDATA[<p>今天是2018年的最后一天，即2018年12月31日。提前祝愿所有人2019身体健康，万事如意，阖家幸福！</p>
<p>这篇文章 <a href="http://www.veryitman.com/2016/12/31/%E5%86%8D%E8%A7%81-2016/" target="_blank" rel="noopener">再见 2016</a> 是在2016年末写的，算是一个hin随心的小结。比较遗憾的是在2017年没有给自己写个总结，所以，不能再错过2018了，我怕老了没有可以寻迹的回忆！</p>
<p>2018 有太多需要感谢的人了，感谢所有工作上，生活上关心、支持和鼓励我的人们，感谢我的家人给予了我太多的理解和包容，非常感谢你们！</p>
<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>2018年我的职业没有太大的变化，仍然是奋斗在一线工作岗位上的一名软件工程师，我喜欢这份职业，它没有过多的纷争，工程师之间的沟通简单、直接！</p>
<p>唯一和以前不同的是自己开始负责一个团队了，责任比以前要大了很多，压力也随之剧增。慢慢地，写代码变成了可望不可求的事情了，因为你要处理比写代码更重要的事情，比如团队的磨合，目标的制定，任务的规划等等一系列工作。</p>
<p>在 <code>《蚂蚁金服：科技金融独角兽的崛起》</code> 这本书里讲到过：</p>
<blockquote>
<p>作为领导，团队里每一个人的错误都是自己的错误，但团队里每一个人的成果未必是自己的成果，这时整个人的心态就需要重新调整。</p>
</blockquote>
<p>我算是一个比较幸运的人，因为团队中有很多比自己更优秀的人，他们有想法，有执行，总是能带动其他人积极的工作。这些人是团队学习的榜样，更是我们团队的财富。</p>
<p>公司在改变，各个方面也越来越成熟，无论是公司文化还是技术能力都在步步高升，今年尤为看到的是 CTO 对技术中台下定的一些决心，这是让人兴奋的。公司一直在强调赋能，把更多优秀、有担当、有责任心的人提拔上来，给他们配备资源，以便发挥他们更大的潜能，大家工作的热情也更上一层楼，因为公司相信他们。</p>
<p>很多时候，并不是你身边没有优秀的人，只是你不愿意相信他们，前怕狼后怕虎的心态阻止了这些优秀人的发挥。其实，他们只是需要你一个肯定的答复，所以试着去改变自己，相信团队里面的每个人，给他们更多的肯定，鼓励和支持他们，结果不会让你失望的。</p>
<h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>自从老婆孩子回老家之后，我就过上了“单身“的生活，每天早出晚归，努力用工作来代替对他们的思念。</p>
<p>我家的大宝是个天生的运动狂，感觉他总是有用不完的力气，除非他自己在拼图或者画画，否则你甭想清静。一会在家里穿上溜冰鞋给你表演各种溜冰技能，一会拿起篮球给你表演球技，再不是就让你陪他玩跳棋。</p>
<p>老婆大人在家待产了，自己一个人挺着肚子还要给大宝做饭，每天接送他去学校，知道她一个人在家不容易，我也经常鼓励她，她说：“为了孩子，这点苦不算什么！”。有时候，想一想二宝快要跟我们见面了，挺兴奋的。</p>
<p>有时候挺想念他们娘俩的，工作不忙的时候我也会请假回老家，记得上次回去离开的时候，儿子问了我一个问题，他说：“爸爸，你说是钱重要，还是人重要？”，我当时愣了一下，告诉他：“当然是人重要呀！”，他不开心的点了点头。显然，这家伙对我的离开很不满意，那天晚上我赶火车走的时候，大宝在被窝里哭了很久，其实，我也流泪了，只是不愿意承认罢了！</p>
<p>你自己除了是一名员工之外，还是一名儿子、女儿，或者是一名父亲、母亲，一名丈夫、妻子，只有处理好生活上面的事情，才能更好的投入到工作当中来。无论如何，人还是需要有梦想的！我的梦想就是努力学习更多有用的知识，然后用自己的知识去教育自己的子女，让他们将来能有更好的生活，做一个有用的社会人。</p>
<p>用电影《中国合伙人》成东青的一句话来说：“梦想是什么，梦想就是一种让你感到坚持就是幸福的东西！”。</p>
<h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>这些年，自己唯一没有丢弃的爱好就是阅读。</p>
<p>工作上的忙碌，生活上的疲惫，很多时候让我们无法静下心来去阅读，甚至有时候会觉得阅读简直在浪费时间，浪费生命。如果你有这种想法，建议你请假去好好休息几天，抛开喧嚣的尘世，放空一下自己。</p>
<p>我一直坚持阅读，无论是技术书籍还是人文历史，抑或人物传记，平时工作也很忙，我就利用零散的时间来阅读，就算这样，每周每个月累计下来阅读量也不少了，随着阅读量的增多，感觉自己的气色好了很多，因为心态好了，遇事比以前更加沉着冷静了，也更加理性了。</p>
<blockquote>
<p>您的气质里藏着你读过的那些书。</p>
</blockquote>
<p>今年读到自认为不错的书籍，推荐给大家：</p>
<p><strong>1. 蚂蚁金服：科技金融独角兽的崛起</strong><br><img src="/upload/images/2018/12/31/1.jpg" alt=""></p>
<p><strong>2. 赋能：打造应对不确定性的敏捷团队</strong><br><img src="/upload/images/2018/12/31/2.jpg" alt=""></p>
<p><strong>3. 我的情绪为何总被他人左右</strong><br><img src="/upload/images/2018/12/31/3.jpg" alt=""></p>
<p><strong>4. 终身成长</strong><br><img src="/upload/images/2018/12/31/4.jpg" alt=""></p>
<h2 id="2019"><a href="#2019" class="headerlink" title="2019"></a>2019</h2><p><strong>1. 加强对上沟通</strong></p>
<p>沟通不能仅限于对下沟通，对上沟通尤为重要，让上级知道目前项目的进度和规划，以及遇到的问题。这一点自己做的还不够好，在2019年要加强。</p>
<p><strong>2. 加强自我管理</strong></p>
<p>管理，不是管理别人，而是要管理好自己，没有人愿意被管理，如果有需要被严格管理的，他可能不适合在你的团队中生存。加强自我管理是我们每个人的目标。</p>
<p><strong>3. 个人、团队技术能力再上一层楼</strong></p>
<p>补齐自己的短板，想尽一切办法提高自己和团队其他技术人员的技术能力，在稳定、高效的同时寻找更多自我成长的途径和方法。</p>
<p><strong>4.更加关心自己的家人和身边的朋友</strong></p>
<p>没有家人的支持和鼓励，你很难去投入工作，所以要好好的对待自己的家人，多关心他们，家人对你的要求不多，往往只需要知道你有没有惦记他们就够了。当然了，我很期待和我们家的二宝见面，嘿嘿😜！</p>
<p>朋友多了，路才好走，记得跟朋友多聊天，多听听他们的故事，最重要的是经常约他们喝喝酒。</p>
<hr>
<p>最后分享给大家一句话，共勉：</p>
<blockquote>
<p>你的目的不是给谁打工，而是成为更好的自己，建设更好的未来！所以尽快去调整心态，停止抱怨，立即行动，积极沟通！</p>
</blockquote>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSString、NSMutableString 可变与不可变的那些事儿]]></title>
      <url>/2018/12/30/NSString%E3%80%81NSMutableString-%E5%8F%AF%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%AF%E5%8F%98%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这篇文章的主要包含如下内容：</p>
<ul>
<li>可变对象和不可变对象</li>
<li>NSString 的 copy 和 mutableCopy</li>
<li>NSMutableString 的 copy 和 mutableCopy</li>
<li>property 中 copy、strong 修饰 NSString</li>
<li>property 中 copy、strong 修饰 NSMutableString</li>
</ul>
<p>很多 iOS 开发的朋友会争论一个问题，我用 <code>copy</code> 和 <code>strong</code> 来修饰 <code>NSString</code> 对象都是一样的效果，在大部分情况下，这二者确实是没有区别，但是在特殊情况下，二者截然不同，所以我们必须搞清楚里面的道道。</p>
<p>我已经尽力简化了这篇文章的内容了，但依然需要你花个15分钟左右的时间，所以当你心情不错又没有其他事情的情况下，就可以来阅读了。</p>
<h2 id="可变对象和不可变对象"><a href="#可变对象和不可变对象" class="headerlink" title="可变对象和不可变对象"></a>可变对象和不可变对象</h2><p>在 <code>Objective-C</code> 中最常用来处理字符串的是 <code>NSString</code> 与 <code>NSMutableString</code> 这两个类，<code>NSString</code> 被创建赋值后字符串的内容与长度不能再做动态的修改，除非重新给这个字符串赋值。而 <code>NSMutableString</code> 被创建赋值后可以动态的修改字符串的内容。</p>
<p>那么简单来说，可变对象是指，对象的内容是可变的，例如 <code>NSMutableString</code> 对象。不可变的对象则相反，表示其内容不可变，例如 <code>NSString</code> 对象。</p>
<p>可变与不可变是针对对象来说的。在实际开发中，要根据实际的业务场景来选择使用可变还是不可变对象。今天我们只讨论 <code>Objective-C</code> 中 <code>NSString</code> 与 <code>NSMutableString</code> 这两个类，关于其他集合类的可变与不可变特性，后面专门再来写文章分享。</p>
<h2 id="NSString-的-copy-和-mutableCopy"><a href="#NSString-的-copy-和-mutableCopy" class="headerlink" title="NSString 的 copy 和 mutableCopy"></a>NSString 的 copy 和 mutableCopy</h2><p>在 <code>NSString.h</code> 中，我们可以看到其定义如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">NSString</span> : <span class="title">NSObject</span> &lt;<span class="title">NSCopying</span>, <span class="title">NSMutableCopying</span>, <span class="title">NSSecureCoding</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>NSString.h</code> 本身实现了 <code>NSCopying</code>, <code>NSMutableCopying</code> 这两个协议，协议的定义如下内容所示：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSCopying</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)copyWithZone:(<span class="keyword">nullable</span> <span class="built_in">NSZone</span> *)zone;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">NSMutableCopying</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)mutableCopyWithZone:(<span class="keyword">nullable</span> <span class="built_in">NSZone</span> *)zone;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>也就是说，我们可以针对 <code>NSString</code> 对象进行 <code>copy</code> 和 <code>mutableCopy</code> 的操作，妥妥的。</p>
<p>举一个简单的栗子，示例代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *name = <span class="string">@"www."</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name addr: %p, name content: %@"</span>, name, name);</div><div class="line">    </div><div class="line"><span class="built_in">NSString</span> *name1 = name;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name1 addr: %p, name1 content: %@"</span>, name1, name1);</div><div class="line">    </div><div class="line"><span class="built_in">NSString</span> *name2 = [name <span class="keyword">copy</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name2 addr: %p, name2 content: %@"</span>, name2, name2);</div></pre></td></tr></table></figure>
<p>输出结果，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">name  addr: <span class="number">0x10090ecf8</span>, name  content: www.</div><div class="line">name1 addr: <span class="number">0x10090ecf8</span>, name1 content: www.</div><div class="line">name2 addr: <span class="number">0x10090ecf8</span>, name2 content: www.</div></pre></td></tr></table></figure>
<p>从输出结果可以看出，三个对象的内容和地址都是一样的，经过 <code>name</code> 对象 <code>copy</code> 后的 <code>name2</code> 与 <code>name</code> 还是指向同一块内存地址。</p>
<p>在断点过程中，发现无论是 <code>name</code> 还是 <code>name1</code>、<code>name2</code> 对象，其都是 <code>ConstantString</code>，表明三者都是不可变对象，如下图所示：<br><img src="/upload/images/2018/12/30/1.jpg" alt=""></p>
<p>从这张图也说明了一个问题，<code>NSString</code> 对象经过 <code>copy</code> 后仍然是不可变对象。</p>
<p>紧接着，我们再来看看 <code>mutableCopy</code> 的使用情况，例子如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *name = <span class="string">@"www."</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name addr: %p, name content: %@"</span>, name, name);</div><div class="line">    </div><div class="line"><span class="built_in">NSString</span> *name1 = name;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name1 addr: %p, name1 content: %@"</span>, name1, name1);</div><div class="line">    </div><div class="line"><span class="built_in">NSString</span> *name2 = [name <span class="keyword">copy</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name2 addr: %p, name2 content: %@"</span>, name2, name2);</div><div class="line">    </div><div class="line"><span class="keyword">id</span> name3 = [name mutableCopy];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name3 addr: %p, name3 content: %@"</span>, name3, name3);</div></pre></td></tr></table></figure>
<p>对象 <code>name3</code> 是经过 <code>name</code> 对象 <code>mutableCopy</code> 后的，这个时候因为我不确定 <code>name3</code> 到底是可变的还是不可变的，所以采用了 <code>id</code> 来修饰 <code>name3</code> 对象。</p>
<p>可以看一下输出内容：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name  addr: <span class="number">0x104a6acf8</span>, name  content: www.</div><div class="line">name1 addr: <span class="number">0x104a6acf8</span>, name1 content: www.</div><div class="line">name2 addr: <span class="number">0x104a6acf8</span>, name2 content: www.</div><div class="line">name3 addr: <span class="number">0x1c0052cf0</span>, name3 content: www.</div></pre></td></tr></table></figure>
<p>可以看出，<code>name3</code> 的地址变了，再看一下断点的截图：<br><img src="/upload/images/2018/12/30/2.jpg" alt=""></p>
<p>充分说明了 <code>name3</code> 经过不可变的 <code>name</code> 进行<code>mutableCopy</code> 后变成了可变对象。那么可以将上面的示例代码稍作修改：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableString</span> *name3 = [name mutableCopy];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name3 addr: %p, name3 content: %@"</span>, name3, name3);</div><div class="line">[name3 appendString:<span class="string">@"veryitman.com"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name3 addr: %p, name3 content: %@"</span>, name3, name3);</div></pre></td></tr></table></figure>
<p>从下面的输出结果也充分说明了 <code>name3</code> 经过不可变的 <code>name</code> 进行 <code>mutableCopy</code> 后变成了可变对象。输出结果如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">name3 addr: <span class="number">0x1d0058270</span>, name3 content: www.veryitman.com</div></pre></td></tr></table></figure>
<p><strong>结论 1：</strong></p>
<ul>
<li>不可变的 <code>NSString</code> 对象经过 <code>copy</code> 后，还是不可变对象。</li>
<li>不可变的 <code>NSString</code> 对象经过 <code>mutableCopy</code> 后，变成了可变的 <code>NSMutableString</code> 对象。</li>
</ul>
<h2 id="NSMutableString-的-copy-和-mutableCopy"><a href="#NSMutableString-的-copy-和-mutableCopy" class="headerlink" title="NSMutableString 的 copy 和 mutableCopy"></a>NSMutableString 的 copy 和 mutableCopy</h2><p>类 <code>NSMutableString</code> 继承自 <code>NSString</code> 的，其当然也是实现了 <code>NSCopying</code>, <code>NSMutableCopying</code> 这两个协议的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@interface NSMutableString : NSString</div></pre></td></tr></table></figure>
<p>我们还是看例子，示例代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableString</span> *name = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"www."</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name  addr: %p, name  content: %@"</span>, name, name);</div><div class="line"></div><div class="line"><span class="comment">// 简单赋值</span></div><div class="line"><span class="built_in">NSMutableString</span> *name1 = name;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name1 addr: %p, name1 content: %@"</span>, name1, name1);</div><div class="line">   </div><div class="line"><span class="comment">// 使用 copy    </span></div><div class="line"><span class="keyword">id</span> name2 = [name <span class="keyword">copy</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name2 addr: %p, name2 content: %@"</span>, name2, name2);</div><div class="line"> </div><div class="line"><span class="comment">// 使用 mutableCopy   </span></div><div class="line"><span class="keyword">id</span> name3 = [name mutableCopy];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name3 addr: %p, name3 content: %@"</span>, name3, name3);</div></pre></td></tr></table></figure>
<p>因为事先我们不知道 <code>NSMutableString</code> 经过 <code>copy</code> 和 <code>mutableCopy</code> 之后到底会变成可变还是不可变，上面的例子暂时将 <code>name2</code> 和 <code>name3</code> 用 <code>id</code> 来表示。</p>
<p>断点截图如下：<br><img src="/upload/images/2018/12/30/3.jpg" alt=""></p>
<p>结合一下输出的日志：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">name  addr: <span class="number">0x1d044a980</span>, name  content: www.</div><div class="line">name1 addr: <span class="number">0x1d044a980</span>, name1 content: www.</div><div class="line">name2 addr: <span class="number">0xa0000002e7777774</span>, name2 content: www.</div><div class="line">name3 addr: <span class="number">0x1d044a5f0</span>, name3 content: www.</div></pre></td></tr></table></figure>
<p>可以看出 <code>name2</code> 是一个不可变的 <code>NSString</code> 对象， <code>name</code>、<code>name1</code> 和 <code>name3</code> 都是可变的 <code>NSMutableString</code> 对象。</p>
<p>也可以从另外一个角度来验证一下上面的说法，我们修改一下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSMutableString</span> *name2 = [name <span class="keyword">copy</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name2 addr: %p, name2 content: %@"</span>, name2, name2);</div><div class="line">[name2 appendString:<span class="string">@"veryitman.com"</span>];</div><div class="line">    </div><div class="line"><span class="built_in">NSMutableString</span> *name3 = [name mutableCopy];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"name3 addr: %p, name3 content: %@"</span>, name3, name3);</div><div class="line">[name3 appendString:<span class="string">@"veryitman.com"</span>];</div></pre></td></tr></table></figure>
<p>运行后，可以看到，代码 <code>[name2 appendString:@&quot;veryitman.com&quot;]</code> 这里会引起 Crash，报错内容如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> -[<span class="built_in">NSTaggedPointerString</span> appendString:]: unrecognized selector sent to instance <span class="number">0xa0000002e7777774</span></div><div class="line"> </div><div class="line">*** Terminating app due to uncaught exception 'NSInvalidArgumentException'</div><div class="line"></div><div class="line">reason: '-[NSTaggedPointerString appendString:]: unrecognized selector sent to instance 0xa0000002e7777774'</div></pre></td></tr></table></figure>
<p>也充分说明了，<code>name2</code> 是一个不可变的 <code>NSString</code> 对象。</p>
<p><strong>结论 2：</strong></p>
<ul>
<li>可变的 <code>NSMutableString</code> 对象经过 <code>copy</code> 后，会变成不可变的 <code>NSString</code> 对象。</li>
<li>可变的 <code>NSMutableString</code> 对象经过 <code>mutableCopy</code> 后，仍然是可变的 <code>NSMutableString</code> 对象。</li>
</ul>
<h2 id="copy、strong-修饰-NSString"><a href="#copy、strong-修饰-NSString" class="headerlink" title="copy、strong 修饰 NSString"></a>copy、strong 修饰 NSString</h2><p>创建 Employee 文件，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Employee</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *userName;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>其 <code>userName</code> 属性是 <code>copy</code>。</p>
<p>使用示例，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Employee *employee = [Employee new];</div><div class="line">employee.userName = <span class="string">@"John"</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"--before-- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div><div class="line">        </div><div class="line"><span class="comment">// 创建一个可变对象</span></div><div class="line"><span class="built_in">NSMutableString</span> *newUserName = [[<span class="built_in">NSMutableString</span> alloc] initWithString:<span class="string">@"new_user_name"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"newUserName addr: %p, newUserName content: %@"</span>, newUserName, newUserName);</div><div class="line">    </div><div class="line"><span class="comment">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</span></div><div class="line">employee.userName = newUserName;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---after1--- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div><div class="line">    </div><div class="line"><span class="comment">// 试图改变 newUserName 的内容，看 employee.userName 的内容是否改变</span></div><div class="line">[newUserName appendString:<span class="string">@"_hello"</span>];</div><div class="line"></div><div class="line"><span class="comment">// newUserName 的内容被改变成了 new_user_name_hello</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"newUserName addr: %p, newUserName content: %@"</span>, newUserName, newUserName);</div><div class="line"></div><div class="line"><span class="comment">// employee.userName 的内容未变化</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---after2--- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div><div class="line">    </div><div class="line"><span class="comment">// Crash，因为 employee.userName 还是不可变对象</span></div><div class="line"><span class="comment">// [(NSMutableString *)(employee.userName) appendString:@"nana"];</span></div></pre></td></tr></table></figure>
<p>在上面的示例中，故意将 <code>NSMutableString</code> 对象 <code>newUserName</code> 赋值给不可变的 <code>NSString</code> 对象 <code>employee.userName</code>，看一下输出结果，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">--before-- employee.userName addr: <span class="number">0x100096cf8</span>, employee.userName content: John</div><div class="line"></div><div class="line">newUserName addr: <span class="number">0x174070a00</span>, newUserName content: new_user_name</div><div class="line"></div><div class="line">---after1--- employee.userName addr: <span class="number">0x174023b80</span>, employee.userName content: new_user_name</div><div class="line"></div><div class="line">newUserName addr: <span class="number">0x174070a00</span>, newUserName content: new_user_name_hello</div><div class="line"></div><div class="line">---after2--- employee.userName addr: <span class="number">0x174023b80</span>, employee.userName content: new_user_name</div></pre></td></tr></table></figure>
<p>按照 </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">可变的 `<span class="built_in">NSMutableString</span>` 对象经过 `<span class="keyword">copy</span>` 后，会变成不可变的 `<span class="built_in">NSString</span>` 对象。</div></pre></td></tr></table></figure>
<p>这个结论来看，<code>employee.userName</code> 肯定是不可变的对象，即使改变 <code>newUserName</code> 的内容也不会影响 <code>employee.userName</code> 这个对象的内容。</p>
<p>那么，我们将 <code>employee.userName</code> 的属性修饰符 <code>copy</code> 改为 <code>strong</code>，又会是什么样子呢？</p>
<p>我们修改两处代码</p>
<p><strong>Employee.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Employee</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="comment">//@property (nonatomic, copy) NSString *userName;</span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *userName;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>示例代码，只是打开之前会 crash 的部分</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// employee.userName 经过 strong 修饰过后， 彻底变成了可变对象</span></div><div class="line">[(<span class="built_in">NSMutableString</span> *)(employee.userName) appendString:<span class="string">@"_oc"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---after3--- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div></pre></td></tr></table></figure>
<p>看一下输出日志：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">--before-- employee.userName addr: <span class="number">0x1000a6cf8</span>, employee.userName content: John</div><div class="line"></div><div class="line">newUserName addr: <span class="number">0x17426b280</span>, newUserName content: new_user_name</div><div class="line"></div><div class="line">---after1--- employee.userName addr: <span class="number">0x17426b280</span>, employee.userName content: new_user_name</div><div class="line"></div><div class="line">newUserName addr: <span class="number">0x17426b280</span>, newUserName content: new_user_name_hello</div><div class="line"></div><div class="line">---after2--- employee.userName addr: <span class="number">0x17426b280</span>, employee.userName content: new_user_name_hello</div><div class="line"></div><div class="line">---after3--- employee.userName addr: <span class="number">0x17426b280</span>, employee.userName content: new_user_name_hello_oc</div></pre></td></tr></table></figure>
<p>可以看到 <code>employee.userName</code> 最终和 <code>newUserName</code> 的地址、内容完全相同了，彻底变成了可变对象。</p>
<p>另外，如果不是将可变的 <code>NSMutableString</code> 对象赋值给不可变的 <code>NSString</code> 对象，换句话说，<code>NSString</code> 对 <code>NSString</code> 赋值，那么使用 <code>strong</code> 和 <code>copy</code> 效果都是一样的。</p>
<p>示例代码（无论 <code>employee.userName</code> 使用 <code>strong</code> 还是 <code>copy</code>，效果都是 <code>employee.userName</code> 不可变的）：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Employee *employee = [Employee new];</div><div class="line">employee.userName = <span class="string">@"John"</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"--before-- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div><div class="line">    </div><div class="line"><span class="comment">// 创建一个不可变对象</span></div><div class="line"><span class="built_in">NSString</span> *newUserName = <span class="string">@"new_user_name"</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"newUserName addr: %p, newUserName content: %@"</span>, newUserName, newUserName);</div><div class="line">    </div><div class="line"><span class="comment">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</span></div><div class="line">employee.userName = newUserName;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---after1--- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div></pre></td></tr></table></figure>
<h2 id="copy、strong-修饰-NSMutableString"><a href="#copy、strong-修饰-NSMutableString" class="headerlink" title="copy、strong 修饰 NSMutableString"></a>copy、strong 修饰 NSMutableString</h2><p>在 property 的修饰语中，只有 <code>copy</code> 修饰语而没有 <code>mutableCopy</code> 的修饰语。</p>
<p><strong>Employee.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface Employee : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, copy) NSMutableString *userName;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Employee *employee = [Employee new];</div><div class="line">employee.userName = [NSMutableString stringWithString:@&quot;John&quot;];</div><div class="line">NSLog(@&quot;--before-- employee.userName addr: %p, employee.userName content: %@&quot;, employee.userName, employee.userName);</div><div class="line"></div><div class="line">// 创建一个可变对象</div><div class="line">NSMutableString *newUserName = [NSMutableString stringWithFormat:@&quot;new_user_name&quot;];</div><div class="line">NSLog(@&quot;newUserName addr: %p, newUserName content: %@&quot;, newUserName, newUserName);</div><div class="line"></div><div class="line">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</div><div class="line">employee.userName = newUserName;</div><div class="line">NSLog(@&quot;---after1--- employee.userName addr: %p, employee.userName content: %@&quot;, employee.userName, employee.userName);</div><div class="line">    </div><div class="line">// employee.userName 虽然是 NSMutableString 对象，但经过 copy 修饰过后，仍然是不可变对象</div><div class="line">// 所以，运行到这里会引起 crash</div><div class="line">[employee.userName appendString:@&quot;_oc&quot;];</div><div class="line">NSLog(@&quot;---after2--- employee.userName addr: %p, employee.userName content: %@&quot;, employee.userName, employee.userName);</div></pre></td></tr></table></figure>
<p>可以看出 <code>copy</code> 后的的可变对象还是不可变的。</p>
<p>那么，我们将 <code>employee.userName</code> 的属性修饰符 <code>copy</code> 改为 <code>strong</code>，又会是什么样子呢？</p>
<p><strong>Employee.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Employee</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *userName;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Employee *employee = [Employee new];</div><div class="line">employee.userName = [<span class="built_in">NSMutableString</span> stringWithString:<span class="string">@"John"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"--before-- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div><div class="line"></div><div class="line"><span class="comment">// 创建一个可变对象</span></div><div class="line"><span class="built_in">NSMutableString</span> *newUserName = [<span class="built_in">NSMutableString</span> stringWithFormat:<span class="string">@"new_user_name"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"newUserName addr: %p, newUserName content: %@"</span>, newUserName, newUserName);</div><div class="line"></div><div class="line"><span class="comment">// 将一个新的对像赋值给 employee.userName，此时 employee.userName 的地址肯定会变化</span></div><div class="line">employee.userName = newUserName;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---after1--- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div><div class="line">    </div><div class="line"><span class="comment">// employee.userName 虽然是 NSMutableString 对象，但经过 strong 修饰过后，变成了可变对象</span></div><div class="line">[employee.userName appendString:<span class="string">@"_hello"</span>];</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---after2--- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div><div class="line">    </div><div class="line">[newUserName appendString:<span class="string">@"_oc"</span>];</div><div class="line"><span class="comment">// newUserName 的内容被改变成了 new_user_name_hello_oc</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"newUserName addr: %p, newUserName content: %@"</span>, newUserName, newUserName);</div><div class="line"><span class="comment">// employee.userName 的内容发生了变化</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"---after2--- employee.userName addr: %p, employee.userName content: %@"</span>, employee.userName, employee.userName);</div></pre></td></tr></table></figure>
<p>经过 <code>strong</code> 修饰后，可变的 <code>NSMutableString</code> 对象还是可变的对象。</p>
<p>在这个部分的开始，说过在 property 中没有 <code>mutableCopy</code> 的修饰语，那么我们能否达到 <code>mutableCopy</code> 的效果呢？</p>
<p>很显然是可以的，我们可以重写属性的 <code>set</code> 方法，改造一下 <code>Employee</code> 的代码，如下：</p>
<p><strong>Employee.h</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@interface Employee : NSObject</div><div class="line"></div><div class="line">@property (nonatomic, copy) NSMutableString *userName;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p><strong>Employee.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#import &quot;Employee.h&quot;</div><div class="line"></div><div class="line">@implementation Employee</div><div class="line"></div><div class="line">- (void)setUserName:(NSMutableString *)userName</div><div class="line">&#123;</div><div class="line">    _userName = [userName mutableCopy];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>这样，就达到了和是 <code>strong</code> 修饰语一样的效果了。</p>
<p>大家，可以使用同样的方法来实践一下 <code>NSArray</code>、<code>NSMutableArry</code> 等集合数据的 <code>copy</code> 以及 <code>mutableCopy</code> 的效果了。</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><ul>
<li><p>不可变的 <code>NSString</code> 对象经过 <code>copy</code> 后，还是不可变对象。</p>
</li>
<li><p>不可变的 <code>NSString</code> 对象经过 <code>mutableCopy</code> 后，变成了可变的 <code>NSMutableString</code> 对象。</p>
</li>
<li><p>可变的 <code>NSMutableString</code> 对象经过 <code>copy</code> 后，会变成不可变的 <code>NSString</code> 对象。</p>
</li>
<li><p>可变的 <code>NSMutableString</code> 对象经过 <code>mutableCopy</code> 后，仍然是可变的 <code>NSMutableString</code> 对象。</p>
</li>
<li><p>不可变的 <code>NSString</code> 对象在 property 中，尽量使用 <code>copy</code> 来修饰，因为使用 <code>strong</code> 修饰符可变字符串如果给不可变字符串赋值后，会导致你原本预期发生了变化，除非你有特殊的目的才使用 <code>strong</code> 修饰符。</p>
</li>
<li><p>可变的 <code>NSMutableString</code> 对象在 property 中，尽量使用 <code>strong</code> 来修饰，除非你有特殊的目的才使用 <code>copy</code> 修饰符。</p>
</li>
<li><p>虽然在 property 中没有 <code>mutableCopy</code> 修饰符，但是可以通过重写其 <code>set</code> 方法来达到目的。</p>
</li>
</ul>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NSString NSMutableString copy mutableCopy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC: self]]></title>
      <url>/2018/12/23/OC-self/</url>
      <content type="html"><![CDATA[<p>为了更好的说明 Objective-C 中的 <code>self</code>，我们先从 Java 的 <code>this</code> 关键字开始来引入话题。</p>
<h2 id="Java-中的-this"><a href="#Java-中的-this" class="headerlink" title="Java 中的 this"></a>Java 中的 this</h2><p>在 Java 中 <code>this</code> 关键字表示当前类对象，其只能在类的非静态方法中使用，静态方法和静态的代码块中绝对不能出现 <code>this</code>，<code>this</code> 只和特定的对象关联，而不和类关联，同一个类的不同对象有不同的 <code>this</code>.</p>
<p>先看一个 Java 示例，能说明上面的问题，示例如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 静态代码块中也不可以使用 this</span></div><div class="line"><span class="comment">// Error: non-static variable this cannot be referenced from a static context</span></div><div class="line"><span class="keyword">static</span> &#123;</div><div class="line">    <span class="comment">// this.eat();</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"play()"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// this 调用类方法</span></div><div class="line">    <span class="keyword">this</span>.eat();</div><div class="line"></div><div class="line">    <span class="comment">// this 调用实例方法</span></div><div class="line">    <span class="keyword">this</span>.finish();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"static eat()"</span>);</div><div class="line"></div><div class="line">    <span class="comment">// 不可以在类方法中使用 this</span></div><div class="line">    <span class="comment">// Error: non-static variable this cannot be referenced from a static context</span></div><div class="line">    <span class="comment">// this.play();</span></div><div class="line">    <span class="comment">// System.out.println(this);</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finish</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"finish()"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过实际的 Java 例子，基本表明了在静态方法和实例方法中 <code>this</code> 的使用场景。</p>
<h2 id="Objective-C-中的-self"><a href="#Objective-C-中的-self" class="headerlink" title="Objective-C 中的 self"></a>Objective-C 中的 self</h2><p>在 <code>Objective-C</code> 中，<code>self</code> 是一个比较特殊的对象，它既可以是实例对象也可以是类对象，有点类似于上面 Java 中的 <code>this</code> 关键字。</p>
<p>下面结合实际例子，来说明 <code>self</code> 这个关键字。</p>
<h3 id="1、实例方法中的-self"><a href="#1、实例方法中的-self" class="headerlink" title="1、实例方法中的 self"></a>1、实例方法中的 self</h3><p>实例方法中的 <code>self</code> 可以直接调用实例方法但不可以直接调用类方法，如下示例中，调用实例方法 <code>finish</code>没有问题，而调用类方法 <code>eat</code> 直接报编译错误。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)play</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '- (void)play' ------------------"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self: %@, self -&gt; %p"</span>, <span class="keyword">self</span>, <span class="keyword">self</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 无法使用 self 来调用类方法</span></div><div class="line">    <span class="comment">// Error: No visible @interface for 'MZPerson' declares the selector 'eat'</span></div><div class="line">    <span class="comment">// [self eat];</span></div><div class="line">    </div><div class="line">    <span class="comment">// 调用实例方法</span></div><div class="line">    [<span class="keyword">self</span> finish];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)eat</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '+ (void)eat' ------------------"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)finish</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"--------------- '- (void)finish' ----------------"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们知道，在实例方法中可以直接通过<code>`[类 类方法]</code> 的方式来调用类方法，那么如果想在实例方法中使用 <code>self</code> 关键字，如何办呢？</p>
<p>很简单，使用 <code>[self class]</code> 即可。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)play</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '- (void)play' ------------------"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self: %@, self -&gt; %p"</span>, <span class="keyword">self</span>, <span class="keyword">self</span>);</div><div class="line">    </div><div class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] eat];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 <code>class</code> 后续再分享给大家，这里只需要知道可以这么使用就好了。</p>
<h3 id="2、类方法中的-self"><a href="#2、类方法中的-self" class="headerlink" title="2、类方法中的 self"></a>2、类方法中的 self</h3><p>这个跟 Java 的 <code>this</code> 有点不一样，上面的 Java 示例中我们可以看到无论是打印 <code>this</code> 还是使用 <code>this</code> 调用方法都不可以，但是在 <code>Objective-C</code> 中却可以使用 <code>self</code>，只是不能使用 <code>self</code> 来调用实例方法和实例变量。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)eat</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '+ (void)eat' ------------------"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// No known class method for selector 'finish'</span></div><div class="line">    <span class="comment">// [self finish];</span></div><div class="line">    </div><div class="line">    <span class="comment">// 调用类方法</span></div><div class="line">    [<span class="keyword">self</span> beat];</div><div class="line">    </div><div class="line">    <span class="comment">// 打印 self</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self: %@"</span>, <span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)beat</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '+ (void)beat' ------------------"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那么为什么在类方法中可以使用 <code>self</code> 呢？</p>
<p>别着急，接着往下看。</p>
<h3 id="3、实例和类方法中的-self-区别"><a href="#3、实例和类方法中的-self-区别" class="headerlink" title="3、实例和类方法中的 self 区别"></a>3、实例和类方法中的 self 区别</h3><p>其实，在类方法中，<code>self</code> 表示当前类对象，在实例方法中 <code>self</code> 表示实例对象，这个是本质区别，务必要理解透彻。</p>
<p>举个例子，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)play</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '- (void)play' ------------------"</span>);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self: %@, self -&gt; %p"</span>, <span class="keyword">self</span>, <span class="keyword">self</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 打印对应的类地址</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self class: %p"</span>, [<span class="keyword">self</span> <span class="keyword">class</span>]);</div><div class="line">    </div><div class="line">    [[<span class="keyword">self</span> <span class="keyword">class</span>] eat];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)eat</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '+ (void)eat' ------------------"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// No known class method for selector 'finish'</span></div><div class="line">    <span class="comment">// [self finish];</span></div><div class="line">    </div><div class="line">    <span class="comment">// 打印 self 地址</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self: %p"</span>, <span class="keyword">self</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 调用类方法</span></div><div class="line">    [<span class="keyword">self</span> beat];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)beat</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '+ (void)beat' ------------------"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 打印 self 地址</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"self: %p"</span>, <span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在实例方法 <code>play</code> 中打印类地址，在类方法 <code>eat</code> 和 <code>beat</code> 中打印 <code>self</code> 的地址，输出结果是一样的，都是 <code>0x10adb3f98</code> 这个地址。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">---------------- &apos;- (void)play&apos; ------------------</div><div class="line">self: &lt;MZPerson: 0x6000000d8f90&gt;, self -&gt; 0x6000000d8f90</div><div class="line">self class: 0x10adb3f98</div><div class="line">---------------- &apos;+ (void)eat&apos; ------------------</div><div class="line">self: 0x10adb3f98</div><div class="line">---------------- &apos;+ (void)beat&apos; ------------------</div><div class="line">self: 0x10adb3f98</div></pre></td></tr></table></figure>
<p>为了更好的说明，我给大家再举一个形象的例子帮助大家理解。</p>
<p>在 <code>MZPerson</code> 中声明两个方法，方法同名，一个是实例方法，另一个是类方法，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MZPerson</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)play;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)play;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)eat;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)finish;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZPerson</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)play</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '- (void)play' ------------------"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)play</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '+ (void)play' ------------------"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)eat</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '+ (void)eat' ------------------"</span>);</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> play];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)finish</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---------------- '- (void)finish' ------------------"</span>);</div><div class="line">    [<span class="keyword">self</span> play];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>在类方法 <code>eat</code> 中调用 <code>[self play]</code> 在实例方法 <code>finish</code> 中也调用 <code>[self play]</code>，那么结果如何呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---------------- &apos;- (void)finish&apos; ---------------</div><div class="line">---------------- &apos;- (void)play&apos; -----------------</div><div class="line"></div><div class="line">---------------- &apos;+ (void)eat&apos; ------------------</div><div class="line">---------------- &apos;+ (void)play&apos; -----------------</div></pre></td></tr></table></figure>
<p>可以看出符合如期，类和实例方法中的 self 分别代表类本身和实例对象。</p>
<p><code>self</code> 表示谁，在运行时是由编译器来决定的。</p>
<h3 id="4、每个实例对象的-self-都是不一样的"><a href="#4、每个实例对象的-self-都是不一样的" class="headerlink" title="4、每个实例对象的 self 都是不一样的"></a>4、每个实例对象的 self 都是不一样的</h3><p>这个跟 Java 的 <code>this</code> 是一样的，每个类的实例对象对应的 <code>this</code> 都是不一样的，<code>self</code> 亦如此。</p>
<p>下面的例子，分别创建两个 MZPerson 实例对象，然后分别调用<code>play</code> 方法，如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">MZPerson *iperson1 = [MZPerson new];</div><div class="line">[iperson1 play];</div><div class="line">    </div><div class="line">MZPerson *iperson2 = [MZPerson new];</div><div class="line">[iperson2 play];</div></pre></td></tr></table></figure>
<p>输出结果表明了上面说法的正确性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">---------------- &apos;- (void)play&apos; ------------------</div><div class="line">self: &lt;MZPerson: 0x600000576ee0&gt;, self -&gt; 0x600000576ee0</div><div class="line">---------------- &apos;- (void)play&apos; ------------------</div><div class="line">self: &lt;MZPerson: 0x600000576f40&gt;, self -&gt; 0x600000576f40</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>在继承关系中，使用 <code>self</code> 调用方法时，首先从当前类的方法列表中开始寻找，如果没有再从父类中寻找。</p>
<p>运行时(runtime)会使用 <code>objc_msgSend</code> 向对象发送消息，这个也是调用方法的本质。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C self keyword </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Wireshark: 分析 TCP 四次挥手]]></title>
      <url>/2018/12/16/Wireshark-%E5%88%86%E6%9E%90-TCP-%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>首先要明白 <code>TCP</code> 协议是一种面向连接的、可靠的、基于字节流的传输层通信协议。</p>
<p>其次，<code>TCP</code> 是全双工模式，需要两边的连接全部关闭，此 TCP 会话才算完全关闭，四次挥手使得 <code>TCP</code> 的全双工连接能够可靠的终止。</p>
<p><code>TCP</code> 的连接的拆除需要发送四个包，因此称为四次挥手(Four-way handshake)，也叫做改进的三次握手。客户端或服务器均可主动发起挥手动作，在 socket 编程中，任何一方执行 <code>close()</code> 操作即可产生挥手操作。</p>
<p>下面根据客户端(IP: 10.4.17.176)请求服务端(IP: 116.211.186.208) 来分析四次挥手(four-way handshake)的过程。</p>
<p>这里需要注意一个问题，任何一方执行 <code>close()</code> 操作即可产生挥手操作，所以断开连接端可以是 <code>Client</code> 端，也可以是 <code>Server</code> 端。</p>
<p>在阅读下面内容之前，我假设你已经阅读过 <a href="http://www.veryitman.com/2018/09/09/Wireshark-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-TCP-%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B/" target="_blank" rel="noopener">Wireshark: 简单分析 TCP 三次挥手</a> 这篇文章。</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>使用 iOS 设备的浏览器客户端 <code>Safari</code> 访问 <code>116.211.186.208</code> 这个网站，关于如何开启 iOS 设备的虚拟网卡可以参考 <a href="http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/" target="_blank" rel="noopener">初识 Wireshark</a> 这篇文章。</p>
<p>针对 <code>HTTP</code> 的请求，可以进行 <code>Follow</code>，选择 <code>TCP Stream</code> 即可，如下图所示：<br><img src="/upload/images/2018/12/16/1.jpg" alt=""></p>
<p>此时，可以看到四次挥手的抓包情况，如下图所示：<br><img src="/upload/images/2018/12/16/2.jpg" alt=""><br>另外，从上图中可以看出，首先发起 <code>Close</code> 的是服务端。</p>
<p><strong>第一次挥手</strong>，发送 <code>FIN</code> 和 <code>ACK</code> 报文，如图：<br><img src="/upload/images/2018/12/16/3.jpg" alt=""></p>
<p><strong>第二次挥手</strong>，客户端发送 <code>ACK</code> 报文给服务端，如图：<br><img src="/upload/images/2018/12/16/4.jpg" alt=""></p>
<p><strong>第三次挥手</strong>，客户端发送 <code>FIN</code> 和 <code>ACK</code> 报文给服务端，如图：<br><img src="/upload/images/2018/12/16/5.jpg" alt=""></p>
<p><strong>第四次挥手</strong>，服务端发送 <code>ACK</code> 报文给客户端，如图：<br><img src="/upload/images/2018/12/16/6.jpg" alt=""></p>
<p>从图中抓包来看，<strong>seq</strong> 和 <strong>ack</strong> 的值变化如下表：</p>
<table>
<thead>
<tr>
<th>次数</th>
<th>seq 值</th>
<th>ack 值</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>140</td>
<td>447</td>
</tr>
<tr>
<td>2</td>
<td>447</td>
<td>141</td>
</tr>
<tr>
<td>3</td>
<td>447</td>
<td>141</td>
</tr>
<tr>
<td>4</td>
<td>141</td>
<td>448</td>
</tr>
</tbody>
</table>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>结合上面抓包的示例，小结一下四次挥手的过程。</p>
<p>在前面说过，断开连接端可以是 <code>Client</code> 端，也可以是 <code>Server</code> 端，我上面的例子首先发起 <code>close</code> 的一方是 <code>Server</code> 端。</p>
<p><strong>第一次挥手：</strong><br>服务端发送一个 <code>[FIN+ACK]</code> 报文，表示自己没有数据要发送了，想断开连接，并进入 <code>fin_wait_1</code> 状态（不能再发送数据到客户端，但能够发送控制信息 <code>ACK</code> 到客户端）。</p>
<p><strong>第二次挥手：</strong><br>客户端收到 <code>[FIN]</code> 报文后，客户端知道不会再有数据从服务端传来，发送 <code>ACK</code> 进行确认，客户端进入 <code>close_wait</code> 状态。此时服务端收到了客户端对 <code>FIN</code> 的 <code>ACK</code> 后，进入 <code>fin_wait2</code> 状态。</p>
<p><strong>第三次挥手：</strong><br>客户端发送 <code>[FIN ACK]</code> 报文给对方，表示自己没有数据要发送了，客户端进入 <code>last_ack</code> 状态。服务端收到了客户端的 <code>FIN</code> 信令后，进入 <code>time_wait</code> 状态，并发送 <code>ACK</code> 确认消息。</p>
<p><strong>第四次挥手：</strong><br>服务端在 <code>time_wait</code> 状态下，等待 2MSL(MSL是数据分节在网络中存活的最长时间) 一段时间，没有数据到来的，就认为对面已经收到了自己发送的 <code>ACK</code> 并正确关闭了进入 <code>close</code> 状态，自己也断开了到客户端的 <code>TCP</code> 连接，释放所有资源。当客户端收到服务端的<code>ACK</code> 回应后，会进入 <code>close</code> 状态，并关闭本端的会话接口，释放相应资源。</p>
<p>根据 wireshark 抓包和上面流程的分析，可以画出如下示意流程图：<br><img src="/upload/images/2018/12/16/7.jpg" alt=""></p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wireshark tcp ip udp http https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[当 NTFS 遇上 MacOS]]></title>
      <url>/2018/11/24/%E5%BD%93-NTFS-%E9%81%87%E4%B8%8A-MacOS/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>自己使用的 <code>MacBook Pro</code> 电脑是 <code>256G</code> 的，这个本陪了我5个春秋，性能依旧强劲，一直舍不得抛弃换新(好吧，我承认自己穷)。</p>
<p>由于工作需要，里面安装了不少软件，也存储了不少资料，逐渐发现硬盘容量不足，我也一直在删除一些非必要的东西，发现还是杯水车薪，没办法，又买了一块移动硬盘，网盘用起来还是没有硬盘方便，我使用网盘的频率很低。</p>
<h2 id="MacOS-挂载"><a href="#MacOS-挂载" class="headerlink" title="MacOS 挂载"></a>MacOS 挂载</h2><p>我觉得移动硬盘买回来，直接插在电脑上就可以使用了，最后发现硬盘只能读不能写，卧槽！</p>
<p>上网查了一下，在默认情况下，<code>NTFS</code> 格式的硬盘插入到 <code>MacOS</code> 里，是只能读不能写的，需要挂载。</p>
<p>于是结合网上前辈的经验，弄了一个 <code>shell</code> 脚本，用了一段时间，发现挺好用的，但是电脑重启后，脚本就需要修改，还要查找当前硬盘到底在 <code>disk0</code> 还是在 <code>disk2</code> 上面，麻烦。</p>
<p>还好有一些比较成熟的工具帮我们解决问题，<a href="http://www.ntfsformac.cn/" target="_blank" rel="noopener">Paragon NTFS for MAC</a> 就是其中一个。</p>
<p><img src="/upload/images/2018/11/24/1.jpg" alt=""></p>
<p>这个工具是收费的，我试用了一段时间，感觉功能挺强大的，因为穷也懒得折腾破解，就找了另外一个工具 <a href="https://mounty.app/" target="_blank" rel="noopener">mounty</a>，小巧可爱关键免费，在公众号上面收到的赞赏我也会 donate 给他们。</p>
<p><img src="/upload/images/2018/11/24/2.jpg" alt=""></p>
<p><a href="https://mounty.app/" target="_blank" rel="noopener">mounty</a> 最新版本是 1.9，介绍如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">A tiny tool to re-mount write-protected NTFS volumes under Mac OS X 10.9+ in read-write mode.</div></pre></td></tr></table></figure>
<h2 id="mounty-失效"><a href="#mounty-失效" class="headerlink" title="mounty 失效"></a>mounty 失效</h2><p>在使用 mounty 挂载移动硬盘时, 弹框提示以下错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">The volume My Passport is not re-mountable in read/write mode.</div><div class="line">Probably it was not clean unmounted before.</div></pre></td></tr></table></figure>
<p>这种错误的原因大部分是因为在 <code>Windows</code> 上面使用后没有安全退出(直接拨出)而造成的，网上有两种方案，分别如下：</p>
<p><strong>方案 1</strong></p>
<ol>
<li>插入移动硬盘到 <code>Windows</code> 下面</li>
<li>打开 <code>dos</code> 命令行，输入 <code>chkdsk /f</code>, 然后回车，输入 <code>Y</code></li>
<li>使用右下角的安全删除后再拔出移动硬盘</li>
<li>将移动硬盘再次插入 <code>Mac</code> 打开 <code>mounty</code>重新挂载就可以了</li>
</ol>
<p>反正这种方案我是没有成功，报错如下：</p>
<p><img src="/upload/images/2018/11/24/3.jpg" alt=""></p>
<p><strong>方案 2</strong></p>
<p>在 <code>Windows</code> 系统中，将移动硬盘插入，使用 <code>360软件</code> 点击 <code>安全退出</code> 退出硬盘，不要直接拔掉，再在 <code>Mac</code> 中插入使用 <code>mounty</code> 重新挂载就解决问题了。</p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NTFS MacOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[观察者模式]]></title>
      <url>/2018/10/28/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>组件间通信，我会优先使用路由的通信方式(iOS中需要用到 runtime，Android 中需要用到反射和注解)，组件之间按照路由协议(类似 url)实现各自的职责即可，组件间的松耦合性增强了软件设计的弹性和高可用性。</p>
<p>路由结合观察者模式，可以让你的组件设计更上一层楼。路由可以解决单向调用的问题，让组件之间无需知道对方是否存在。观察者模式可以让调用者(使用你框架的)可以很方便的知道组件的内部事件。</p>
<blockquote>
<p>武林至尊，宝刀屠龙，号令天下，莫敢不从，倚天不出，谁与争锋?</p>
</blockquote>
<p>在说观察者模式之前，先介绍一下 iOS 中的代理(delegate).</p>
<h2 id="代理-delegate"><a href="#代理-delegate" class="headerlink" title="代理 delegate"></a>代理 delegate</h2><p>在 iOS 中，代理(delegate)的本质是 protocol，类似 java 中的 Interface，一般用来处理 <code>一对一</code> 的关系，如下图所示：</p>
<p><img src="/upload/images/2018/10/28/1.jpg" alt=""></p>
<p>下面的例子模拟了调用和实现过程，使用 <code>Bank</code> 对象和 <code>BankDelegate</code> 代理来模拟这种模式。<code>Bank</code> 有变动的时候，通过 <code>notifyAccount</code> 来授权 <code>onAccountChanged</code> 通知用户。</p>
<p><strong>BankDelegate.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BankDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>Bank.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Bank</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">weak</span>) <span class="keyword">id</span>&lt;BankDelegate&gt; delegate;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)notifyAccount;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>Bank.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Bank</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)notifyAccount</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="keyword">self</span>.delegate respondsToSelector:<span class="keyword">@selector</span>(onAccountChanged:)]) &#123;</div><div class="line">        [<span class="keyword">self</span>.delegate onAccountChanged:<span class="number">100</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>使用者实现 delegate</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line"></div><div class="line">    Bank *bank = [Bank new];</div><div class="line">    bank.delegate = <span class="keyword">self</span>;</div><div class="line">    [bank notifyAccount];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Bank tell me that account is changed. %zd"</span>, account);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然，delegate 也可以做到 <code>一对多</code>，改造一下 <code>Bank</code> 就可以实现。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Bank</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addBankDelegate:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)notifyAccount;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><code>Bank</code> 内部使用数组将 <code>addBankDelegate</code> 得到的 <code>delegate</code> 存起来，<code>notifyAccount</code> 中就可以进行通知了。</p>
<figure class="highlight obj-c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Bank *bank = [Bank new];</div><div class="line"><span class="comment">// 模拟添加多个 delegate</span></div><div class="line">[bank addBankDelegate:<span class="keyword">self</span>];</div><div class="line">[bank addBankDelegate:<span class="keyword">self</span>];</div><div class="line">[bank notifyAccount];</div></pre></td></tr></table></figure>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>理解了 delegate，观察者模式就很好理解了。</p>
<p>当一个对象改变状态时，它的所有依赖着都会收到通知并自动更新，这是观察者模式的常规定义。</p>
<p>观察者模式是一种 <code>一对多</code> 的设计模式，如下图所示：<br><img src="/upload/images/2018/10/28/2.jpg" alt=""></p>
<p>继续上面的例子，使用 <code>Bank</code> 对象和 <code>BankDelegate</code> 来模拟这种模式，<code>Bank</code> 有变动的时候，通过 <code>notifyAccount</code> 来授权 <code>onAccountChanged</code> 通知所有注册了 <code>BankDelegate</code> 的用户。</p>
<p><strong>Talk is cheap. Show me the code</strong></p>
<p><strong>BankDelegate.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">BankDelegate</span> &lt;<span class="title">NSObject</span>&gt;</span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>Bank.h</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">Bank</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removeBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)notifyAccount;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p><strong>Bank.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)notifyAccount</div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">id</span>&lt;BankDelegate&gt; delegate <span class="keyword">in</span> <span class="keyword">self</span>.delegates) &#123;</div><div class="line">        <span class="keyword">if</span> ([delegate respondsToSelector:<span class="keyword">@selector</span>(onAccountChanged:)]) &#123;</div><div class="line">            [delegate onAccountChanged:<span class="number">100</span>];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)addBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == delegate) &#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [<span class="keyword">self</span>.delegates addObject:delegate];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)removeBankObserver:(<span class="keyword">id</span>&lt;BankDelegate&gt;)delegate</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>.delegates.count &gt; <span class="number">0</span>) &#123;</div><div class="line">        [<span class="keyword">self</span>.delegates removeObject:delegate];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>调用者</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    [<span class="keyword">self</span> registerObserver];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)onAccountChanged:(<span class="built_in">NSUInteger</span>)account</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"Bank tell me that account is changed. %zd"</span>, account);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)registerObserver</div><div class="line">&#123;</div><div class="line">    Bank *bank = [Bank new];</div><div class="line">    [bank addBankObserver:<span class="keyword">self</span>];</div><div class="line">    [bank addBankObserver:<span class="keyword">self</span>];</div><div class="line">    [bank notifyAccount];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到这里，你应该发现 delegate 的设计其实就是观察者的一种设计手段而已，它本身也是观察者模式。</p>
<p>在 iOS 中，除了 delegate，还有很多这种设计模式的体现，如 KVO、Notification、Observer、Block 等。</p>
<h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h2><p>观察者模式中观察者对被观察者(Bank)是有感知的，至少需要实现对应的 <code>BankDelegate</code>，二者之间还是是有一定的耦合度。</p>
<p>那么，有没有一种方法再来降低这种耦合，让双方都不用去关心对方的存在呢？发布-订阅模式是一个不错的选择。</p>
<p>发布-订阅本质也是观察者模式，但是他更加的松耦合，发布者和订阅者都不用清楚对方，全部由订阅中心做处理，这样耦合度就几乎没有了。</p>
<p>如图展示发布-订阅模式：<br><img src="/upload/images/2018/10/28/3.jpg" alt=""></p>
<p>在 iOS 中，Notification 就是发布-订阅模式的一种实现，NSNotificationCenter 就类似订阅中心。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 发布</span></div><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:<span class="string">@"name_protocol"</span> object:<span class="literal">nil</span>];</div><div class="line"></div><div class="line"><span class="comment">// 订阅</span></div><div class="line">[[<span class="built_in">NSNotificationCenter</span> defaultCenter] addObserver:<span class="keyword">self</span></div><div class="line">                                         selector:<span class="keyword">@selector</span>(onUpdate:)</div><div class="line">                                             name:<span class="string">@"name_protocol"</span></div><div class="line">                                           object:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<h2 id="争论"><a href="#争论" class="headerlink" title="争论"></a>争论</h2><p>网上有很多人说，观察者模式和发布-订阅模式是两种不同的设计模式，它们压根就是两码事，不能混为一谈。也有很多人说，两者其实都是观察者模式，只是实现手段有点不一样罢了，本质是一样的。</p>
<p>江湖纷争，众说纷纭！</p>
<p>设计模式是一种设计思想，在观察者模式基础上你可以衍生更多的设计模式和更多的设计思想。模式的实现手段可以多样化，没有最好只有更好，就好比 MVC、MVP、MVVM 等，你说它们是设计模式也好，是设计思路也罢，关键是利用它们有没有解决业务需求，为了模式而模式的设计华而不实！</p>
<p>个人觉得，发布-订阅模式只是观察者模式的一种实现手段，它本质还是观察者模式。</p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Philosophy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 架构 模块化 组件化 Observer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[macOS 中神秘的 GCC]]></title>
      <url>/2018/10/13/macOS-%E4%B8%AD%E7%A5%9E%E7%A7%98%E7%9A%84-GCC/</url>
      <content type="html"><![CDATA[<p>这个事情，要从编译一个简单的代码开始说起。</p>
<hr>
<h2 id="gcc-和-g-的区别"><a href="#gcc-和-g-的区别" class="headerlink" title="gcc 和 g++ 的区别"></a>gcc 和 g++ 的区别</h2><p><code>gcc</code> 是 GCC 中的 GUN C Compiler，C 编译器。</p>
<p><code>g++</code> 是 GCC 中的 GUN C++ Compiler，C++编译器。</p>
<p>就本质而言，<code>gcc</code> 和 <code>g++</code> 并不是编译器，也不是编译器的集合，它们只是一种驱动器，根据参数中要编译的文件的类型，调用对应的 GUN 编译器而已。</p>
<p><code>gcc</code> 与 <code>g++</code> 都可以编译 C 和 C++ 文件，只是处理方式不同。 可以参考 <a href="https://www.cnblogs.com/wb118115/p/5969775.html" target="_blank" rel="noopener">GCC的gcc和g++区别</a> 这篇文章。</p>
<h2 id="交换变量：用指针"><a href="#交换变量：用指针" class="headerlink" title="交换变量：用指针"></a>交换变量：用指针</h2><p>下面这段代码很简单，利用 C 指针实现交换两个变量的目的。</p>
<p><strong>源文件：mz_swap.c</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 使用指针的方式交换两个变量</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mz_swap</span><span class="params">(<span class="keyword">int</span> *ap, <span class="keyword">int</span> *bp)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> xp = <span class="number">901</span>;</div><div class="line">    <span class="keyword">int</span> yp = <span class="number">902</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--Before-- xp = %i, yp = %i\n"</span>, xp, yp);</div><div class="line">    </div><div class="line">    mz_swap(&amp;xp, &amp;yp);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--After--- xp = %i, yp = %i\n"</span>, xp, yp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mz_swap</span><span class="params">(<span class="keyword">int</span> *ap, <span class="keyword">int</span> *bp)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (<span class="literal">NULL</span> == ap || <span class="literal">NULL</span> == bp) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tp = *ap;</div><div class="line"></div><div class="line">    *ap = *bp;</div><div class="line"></div><div class="line">    *bp = tp;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 macOS 下使用 <code>gcc</code> 编译 <code>mz_swap.c</code>，产生可执行文件 <code>exec_main.out</code>，如下操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc mz_swap.c -o exec_main.out</div></pre></td></tr></table></figure>
<p>编译成功，执行 <code>./exec_main.out</code>，正常输出结果：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--Before-- xp = <span class="number">901</span>, yp = <span class="number">902</span></div><div class="line">--After--- xp = <span class="number">902</span>, yp = <span class="number">901</span></div></pre></td></tr></table></figure>
<p>采用 g++ 来编译，如下操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g++ mz_swap.c -o exec_main.out</div></pre></td></tr></table></figure>
<p>报出如下警告，该警告的意思是在 C++ 模式下强制编译 C 文件，这里可以不予理会。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang: warning: treating 'c' input as 'c++' when in C++ mode, this behavior is deprecated [-Wdeprecated]</div></pre></td></tr></table></figure>
<p>虽然有警告，但是编译可以产生可执行文件 <code>exec_main.out</code> 且可以正常执行的，执行结果跟上面一样。</p>
<h2 id="交换变量：用引用"><a href="#交换变量：用引用" class="headerlink" title="交换变量：用引用"></a>交换变量：用引用</h2><p>大家都知道，C 没有 <code>引用</code> 这个概念，而 C++ 是有 <code>引用</code> 概念的，可以在此了解 <a href="http://www.runoob.com/cplusplus/cpp-references.html" target="_blank" rel="noopener">C++ 引用</a>.</p>
<p>试一下使用 <code>gcc</code> 编译使用 <code>引用</code> 方式编写的 C 代码，按照说法，<code>gcc</code> 是无法编译通过的。</p>
<p><strong>源文件：mz_swap_ref.c</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">// 使用引用的方式交换两个变量</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mz_swap_ref</span><span class="params">(<span class="keyword">int</span> &amp;ap, <span class="keyword">int</span> &amp;bp)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> xp = <span class="number">901</span>;</div><div class="line">    <span class="keyword">int</span> yp = <span class="number">902</span>;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--Before-- xp = %i, yp = %i\n"</span>, xp, yp);</div><div class="line"></div><div class="line">    mz_swap_ref(xp, yp);</div><div class="line">    </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"--After--- xp = %i, yp = %i\n"</span>, xp, yp);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mz_swap_ref</span><span class="params">(<span class="keyword">int</span> &amp;ap, <span class="keyword">int</span> &amp;bp)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> tp = ap;</div><div class="line"></div><div class="line">    ap = bp;</div><div class="line"></div><div class="line">    bp = tp;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc mz_swap_ref.c -o exec_main.out</div></pre></td></tr></table></figure>
<p>编译失败，错误信息如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mz_swap_ref.c:<span class="number">4</span>:<span class="number">21</span>: error: expected <span class="string">')'</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mz_swap_ref</span><span class="params">(<span class="keyword">int</span> &amp;ap, <span class="keyword">int</span> &amp;bp)</span></span>;</div><div class="line">                    ^</div><div class="line">mz_swap_ref.c:<span class="number">4</span>:<span class="number">16</span>: note: to match <span class="keyword">this</span> <span class="string">'('</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">mz_swap_ref</span><span class="params">(<span class="keyword">int</span> &amp;ap, <span class="keyword">int</span> &amp;bp)</span></span>;</div></pre></td></tr></table></figure>
<p>既然按照 C 的编译方式不行，那就换成 <code>g++</code> 来编译。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">g++ mz_swap_ref.c -o exec_main.out</div></pre></td></tr></table></figure>
<p>编译成功，执行可执行文件</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./exec_main.out</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--Before-- xp = 901, yp = 902</div><div class="line">--After--- xp = 902, yp = 901</div></pre></td></tr></table></figure>
<p>大家可以自己动手试试，使用 clang 来编译 <code>mz_swap_ref.c</code> 和使用 <code>gcc</code> 来编译都是报错，使用 <code>clang++</code> 和 <code>g++</code> 编译都是没有问题的。</p>
<p>在博客 <a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/" target="_blank" rel="noopener">GCC: Homebrew 安装 GCC 和 Binutils</a> 中，我已经分享了在 macOS 中的 <code>gcc</code> 和 <code>g++</code> 不是 GNU 提供的，而是 Apple 自己的 clang。</p>
<p>这里要说明的是即使使用自己安装的 gcc(<code>gcc-4.9</code>) 来编译 <code>mz_swap_ref.c</code> 也是无法编译通过的，验证如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc-4.9 mz_swap_ref.c -o exec_main.out</div></pre></td></tr></table></figure>
<p>错误信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mz_swap_ref.c:4:21: error: expected &apos;;&apos;, &apos;,&apos; or &apos;)&apos; before &apos;&amp;&apos; token</div><div class="line"> int mz_swap_ref(int &amp;ap, int &amp;bp);</div><div class="line">                     ^</div><div class="line">mz_swap_ref.c:20:21: error: expected &apos;;&apos;, &apos;,&apos; or &apos;)&apos; before &apos;&amp;&apos; token</div><div class="line"> int mz_swap_ref(int &amp;ap, int &amp;bp) &#123;              ^</div></pre></td></tr></table></figure>
<h2 id="gcc、g-和-clang-的关系"><a href="#gcc、g-和-clang-的关系" class="headerlink" title="gcc、g++ 和 clang 的关系"></a>gcc、g++ 和 clang 的关系</h2><p>在 macOS 中，<code>gcc</code> 以某种方式指向 <code>llvm-gcc</code> 编译器，<code>g++</code> 亦如此。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">In Apple&apos;s version of GCC, both cc and gcc are actually symbolic links to the llvm-gcc compiler. Similarly, c++ and g++ are links to llvm-g++.</div></pre></td></tr></table></figure>
<p><code>llvm-gcc</code> 是 c/c++/oc 的编译器，用了 <code>gcc</code> 前端和命令行界面的 llvm.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">llvm-gcc is a C, C++, Objective-C and Objective-C++ compiler. llvm-g++ is a compiler driver for C++. llvm-gcc uses gcc front-end and gcc&apos;s command line interface.</div></pre></td></tr></table></figure>
<p>接下来，我们看一下 <code>llvm-gcc</code>，可以使用 <code>which llvm-gcc</code> 看一下 <code>llvm-gcc</code> 所在位置是 <code>/usr/bin/llvm-gcc</code>，打开目录可以看出其实是一个符号链接，如下图所示：<br><img src="/upload/images/2018/10/13/1.jpg" alt="1"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -l /usr/bin/llvm-gcc</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/llvm-gcc -&gt; clang</div></pre></td></tr></table></figure>
<p>它们是统一指向 <code>clang</code> 的符号链接，可以看其原始指向，<code>llvm-gcc</code> 指向 <code>clang</code>，<code>llvm-g++</code> 指向 <code>clang++</code>。</p>
<p>二者都在 <code>/usr/bin/</code> 目录下：<br><img src="/upload/images/2018/10/13/2.jpg" alt="1"></p>
<p>其实在 macOS 中 <code>cc</code> 编译器也指向 <code>clang</code>。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的例子，我们至少可以学到如下几点知识：</p>
<p><strong>1、C 语言规范中没有 <code>引用</code> 的概念，使用 C 编译器无法使其编译通过，但是使用 C++ 编译器是可以编译通过的。这是因为各自的编译器是遵循语言规范的。</strong></p>
<p><strong>2、macOS 中的 <code>gcc</code> 和 <code>g++</code> 苹果开发者们并没有去改造和重写它们，只是分别指向 <code>clang</code> 和 <code>clang++</code> 编译器。</strong></p>
<p><strong>3、如果不想使用 macOS 中的 <code>gcc</code> 和 <code>g++</code>，就需要自己重新安装 GNU 的编译套件，安装和使用方法已经在博客中有说明。</strong></p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> gcc g++ clang clang++ cc </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SVN 检出文件]]></title>
      <url>/2018/10/06/SVN-%E6%A3%80%E5%87%BA%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>对于一些大工程, 整个 svn 仓库文件过大(动辄几十个G的都有)，不想把整个 checkout 下来，但是又想维持整个目录结构以方便后续使用，那么可以使用 <code>Subversion1.5</code> 之后的 <code>--depth</code> 参数来只 checkout 需要的子目录.</p>
<p>如果只想把 svn 仓库里面某个文件 checkout 到本地, 不想 checkout 整个目录, 如何操作呢?</p>
<h2 id="实施"><a href="#实施" class="headerlink" title="实施"></a>实施</h2><p>假设需要 checkout 出来的文件是 <code>ReadMe.md</code>, 其 svn 地址是: <code>http://svn.xxx.com/path/ReadMe.md</code>，其上级目录的远程地址是 <code>http://svn.xxx.com/path</code>.</p>
<p><strong>注意</strong>：以下出现 <code>svn co</code> 就是 <code>svn checkout</code> 的缩写.</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>大部分人都会在第一时间想到如下的操作:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co http://svn.xxx.com/path/ReadMe.md</div></pre></td></tr></table></figure>
<p>实际上这样操作会报错的, 报错信息大概意思是 <code>不可以 checkout 一个文件, 只能 checkout 目录</code>。</p>
<p>所以，该方案不可行。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p><strong>第一步: checkout 目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn co --depth=empty http://svn.xxx.com/path/ ./</div></pre></td></tr></table></figure>
<blockquote>
<p><code>./</code> 表示当前目录，<code>--depth=empty</code> 表示检出空目录。</p>
</blockquote>
<p><strong>第二步: 更新文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn up ReadMe.md</div></pre></td></tr></table></figure>
<blockquote>
<p>这里直接 svn up 就可以将你需要的文件 checkout 出来了。</p>
</blockquote>
<p>修改文件后, 也可以直接提交到 svn 仓库. 使用如下命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn ci ReadMe.md -m &quot;update.&quot;</div></pre></td></tr></table></figure>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>使用 <code>svn export</code> 命令将文件导出，然后将 <code>svn import</code> 命令导入文件到 svn 仓库。</p>
<p>一般临时想 checkout 一个文件，就会使用 <code>方案三</code>, 比较正式的操作，我会选择 <code>方案二</code>，因为 <code>方案二</code> 这样既可在不增加磁盘大小的情况下保持 svn 仓库的目录结构，又可以任意 checkout 文件。</p>
<h2 id="稀疏目录"><a href="#稀疏目录" class="headerlink" title="稀疏目录"></a>稀疏目录</h2><p>上面的 <code>方案二</code>，其实就是 svn 的一种稀疏检出的操作。</p>
<blockquote>
<p>Subversion 1.5 开始支持稀疏检出，允许对目录设置深度（depth）。</p>
</blockquote>
<p><strong>关于 depth 几个参数的含义</strong>:</p>
<p>–depth empty：只包含目录自身，不包含目录下的任何文件和子目录。</p>
<p>–depth files：包含目录和目录下的文件，不包含子目录。</p>
<p>–depth immediates：包含目录和目录下的文件及子目录。但不对子目录递归。</p>
<p>–depth infinity：这是默认的，包含整个目录树。</p>
<p>使用格式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn checkout URL --depth empty|files|immediates|infinity</div></pre></td></tr></table></figure>
<p>或者 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn checkout URL --depth=empty|files|immediates|infinity</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> svn depth 稀疏目录 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocoapods: 私有仓库]]></title>
      <url>/2018/09/24/Cocoapods-%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>在我之前的博客中分享了几篇关于 Cocoapods 的文章（文末有链接），今天分享另外一个主题即如何创建你自己的私有仓库以及如何使用私有仓库。</p>
<p>为什么会有这种需求呢？</p>
<p>开发组内或者公司内，不希望把一些核心的公用代码给到外界使用（不开源），但是这些代码基本很稳定很成熟，可以做成组件给到其他人或者组内使用。</p>
<p>那么，就可以使用 Cocoapods 来创建自己的私有仓库，让大家共享代码，也是组件化的一种方案。</p>
<p>下面的分享全是基于实践所得，中间也遇到很多坑，都被我一一解决了，希望能帮到正在阅读文章的你。</p>
<h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>这里的创建仓库，包括两个仓库，一个是代码仓库，另一个是 pod 源的仓库。</p>
<p>在 <a href="https://github.com/" target="_blank" rel="noopener">Github</a> 创建 repository，如图：<br><img src="/upload/images/2018/09/24/1.jpg" alt="1"></p>
<p><img src="/upload/images/2018/09/24/2.jpg" alt="1"></p>
<p>创建名为 <code>iOS_private_lib</code> 的 repository，这个主要用来存放我们的代码。</p>
<p>同样道理，创建一个 Repo 用于存放私有的 SpecRepo 源，我创建的是 <code>https://github.com/veryitman/private_spec_repo.git</code> 这个仓库。</p>
<p>为了说明问题，这里我使用了 <code>Public</code> 来模拟 <code>Private</code> 仓库。在实际开发中，一般都是使用公司自己搭建的私有 git 服务器来做，我这里主要是为了说明问题。</p>
<h2 id="创建代码工程"><a href="#创建代码工程" class="headerlink" title="创建代码工程"></a>创建代码工程</h2><p><strong>1. 先 clone 刚才创建的 repo 到本地</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/</div><div class="line"></div><div class="line">git clone https://github.com/veryitman/iOS_private_lib</div></pre></td></tr></table></figure>
<p><strong>2. 创建工程</strong></p>
<p>在 <code>~/workspace/iOS_private_lib</code> 下使用 <code>pod lib create</code> 创建工程，工程名字为 <code>CoreHTTP</code>，执行命令如下：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/iOS_private_lib</div><div class="line"></div><div class="line">pod lib create CoreHTTP</div></pre></td></tr></table></figure>
<p>根据提示输入对应的信息即可完成创建，如图：<br><img src="/upload/images/2018/09/24/3.jpg" alt="1"></p>
<p>创建成功后，包含一个 <strong>Example</strong> 例子工程，工程目录如下：<br><img src="/upload/images/2018/09/24/4.jpg" alt="1"></p>
<p>使用 Xcode 打开例子工程，在 <code>CoreHTTP/Classes</code> 中创建文件即可，如下图所示：<br><img src="/upload/images/2018/09/24/5.jpg" alt="1"></p>
<p><strong>3. 编辑 podspec 文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name             = &apos;CoreHTTP&apos;</div><div class="line">  s.version          = &apos;0.1.0&apos;</div><div class="line">  s.summary          = &apos;CoreHTTP for create private pod, it is a demo only.&apos;</div><div class="line">  s.description      = &lt;&lt;-DESC</div><div class="line">                       The project of CoreHTTP is a private pod, it is a demo only.</div><div class="line">                       DESC</div><div class="line"></div><div class="line">  s.homepage         = &apos;https://github.com/veryitman/iOS_private_lib.git&apos;</div><div class="line">  s.license          = &#123; :type =&gt; &apos;MIT&apos;, :file =&gt; &apos;LICENSE&apos; &#125;</div><div class="line">  s.author           = &#123; &apos;veryitman@126.com&apos; =&gt; &apos;veryitman@126.com&apos; &#125;</div><div class="line">  s.platform         = :ios, &quot;7.0&quot;</div><div class="line">  s.source           = &#123; :git =&gt; &apos;https://github.com/veryitman/iOS_private_lib.git&apos;, :tag =&gt; s.version.to_s &#125;</div><div class="line"></div><div class="line">  s.ios.deployment_target = &apos;8.0&apos;</div><div class="line"></div><div class="line">  s.source_files = &apos;CoreHTTP/Classes/**/*&apos;</div><div class="line">  s.requires_arc = true</div><div class="line">end</div></pre></td></tr></table></figure>
<p>这里需要注意，如果 <code>s.source_files</code> 写的不对，会报下面的错误。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- ERROR | [iOS] file patterns: The `source_files` pattern did not match any file.</div></pre></td></tr></table></figure>
<p><code>CoreHTTP</code> 的名字必须是你代码存放的文件夹名，而且这个文件件要与 <code>podspec</code> 文件在同一级文件目录下，从上面截图的目录结构可以看出。</p>
<p>另外一个提示的错误点，可能是因为空目录的问题造成的，如果这样的话，可以在各个文件夹下面创建 <code>.gitkeep</code> 文件，该文件的作用是为了提交空文件夹，因为 git 默认是不会添加空文件夹到仓库的。</p>
<p>创建 <code>.gitkeep</code> 文件的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd 文件夹下</div><div class="line"></div><div class="line">touch .gitkeep</div></pre></td></tr></table></figure>
<p>这里我折腾了蛮久，最后思考和参考了自己之前的开源项目管理博客，才解决这个问题。</p>
<p><strong>4. 检查和验证本地 podspec 文件</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd CoreHTTP </div><div class="line"></div><div class="line">pod lib lint CoreHTTP.podspec</div></pre></td></tr></table></figure>
<p>验证通过会显示如下图所示的成功提示<br><img src="/upload/images/2018/09/24/6.jpg" alt="1"></p>
<p>使用 Xcode 打开工程，删除对应以 <code>Test开头</code> 的相关的库和文件夹，确保 Xcode 能编译通过，选择模拟器即可。</p>
<p><strong>这里一定要先清空 cocoapods 的缓存，否则后面远程验证还是报错，无法通过验证。</strong></p>
<p>清空 cocoapods 的缓存，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm ~/Library/Caches/CocoaPods/Pods/External/CoreHTTP</div><div class="line"></div><div class="line">rm ~/Library/Caches/CocoaPods/Pods/Specs/External/CoreHTTP</div></pre></td></tr></table></figure>
<p><strong>5. 上传工程到 Github 远程代码仓库</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/iOS_private_lib</div><div class="line"></div><div class="line">git add CoreHTTP/</div><div class="line"></div><div class="line">git commit -m "Add lib."</div><div class="line"></div><div class="line">git push</div></pre></td></tr></table></figure>
<p><strong>6. 给版本添加 tag</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/iOS_private_lib</div><div class="line"></div><div class="line">git tag 0.1.0 -m "Add lib and example project."</div><div class="line"></div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<p><strong>7. 进行远程验证</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/iOS_private_lib</div><div class="line"></div><div class="line">pod spec lint CoreHTTP/CoreHTTP.podspec --verbose --use-libraries --allow-warnings</div></pre></td></tr></table></figure>
<p><strong>注意：</strong><code>--verbose</code> 选项是为了看编译和验证信息，<code>--use-libraries</code> 是为了能支持 i386 架构，如果不加此参数，私有库无法通过验证，<code>--allow-warnings</code> 参数是允许有警告。</p>
<p>验证成功的示意图：<br><img src="/upload/images/2018/09/24/7.jpg" alt="1"></p>
<h2 id="提交私有-podspec"><a href="#提交私有-podspec" class="headerlink" title="提交私有 podspec"></a>提交私有 podspec</h2><p><strong>1. 向本地的 cocoapods 仓库添加私有 Spec Repo</strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/iOS_private_lib</div><div class="line"></div><div class="line">pod repo add PrivateSpec https://github.com/veryitman/private_spec_repo.git</div></pre></td></tr></table></figure>
<p>这里一定要注意：对应的地址是 SpecRepo 仓库地址而不是代码仓库地址。</p>
<p>本地存放 spec 的私有仓库名称，我这里取名为 <code>PrivateSpec</code>，你也可以取其他名字，但是记住在下面的步骤中要保持一致。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -alt ~/.cocoapods/repos/</div></pre></td></tr></table></figure>
<p>可以看到已经成功添加本地 repo 中，其他 master 是 cocoapods 官方公开的源，其他为私有源。如下图所示：<br><img src="/upload/images/2018/09/24/8.jpg" alt="1"></p>
<p><strong>2. 向私有的 Spec Repo 中提交 podspec</strong></p>
<p>下面的 <code>PrivateSpec</code> 是与上面的名称对应的。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/workspace/iOS_private_lib</div><div class="line"></div><div class="line">pod repo push PrivateSpec ./CoreHTTP/CoreHTTP.podspec --verbose --use-libraries --allow-warnings</div></pre></td></tr></table></figure>
<p>这里要注意，添加私有库和之前博文 <a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/" target="_blank" rel="noopener">Cocoapods 管理开源项目</a> 中提到的 <code>pod trunk push</code> 是不一样的操作。</p>
<h2 id="使用私有库"><a href="#使用私有库" class="headerlink" title="使用私有库"></a>使用私有库</h2><p><strong>1. 搜索库</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search CoreHTTP</div></pre></td></tr></table></figure>
<p>如果搜索不到，可以执行下面的两条命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm ~/Library/Caches/CocoaPods/search_index.json</div><div class="line"></div><div class="line">pod setup</div></pre></td></tr></table></figure>
<p>然后继续搜索就可以了，搜索成功会显示如下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CoreHTTP (0.1.0)</div><div class="line">   CoreHTTP for create private pod, it is a demo only.</div><div class="line">   pod &apos;CoreHTTP&apos;, &apos;~&gt; 0.1.0&apos;</div><div class="line">   - Homepage: https://github.com/veryitman/iOS_private_lib.git</div><div class="line">   - Source:   https://github.com/veryitman/iOS_private_lib.git</div><div class="line">   - Versions: 0.1.0 [PrivateSpec repo]</div></pre></td></tr></table></figure>
<p>为了避免和其他私有库命名冲突，建议在自己的私有库前面加上公司或者其他标示，如 TepdCoreHTTP、FphCoreHTTP 等。</p>
<p><strong>2. 在 Podfile 文件的顶部添加 source</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source &apos;https://github.com/veryitman/private_spec_repo.git&apos;</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div></pre></td></tr></table></figure>
<p>注意一个是我们私有 SpecRepo 地址（非私有代码库地址），另一个是官方公有源地址。</p>
<p>使用私有库的工程的 Podfile 写法示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">source &apos;https://github.com/veryitman/private_spec_repo.git&apos;</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div><div class="line"></div><div class="line">platform :ios, &apos;7.0&apos;</div><div class="line"></div><div class="line">target &apos;TestCoreHTTP&apos; do</div><div class="line">    pod &apos;CoreHTTP&apos;, &apos;~&gt; 0.1.0&apos;</div><div class="line">end</div></pre></td></tr></table></figure>
<p>在工程中可以直接使用私有库了，示例代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line">#import &lt;CoreHTTPHeader.h&gt;</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [super viewDidLoad];</div><div class="line">    NSString *lib_desc = [CoreHTTPHeader libDesc];</div><div class="line">    NSLog(@&quot;The HTTP&apos;s library desc: %@&quot;, lib_desc);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="pod-命令"><a href="#pod-命令" class="headerlink" title="pod 命令"></a>pod 命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//将工程添加到本地 repo 中 </div><div class="line">pod repo add [本地私有仓库名] [远程仓库地址]</div><div class="line"></div><div class="line">//移除本地 repo</div><div class="line">pod repo remove [本地私有仓库名]</div><div class="line"></div><div class="line">//查看本地 repo</div><div class="line">pod repo</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//只从本地验证你的pod能否通过验证</div><div class="line">pod lib lint *.podspec</div><div class="line"></div><div class="line">//从本地和远程验证你的pod能否通过验证</div><div class="line">pod spec lint *.podspec</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://guides.cocoapods.org/making/private-cocoapods.html" target="_blank" rel="noopener">Private Pods</a></p>
<h2 id="我的其他文章"><a href="#我的其他文章" class="headerlink" title="我的其他文章"></a>我的其他文章</h2><p><a href="http://www.veryitman.com/2016/11/08/Mac-install-Cocoapods/" target="_blank" rel="noopener">Mac install Cocoapods</a></p>
<p><a href="http://www.veryitman.com/2016/11/08/Cocoapods-%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/" target="_blank" rel="noopener">Cocoapods 问题集锦</a></p>
<p><a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/" target="_blank" rel="noopener">Cocoapods 管理开源项目</a></p>
<p><a href="http://www.veryitman.com/2016/09/25/iOS-%E9%A1%B9%E7%9B%AE-%E6%89%93%E9%80%A0%E6%9C%AC%E5%9C%B0-pod-%E5%BA%93/" target="_blank" rel="noopener">iOS 项目: 打造本地 pod 库</a></p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS cocoapods </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈客户端模块化]]></title>
      <url>/2018/09/23/%E6%B5%85%E8%B0%88%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      <content type="html"><![CDATA[<h2 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h2><p>大学那会喜欢跟着老师在实验室折腾，感觉每天大脑中都有新知识鱼贯而入。</p>
<p>当我被告知要做一个最小单片机系统的时候，兴奋而又紧张！</p>
<p>最小单片机系统示意图：<br><img src="/upload/images/2018/09/23/1.jpg" alt=""></p>
<p>从画 <a href="https://baike.baidu.com/item/PCB/146397?fr=aladdin" target="_blank" rel="noopener">PCB</a> 到制板、洗板，再到选择元器件，最后组装调试和写代码，我花费了两个多月的时间，当板子上面的跑马灯亮起来的那一刻，我激动的无法言语。</p>
<p>大家可以看到这个最小单片机系统上面有很多组件组成，有电阻、电容、电阻、二极管和卡槽等，当然还有最核心的组件就是单片机，当时用的是51单片机。</p>
<p>各个元器件就好比组件，功能单一，职责明显，组件之间遵循协议构成模块，最终组合成为（最小单片机）系统。</p>
<p>上面的回忆是为了引出今天的分享，分享的主要内容是客户端开发中常用的<strong>模块化</strong>、<strong>组件化</strong>、<strong>插件化</strong>以及<strong>热更新</strong>等技术辞藻，并没有涉及到具体的技术问题。</p>
<h2 id="模块化和组件化"><a href="#模块化和组件化" class="headerlink" title="模块化和组件化"></a>模块化和组件化</h2><p>从程序设计的角度出发，无论是模块化还是组件化，都是指软件架构的范畴，是一种设计思想。两者并没有严格意义上面的区分，二者的目的一致，就是将工程结构化，达到可复用可伸缩的能力，最终提供工作效率。</p>
<p>在说模块化和组件化之前，先解释一下什么是高内聚低耦合。</p>
<p>高内聚：组件内尽可能独立完成自己的功能，坚持单一职责的原则 <a href="https://baike.baidu.com/item/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/9456515" target="_blank" rel="noopener">SRP</a>，不依赖于其他组件的代码。</p>
<p>低耦合：模块与模块之间尽量不要互相引用，模块之间联系越复杂耦合度越高，修改的成本就越高。</p>
<p><strong>组件</strong>更加强调可替换可复用的特性，职责和功能比较单一、独立，与其他组件之间没有耦合性。</p>
<p><strong>模块</strong>更加强调组合特性，更加偏重于业务，比如一个社区项目，登录注册、论坛和个人中心都是模块，这些业务模块又是有很多个组件组合而成。</p>
<p>下图展示的是一个简易的论坛系统示例图，如下：<br><img src="/upload/images/2018/09/23/2.jpg" alt=""></p>
<p>可以看出，各个组件可以单独使用到其他模块当中，各个模块之间相对独立，只要定义好模块之间的通信协议，就可以做到并行开发，各个模块甚至可以复用到其他系统之中。</p>
<h2 id="通信机制"><a href="#通信机制" class="headerlink" title="通信机制"></a>通信机制</h2><p>这里说的通信机制并不是指 HTTP 或 TCP 的通信方式，而是指组件与组件之间，模块和模块之间的交互方式。</p>
<p>正常情况下，写业务功能的代码，在不同组件之间需要相互调用，这样就需要 <strong>import</strong> 其他组件，无形之中就增加了组件之间的耦合度。</p>
<p>有开发经验的同学，可能会用到类似 java 的反射机制，或者一些动态语言的运行时机制如 Objective-C Runtime，对它们不进行 <strong>import</strong>，而是动态的解析代码，达到组件之间或者是类之间相互调用的目的。</p>
<p>现在提倡也是比较热门的技术是通过<strong>路由</strong>通信机制，来进行组件之间的通信。这里举一个实际使用场景。</p>
<p>用户安装了我们的 APP，运营同事在某个节日来临之际做一个促活跃的活动，期望用户点在打开推送通知的时候，打开 APP 后可以直接跳转到对应的活动详情页面。大致流程如下：<br><img src="/upload/images/2018/09/23/3.jpg" alt=""></p>
<p>这是一个再常规不过的需求了，相信经历过产品开发的朋友都见过这种需求。</p>
<p>很显然，我们可以使用<strong>路由</strong>的通信机制来完成这个需求，开发的流程图大致如下：<br><img src="/upload/images/2018/09/23/4.jpg" alt=""></p>
<p>这里关键的核心得益于 iOS 和 Android 平台的 <strong>scheme</strong> 机制，对于 <strong>scheme</strong>，通俗的讲就是一种可以跨进程或者进程内的通信协议，例如可以在 APP 中打开某个应用商店。</p>
<p>例如下面的 URL：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bbs://page/activity/activity_detail?id=8978&amp;user_id=67890432</div></pre></td></tr></table></figure>
<p>其中，<code>bbs</code> 就是 <strong>scheme</strong>，可以看到该 URL 完全可以被各自平台来解析。</p>
<p>iOS 和 Android 平台各有很多开源的路由方案，实现手法各有差异，但是思想是一样的，建议大家去了解和学习。</p>
<p>不过，现在你只要知道，路由的通信机制大大降低了组件之间的耦合性就够了。</p>
<h2 id="插件化"><a href="#插件化" class="headerlink" title="插件化"></a>插件化</h2><p><strong>插件</strong>这个词，大家应该很熟悉，例如 Chrome 浏览器中可以安装各种小工具，这些小工具就是插件，还有各种开发使用的 IDE 也支持插件安装，便于提高我们的工作效率。Chrome 和 IDE 被称之为宿主，插件寄生于他们。</p>
<p>支付宝和微信里面的小程序也可以看成是一个个插件，但是他们不能脱离支付宝和微信独立运行。</p>
<p>可以发现这些插件即使被卸载或者被删除，并不会让 Chrome 或者 IDE 受到影响，换句话说，插件让宿主锦上添花。 </p>
<p>这种插件思想当然可以运用到 APP 中来，试想一下，如果某个 APP 在线上经过动态下载就具有了一个强大或者好用的功能，岂不美哉？！</p>
<p><strong>插件化</strong>，将 APP 拆分成很多模块，这些模块包括一个宿主和多个插件，宿主提供插件的管理和通信协议及规范，每个模块都是一个的库或者功能包。</p>
<p><strong>插件化</strong>是一种编程和解决问题的思想，没有统一的定义。在 Android 上面运用比较多，iOS 上面很少，并不是 iOS 没有这样的技术，主要是因为苹果审核等各方面的限制。在 iOS8 上的 <code>App Extension</code> 功能，也可以看做是插件化了。</p>
<p>在 Android 平台中，插件化已经不是很新鲜的技术了，<strong>VirtualAPK、Atlas、Replugin</strong> 等框架相继开源，插件化技术已经进入了比较成熟的阶段了。</p>
<p>插件化的编程思想和实现，在不同的平台有所差异，即使在同一个平台上面都会有不同的实现手段，建议选择一个开源方案去了解其原理，然后试着动手去实现一个，千里之行始于足下！</p>
<h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><p>“不好了，昨天有很多用户反馈我们的 APP 出现闪退。“ 小王一大早的开始撕喊，坐在他旁边的开发大神们顿时微笑凝固，马上去后台看上报的崩溃日志，紧接着开始复现和解决问题，最终得出结论，需要重新提审 APP，并周知渠道部门做好更新准备。</p>
<p>试想一下，如果一个游戏几G的大小，你让用户为了你的一个小失误来整包更新游戏，用户和你估计都要疯了。</p>
<p>最近几年，随着业务发展的需求，<strong>热更新</strong>技术也是得到了突飞猛进的发展。类似于上面的场景，能在用户神不知鬼不觉的情况下使用热更新的技术解决崩溃的问题，岂不是两全其美。</p>
<p>Android 的热更新技术如火如荼的发展着，而苹果这边严厉禁止<strong>热更新</strong>，一旦检查到立即会责令你修改或者下架 APP。我们还是从技术的角度来看这个问题，学习和了解一下对应的技术总归没有错，<a href="https://juejin.im/post/5a5821b6f265da3e3f4c9e2a" target="_blank" rel="noopener">这里</a> 有 iOS 上面的热更新方案，另外 <a href="https://www.jianshu.com/p/eec0ab6800a4" target="_blank" rel="noopener">Android热修复方案比较</a> 介绍了很多 Android 热更新的开源的方案，可以了解学习一下。</p>
<p>站在跨平台的角度，我个人比较推荐使用 Lua 实现<strong>热更新</strong>，Lua 不仅简单高效，而且可以很好的和 C/C++ 结合在一起，而 Android 上面通过 JNI 又能与 C/C++ 通信，iOS 上面就更加不用说了。这只是我个人的一点看法，不喜勿喷。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Philosophy </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 架构 模块化 组件化 热更新 插件化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTTP 演进史]]></title>
      <url>/2018/09/16/HTTP-%E6%BC%94%E8%BF%9B%E5%8F%B2/</url>
      <content type="html"><![CDATA[<h2 id="精通-HTTP-吗？"><a href="#精通-HTTP-吗？" class="headerlink" title="精通 HTTP 吗？"></a>精通 HTTP 吗？</h2><p>在面试相关开发岗位的同学中，我经常会问一些跟编程语言不相关的东西，比如下面这些问题：</p>
<p><strong>1. 你平时是怎么学习的？学习渠道有哪些？</strong><br><strong>2. 项目组中，你认为最重要的是什么？</strong><br><strong>3. 你在项目组中遇到的最大困难（非编程问题）是什么，你是怎么解决的？</strong><br><strong>4. 项目执行过程中，其他同事遇到困难，你是如何做的？</strong></p>
<p>这些问题可以让面试者自由发挥的题目，并没有固定的标准的答案。这样的问题问出来有诸多好处，首先可以让面试者稳定一下心态不至于太紧张，其次可以看看他的语言组织能力和表达能力，从中也能看出他有没有过实际的项目经验。</p>
<p>很多人的简历上面写的很完美，做过诸多项目，精通某某语言的编程，精通各种网络协议，熟悉各大操作系统等等，当深入问他们熟悉的知识时，发现他们的回答却含糊不清。不排除世界上有这样的全才，但是肯定不会被我们轻易遇到，至少我觉得自己还没有达到那个能力。</p>
<p>如果你还没有但又想精通各种知识，就慢慢去学习并精通相关的知识，循序渐进，相信自己会做到的。好了，不扯了，今天聊聊 HTTP 的发展历史。</p>
<p>我敢保证有绝大部分的人不知道 HTTP/2，虽然他早就来临.</p>
<h2 id="HTTP-0-x-到-HTTP-2"><a href="#HTTP-0-x-到-HTTP-2" class="headerlink" title="HTTP 0.x 到 HTTP/2"></a>HTTP 0.x 到 HTTP/2</h2><p>HTTP/1 是 HTTP 1.0 和 HTTP 1.1 的统称，分别指 HTTP 协议的版本是 1.0 和 1.1.</p>
<p>1960年美国人 <a href="https://baike.baidu.com/item/Ted%20Nelson" target="_blank" rel="noopener">Ted Nelson</a> 构思了一种通过计算机处理文本信息的方法，并称之为超文本（hypertext）, 这成为了 HTTP 超文本传输协议标准架构的发展根基，所以他被称之为 <code>HTTP 之父</code>。</p>
<p>1989年3月在 CERN（欧洲核子研究组织）工作的 <a href="万维网之父">Tim Berners-Lee（蒂姆.伯纳斯.李）</a> 提交了一个提案 <code>Information Management: A Proposal</code>，该提案描绘了其对万维网（World Wide Web）最初的设想即能让远隔两地的人们共享知识，Tim 是 <code>万维网之父</code>，成就和贡献也是不计其数。</p>
<p>直到1990年 HTTP 才算是问世，姑且称之为 HTTP 0.x 版本，也有些地方称之为 HTTP 0.9 版本，总之这不是一个正式版。1996年5月，HTTP 1.0 作为 HTTP 的第一个正式版本正式公布，并记载于 <a href="https://tools.ietf.org/html/rfc1945" target="_blank" rel="noopener">RFC1945</a> 中。</p>
<p>随着人们对互联网的认知和技术的发展（尤其是浏览器等相关的技术），发现 HTTP 1.0 缺点还是比较多，无法满足快速的互联网发展需求。于是在1997年1月发布了 HTTP 1.1 版本，并记载于 <a href="https://www.ietf.org/rfc/rfc2068.txt" target="_blank" rel="noopener">RFC2068</a> 中，后来在1999年6月，对 RFC2068 又做了补充和修正，称之为 <a href="https://www.ietf.org/rfc/rfc2616.txt" target="_blank" rel="noopener">RFC2616</a>, 至此 HTTP 1.1 开始一统天下，直到现在绝大数开发者使用的都是 HTTP 1.1 版本。</p>
<p>另外一个版本 <a href="https://zh.wikipedia.org/wiki/HTTP/2" target="_blank" rel="noopener">HTTP/2</a> 标准于2015年5月以 <a href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="noopener">RFC 7540</a> 正式发表，多数主流浏览器已经在2015年底支持了该协议，时隔多年，HTTP/2 才问世。</p>
<p>苹果从 iOS9 开始支持 HTTP2.0，对 iOS 开发人员来说从 iOS9 开始 NSURLSession 可以支持 HTTP2.0 了。目前 Android 绝大部分系统不支持 HTTP/2，Android 原生 HttpURLConnection 框架并不支持 HTTP/2，但可以选用三方开源库 <a href="http://square.github.io/okhttp/" target="_blank" rel="noopener">okhttp</a> 作为网络框架，Android 5.0+（系统版本）设备才支持 HTTP/2。所以想全面使用 HTTP/2 还是要付出一定的代价，不过随着技术的革新，相信 HTTP/2 将会大放光彩。</p>
<h2 id="HTTP-不断的改进"><a href="#HTTP-不断的改进" class="headerlink" title="HTTP 不断的改进"></a>HTTP 不断的改进</h2><p>用一张图来描述 HTTP 的不断改进和演变史，如下图所示：<br><img src="/upload/images/2018/09/16/1.jpg" alt=""></p>
<p>下面具体看看这些协议版本的演进过程中，究竟是新增和改进了哪些东西？</p>
<h3 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP 0.9"></a>HTTP 0.9</h3><p>HTTP 0.9 并非出自某个标准化组织，只是 Tim 的个人作品而已，比较简单。可以参阅这篇文章 <a href="https://www.w3.org/Protocols/HTTP/AsImplemented.html" target="_blank" rel="noopener">The Original HTTP as defined in 1991</a> ，该版本规定了 HTTP 使用 TCP/IP 连接，HTTP 请求只有一个请求行，只有一个 GET 方法加上请求的URI。HTTP 响应则直接返回 HTML 文本，没有状态码，所以也没有办法区分错误消息和正常的文本。可以看出，HTTP/0.9并不完善，也不是那么完美，但是这的确是 Tim 坚持下来的结晶。</p>
<h3 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP 1.0"></a>HTTP 1.0</h3><p>HTTP 1.0 增加了请求头域和响应头域，增加了 HEAD 和 POST 方法，响应对象不再局限于 HTML 文本，支持长连接和缓存机制等等。</p>
<blockquote>
<p>HTTP 1.0 具体特点</p>
</blockquote>
<p>1.可以发送更多格式的内容，如图像、视频、二进制文件，不仅仅局限于文字了。</p>
<p>2.增加了 POST 和 HEAD 方法。</p>
<p>3.改变了 HTTP 请求和回应的格式。除了数据部分，每次通信都必须包括头信息（HTTP header），用来描述一些元数据，即增加了请求头信息，响应数据不再局限于 HTML 文本。</p>
<p>4.新增状态码（status code）、多字符集支持、多部分发送（multi-part type）、权限（authorization）、缓存（cache）、内容编码（content encoding）等功能。</p>
<p>5.增加了长连接的支持，不过 HTTP 1.0 需要在 request 中增加 ”Connection： keep-alive“ header 才能够支持，后面要说到的 HTTP 1.1 默认就支持了。</p>
<p>可以看出，HTTP 1.0在 HTTP 0.9 的基础上做了大量的扩充和改进。</p>
<blockquote>
<p>HTTP 1.0 主要缺点</p>
</blockquote>
<p>1.每次请求都需要建立 TCP 连接，即每对 Request/Response 都使用一个新的连接。</p>
<p>2.不支持断点续传。</p>
<h3 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP 1.1"></a>HTTP 1.1</h3><p>每个新版本的诞生基本都是对上一个版本的补充和改进，就像我们的软件开发一样，协议也需要迭代。</p>
<blockquote>
<p>HTTP 1.1 具体特点</p>
</blockquote>
<p>1.加强和优化了持久连接即长连接。</p>
<p>HTTP 1.1 支持长连接（Persistent Connection）和请求的流水线（Pipelining）处理，在一个 TCP 连接上可以传送多个 HTTP 请求和响应，减少了建立和关闭连接的消耗和延迟，在 HTTP 1.1 中默认开启 <code>Connection： keep-alive</code>，一定程度上弥补了 HTTP 1.0 每次请求都要创建连接的缺点。</p>
<p>2.增强了缓存机制。</p>
<p>引入了更多的缓存控制策略例如 Entity tag，If-Unmodified-Since, If-Match, If-None-Match 等可供选择的缓存头。</p>
<p>3.请求头引入了 range 头域。</p>
<p>它允许只请求资源的某个部分，即返回码是 206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。</p>
<p>4.将 Content-length 字段的作用进行扩充，即声明本次回应的数据长度（一个TCP连接现在可以传送多个回应，势必就要有一种机制，区分数据包是属于哪一个回应的）。</p>
<p>5.采用分块传输编码。</p>
<p>对于一些很耗时的动态操作，服务器需要等到所有操作完成，才能发送数据，显然这样的效率不高。更好的处理方法是，产生一块数据，就发送一块，采用流模式（stream）取代缓存模式（buffer）。</p>
<p>6.新增了许多动词方法：PUT、PATCH、HEAD、OPTIONS、DELETE。另外，客户端请求的头信息新增了 Host 字段，用来指定服务器的域名。</p>
<p>7.新增了 24 个错误状态响应码。</p>
<blockquote>
<p>HTTP 1.0 主要缺点</p>
</blockquote>
<p>HTTP 1.1 虽然增加了很多功能，在一定程度上已经很强大了，但是他自身也是有缺点的，换句话说有优化的空间，主要问题如下：</p>
<p>1.队头堵塞（Head-of-line blocking），各个请求到达的服务器的速度是不同的，如果先发的请求先到达可能会发生阻塞，剩下所有的工作都会被阻塞在那次请求应答之后，这样就降低了带宽。</p>
<p>为了避免这个问题，有两种方法：一是减少请求数，二是同时多开持久连接。</p>
<p>2.臃肿的消息头部</p>
<p>3.不支持服务端推送，例如要求使用 HTTP 协议做一个服务端数据变动页面立即改变的组件就不好做，可用轮询的方式进行，这样就会对带宽影响较大。</p>
<h3 id="SPDY"><a href="#SPDY" class="headerlink" title="SPDY"></a>SPDY</h3><p>在说到 HTTP/2 之前，必须要先说说 <a href="https://zh.wikipedia.org/wiki/SPDY" target="_blank" rel="noopener">SPDY</a>。SPDY 是由 Google 公司推出的，SPDY 的推出是为了解决 HTTP 1.1 中存在的一些问题的。</p>
<p>1.多路复用（multiplexing）</p>
<p>多路复用通过多个请求 stream 共享一个 TCP 连接的方式，解决了HOL blocking 的问题，降低了延迟同时提高了带宽的利用率。</p>
<p>2.可以对请求设置优先级</p>
<p>多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。</p>
<p>3.对请求头的压缩</p>
<p>选择合适的压缩算法可以减小包的大小和数量，这样在一定程度上可以提高网络使用效率。</p>
<p>4.为了数据传输的安全性，强制使用基于 HTTPS 的加密协议传输。</p>
<p>5.支持服务端推送。</p>
<p>称之为 Server Push 功能，服务器在还没有收到客户端的请求，服务器就可以把各种资源推送给客户端。</p>
<p>比如，客户端只请求了 index.html，但是服务器把 index.html、x.css、x.jpg 等资源全部发送给客户端。这样的话，只需要一轮 HTTP 通信，客户端就得到了全部资源，提高了通信的性能，也提高了用户体验。</p>
<h3 id="HTTP-2"><a href="#HTTP-2" class="headerlink" title="HTTP/2"></a>HTTP/2</h3><p>本质上来讲，HTTP/2 是建立在 SPDY 基础之上的，借鉴了很多 SPDY 的设计思想和策略。 HTTP 具有 SPDY 的优点，同时自己也有与 SPDY 的不同点，主要如下：</p>
<p>1.HTTP/2 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS。这一点 HTTP/2 相对人性化一些。</p>
<p>2.HTTP/2 会对请求头和响应头做压缩以提升请求性能，HTTP/2 消息头的压缩算法不同于 SPDY。 HTTP/2 采用 <a href="http://http2.github.io/http2-spec/compression.html" target="_blank" rel="noopener">HPACK</a>，SPDY 采用的 <a href="http://zh.wikipedia.org/wiki/DEFLATE" target="_blank" rel="noopener">DEFLATE</a> 算法。</p>
<p>HTTP/2 支持所有的 HTTP 1.1 的核心特征，其提供了 HTTP 语义的传输优化，并且在各方面做到更高效。HTTP/2 的头信息是一个彻底的二进制协议，头信息和数据体都是二进制，并且统称为帧（frame），即头信息帧和数据帧。对 HTTP/2 感兴趣的可以看一下 <a href="https://www.jianshu.com/p/40378501d1fc" target="_blank" rel="noopener">HTTP2 协议初识</a> 这篇文章。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 网络协议 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wireshark udp http https spdy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Wireshark: 简单分析 TCP 三次挥手]]></title>
      <url>/2018/09/09/Wireshark-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-TCP-%E4%B8%89%E6%AC%A1%E6%8C%A5%E6%89%8B/</url>
      <content type="html"><![CDATA[<h2 id="话说握手"><a href="#话说握手" class="headerlink" title="话说握手"></a>话说握手</h2><p>你要是开发人员，相信你一定听说过 TCP（Transmission Control Protocol 传输控制协议）或是 TCP 握手的说法。</p>
<p>所谓<strong>握手</strong>，通俗来讲就是通信双方协商在后续通信过程中需要使用的通信信息的过程。TCP 为了建立可靠的连接需要三次握手，后续给大家分享 TLS 为了实现加密、校验、身份认证同样需要握手的过程。</p>
<p>TCP 三次握手可以使用下图来表达：<br><img src="/upload/images/2018/09/09/1.jpg" alt=""></p>
<p>本篇给大家分享如何使用 <code>Wireshark</code> 来跟踪 HTTP 包，查看 TCP 握手的过程。</p>
<p>在看下面内容之前，先简单看一下 TCP 协议报头。</p>
<p>下图是 TCP 报头的格式：<br><img src="/upload/images/2018/09/09/2.png" alt=""></p>
<p>其中，Seq(Sequence Number) 是 32 位的序列号，<code>Acknowledgment number</code> 称之为确认序号，也是 32 位的，但是他不是标志位 ACK，这个要区别开，当 ACK 置 1 时 <code>Acknowledgment number</code> 才有效，指接收方期待的下一个报文段的序列号。</p>
<p>TCP 报头信息中有六个控制位(标志位)，分别是：SYN、ACK、PSH、FIN、RST 和 URG。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SYN: 表示建立连接</div><div class="line">FIN: 表示关闭连接</div><div class="line">ACK: 表示响应</div><div class="line">PSH: 表示有数据传输</div><div class="line">RST: 表示连接重置</div><div class="line">URG: 表示紧急数据</div></pre></td></tr></table></figure>
<p><strong>Seq 序列号有两个作用：</strong><br>第一，在 SYN 置 1 时，此为当前连接的初始序列号(Initial Sequence Number, ISN)，数据的第一个字节序号为此 ISN+1。<br>第二，在 SYN 置 0 时，为当前连接报文段的累计数据包字节数。</p>
<p>TCP 协议设计比较复杂，其涉及的知识较多，这里大家整不明白也没有关系，并不影响你阅读下面的内容，如果对 TCP 协议本身感兴趣，可以去拜读【TCP/IP 详解，卷 1：协议】这本书。</p>
<h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><p>每次说到网络层，就要拿出类似下面的网络模型图，OSI 将网络模型分为7层，TCP/IP 模型将网络模型分为 4 层，网络 4 层模型由 7 层模型简化合并而来，没有本质的区别，如图：<br><img src="/upload/images/2018/09/09/3.jpg" alt=""></p>
<p>HTTP 仅仅是个协议，属于应用层的面向对象的协议，从上图可以看出 HTTP 是在 TCP 基础之上的。</p>
<blockquote>
<p>HTTP 协议一共有五大特点</p>
</blockquote>
<p><em>1、支持客户/服务器模式</em><br><em>2、简单快速</em><br><em>3、灵活</em><br><em>4、无连接</em><br><em>5、无状态</em></p>
<p>这里强调一下 <strong>无连接</strong> 和 <strong>无状态</strong> 这两个特点。</p>
<p><strong>无连接</strong>，指的是限制每次连接只处理一个请求。服务器处理完客户端的请求，并收到客户端的应答后，即断开连接。采用这种方式可以节省传输时间。<code>Keep-Alive</code> 特性不在本篇讨论范围，暂时你可以将其忽略。</p>
<p><strong>无状态</strong>，指的是协议对于事务处理没有记忆能力，服务器不知道客户端是什么状态。即我们给服务器发送 HTTP 请求之后，服务器根据请求，会给我们发送数据过来，但是发送完，不会记录任何信息。</p>
<p>可以利用 HTTP 的这两个特点来分析 TCP 三次握手的过程。</p>
<h2 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h2><p>以 GET 请求下面地址为例，使用 <code>Wireshark</code> 抓包。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://www.baidu.com/news/detailV3.html?id=1279391&amp;COMMON_ACCESS_TOKEN=(null)&amp;COMMON_ACCESS_TOKEN_SECRET=(null)&amp;_cT=IOS&amp;_cV=3.1.3&amp;_cA=PM</div></pre></td></tr></table></figure>
<p>看返回结果，选中 <code>HTTP/1.1 200 OK</code> 右键, 在弹出框中选择 <code>Follow/TCP Stream</code>，如下图所示：<br><img src="/upload/images/2018/09/09/4.jpg" alt=""></p>
<p>关闭弹出的弹窗，回到主界面，看到如下图所示的三次（红色 1、2、3处） TCP 握手过程：<br><img src="/upload/images/2018/09/09/5.jpg" alt=""></p>
<p>第一次，请求客户端发送一个 [SYN] 包，序列号是 0（Seq=0）。</p>
<p>第二次，服务器会发送一个 [SYN, ACK] 包，序列号是 0，ACK 是 1（Seq=0，Ack=1）。</p>
<p>第三次，客户端请求服务器，客户端会发送一个 [ACK] 包，序列号是 1，Ack 是 1（Seq=1，Ack=1）来回复服务器。</p>
<p>简单的画一个草图，如下：<br><img src="/upload/images/2018/09/09/6.jpg" alt=""></p>
<p><strong>这个过程，简单描述为下面三个步骤：</strong></p>
<p>1.发送方给接收方发送 SYN 信号，此时发送方处于 <code>SYN_SEND</code> 状态。<br>2.接收方确认并回复给发送方 SYN/ACK 信号，此时接收方处于 <code>SYN_RCVD</code> 状态。<br>3.发送方给接收方发送确认 ACK 信号，发送完毕后，发送方(客户端)进入 <code>ESTABLISHED</code> 状态，当接收端(服务端)接收到这个包时，也进入 <code>ESTABLISHED</code> 状态，TCP 握手结束。</p>
<p>上面的步骤，建议感兴趣的朋友去实际操作一下。</p>
<h2 id="为什么是三次握手"><a href="#为什么是三次握手" class="headerlink" title="为什么是三次握手"></a>为什么是三次握手</h2><p>回头再来想一想，TCP 的连接为什么需要三次握手呢，为什么不是一次，两次呢？一次不就挺好吗，三次是不是有点多此一举了？</p>
<p>TCP 协议不是一个人定出来的而是一群人拟定的，设计三次握手固然有它的意义，是经过精心设计且在性能和效率上面衡量过的。</p>
<p>在知乎 <a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">TCP 为什么是三次握手，而不是两次或四次？</a> 上面有不错的答案，虽然有些回答比较搞笑，但是很好理解，比如这位仁兄：<br><img src="/upload/images/2018/09/09/7.jpg" alt=""></p>
<p>我们不妨换个思路来想这个问题，TCP 协议设计初衷是 <code>让数据进行可靠，高效，安全的传输</code>，如果握手是一次，两次或四次，就无法很好的保证 TCP 的 <code>可靠，安全及高效</code> 的传输，说不定哪天有人设计出来一种可替代 TCP 协议的其他协议就是两次握手或者不需要握手，哈哈！</p>
<h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><p><a href="https://cloud.tencent.com/info/d6b27fce815445c3c5f783a39ec204f6.html" target="_blank" rel="noopener">如何理解HTTP协议的“无连接，无状态”特点?</a></p>
<p><a href="https://www.zhihu.com/question/24853633" target="_blank" rel="noopener">TCP 为什么是三次握手，而不是两次或四次？</a></p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wireshark tcp ip udp http https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Wireshark：抓取 HTTP 包]]></title>
      <url>/2018/09/01/Wireshark%EF%BC%9A%E6%8A%93%E5%8F%96-HTTP-%E5%8C%85/</url>
      <content type="html"><![CDATA[<h2 id="开篇简要"><a href="#开篇简要" class="headerlink" title="开篇简要"></a>开篇简要</h2><p><a href="http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/" target="_blank" rel="noopener">初识 Wireshark</a> 简单介绍了强大的 <code>Wireshark</code> 工具，想用好或者是说想发挥 <code>Wireshark</code> 的巨大威力，还有很长的路要走（对我来说）。学习 <code>Wireshark</code> 的成本要比其他网络抓包工具的成本高，所以请做好学习的准备。</p>
<p>我身边很多开发同事，甚至包括一些刚入职的测试工程师都不喜欢使用抓包工具，遇到问题凭着自己的感觉在那里侃侃而谈，既耽误时间又没有解决问题，有时候还伤了和气，明明可以使用工具可以解决的问题，偏偏要各抒己见。</p>
<p>说到 <code>Wireshark</code> 更是很少人使用，至少我身边的同事是这样。如果让你一直去看那些 RFC 等网络协议，不到半小时估计你就会感到疲惫，但是结合 <code>Wireshark</code> 来理解网络协议就会感到无比的快乐，何乐而不为呢？！</p>
<p>继续阅读下去，你可以了解到如下几个知识：</p>
<p><strong>1. 如何抓取 PC 端、iOS 设备的网络包？</strong><br><strong>2. 使用一些过滤条件如何查看包的内容？</strong><br><strong>3. 如何在 <code>Wireshark</code> 中显示域名？</strong></p>
<h2 id="PC-端的-HTTP-请求"><a href="#PC-端的-HTTP-请求" class="headerlink" title="PC 端的 HTTP 请求"></a>PC 端的 HTTP 请求</h2><p>打开 <code>Wireshark</code>，选择对应的网口，因为我使用的是无线网络（WiFi），所以选择 <code>Wi-Fi：en0</code> 这个网口，你可以根据你的网络使用情况来选择对应的网口，如下图：</p>
<p><img src="/upload/images/2018/09/01/1.jpg" alt=""></p>
<p>可以看到对应有网络数据的网口，<code>Wireshark</code> 还在右侧显示对应的波浪，很人性化的设计。双击对应的网口，就可以使用 <code>Wireshark</code> 来抓包看数据了。</p>
<p>下面我就以 PC 端访问 <code>www.veryitman.com</code> 来演示 HTTP 请求的抓包情况。</p>
<p>查看本机的 ip 地址，我的是 <code>10.4.17.7</code>, 再来看一下 <code>www.veryitman.com</code> 对应的 ip 地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping ww.veryitman.com</div></pre></td></tr></table></figure>
<p>显示结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">64 bytes from 185.199.110.153: icmp_seq=0 ttl=52 time=317.074 ms</div></pre></td></tr></table></figure>
<p>那么， <code>185.199.110.153</code> 就是其对应的 ip 地址。总的来说，对于 PC 端，源地址是 <code>10.4.17.7</code>，目的地址是 <code>185.199.110.153</code>，对于服务器来说，正好反过来。</p>
<p>首先在过滤器中输入 <code>http</code>, 如下图所示：</p>
<p><img src="/upload/images/2018/09/01/2.jpg" alt=""></p>
<p>然后打开浏览器，我使用的是 Chrome，打开 <code>http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/</code> 网站站点，<code>Wireshark</code> 显示如下（部分截图）：<br><img src="/upload/images/2018/09/01/3.jpg" alt=""></p>
<p>改变一下过滤语句，将之前的 <code>http</code> 改为 <code>ip.src==10.4.17.7 &amp;&amp; http &amp;&amp; ip.dst==185.199.109.153</code>， 显示如下：<br><img src="/upload/images/2018/09/01/4.jpg" alt=""></p>
<p>可以选择任何一个请求，展示区域如下：<br><img src="/upload/images/2018/09/01/5.jpg" alt=""></p>
<p>上图中的三个区域分别对应的是 <code>View</code> 中的 <code>Packet List</code>， <code>Packet Details</code>，<code>Packet Bytes</code> 三个视图。<br><img src="/upload/images/2018/09/01/6.jpg" alt=""></p>
<p>选择任何一个请求，在对应的 <code>区域2</code> 可以看到该请求的详情。</p>
<p>刚才使用的过滤条件只看到 PC（客户端）的请求，没有看到服务器返回信息，我们修改一下过滤条件为 <code>ip.src==185.199.109.153 &amp;&amp; http &amp;&amp; ip.dst==10.4.17.7</code>，这样就看以看到服务器的回包信息了，如下图所示：<br><img src="/upload/images/2018/09/01/7.jpg" alt=""></p>
<p>双击进入该响应，就可以看到对应的响应数据详情了。</p>
<h2 id="iOS-设备的-HTTP-请求"><a href="#iOS-设备的-HTTP-请求" class="headerlink" title="iOS 设备的 HTTP 请求"></a>iOS 设备的 HTTP 请求</h2><p>跟查看 PC 端的 HTTP 请求方式基本一致，只是此时的本机 ip 地址是手机端的而不是 pc 端的。</p>
<p><a href="http://www.veryitman.com/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/" target="_blank" rel="noopener">初识 Wireshark</a> 中已经跟大家分享过如何去连接 iOS 设备到 <code>Wireshark</code> 抓包了，这里不再赘述。</p>
<p>至于查看 iOS 设备的 ip 地址，就很简单了，打开 <code>设置/wifi</code> 看一下详情就知道了。</p>
<h2 id="显示域名"><a href="#显示域名" class="headerlink" title="显示域名"></a>显示域名</h2><p>如果你经常使用 <code>Charles</code> 抓包，就可以发现 <code>Charles</code> 展示的请求中都是以域名来显示的，但是在 <code>Wireshark</code> 都是显示 ip 地址，或许因此感到不适，那么，<code>Wireshark</code> 能否展示域名呢？</p>
<p><code>Wireshark</code> 是可以像 <code>Charles</code> 那样展示域名的，只是它默认显示 ip 地址罢了。</p>
<p>打开 Preferences，如图：<br><img src="/upload/images/2018/09/01/8.jpg" alt=""><br><img src="/upload/images/2018/09/01/9.jpg" alt=""></p>
<p>这样 <code>Wireshark</code> 的显示就是另一番景象了如下图所示：<br><img src="/upload/images/2018/09/01/10.jpg" alt=""></p>
<p>当然，你也看出来了，过滤条件还是可以使用的。</p>
<p>你还可以使用其他的过滤条件，如下面的一些过滤条件，能帮你快速定位你要的数据。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">http.host == &quot;veryitman.com&quot;</div><div class="line"></div><div class="line">http.host contains &quot;veryitman.com&quot;</div><div class="line"></div><div class="line">http contains &quot;HTTP/1.1 200 OK&quot;</div></pre></td></tr></table></figure>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wireshark tcp ip udp http https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[卖废品的一次经历]]></title>
      <url>/2018/08/26/%E5%8D%96%E5%BA%9F%E5%93%81%E7%9A%84%E4%B8%80%E6%AC%A1%E7%BB%8F%E5%8E%86/</url>
      <content type="html"><![CDATA[<h2 id="偶遇"><a href="#偶遇" class="headerlink" title="偶遇"></a>偶遇</h2><p>这两天在收拾屋子，本来想把一些不重要的物品直接卖掉，省得给自己增加运输成本。但是又有些不舍，毕竟跟自己在一起生活了这么多年，每一本书，每对桌椅，每件衣服都是我和老婆努力挣钱买回来的，里面都包含着奋斗的故事。</p>
<p>话又说回来，无舍无得。于是，我就开始将物品分类，按照优先级挑选，重要的东西就放到箱子中，次要的就放到沙发上，不重要的就扔到大厅里，最后再来审视一遍这些不重要的物品是否还有留下来的必要，最终我把不重要的东西放到一个大袋子中，准备把它们卖给废品站。</p>
<p>在百度上面找了好几家附近收废品的，打电话过去都要求卖家自己把东西拿过去，态度十分不友好，我也就没再多问，就挂掉了电话。</p>
<p>无独有偶，中午下楼去买东西回来的时候，正好看到一个大爷骑着三轮车在我前面驰骋，大爷的车技贼溜，在小巷子中开出了赛车的感觉。还没等我张嘴，他就即将要离开我的视线，急中生智，我看到他车子后面留有电话，于是我就急忙的努力的追赶着去记住他的电话，最后迫不及待的放下手中的东西，拿出手机拨打了他的电话。</p>
<p>大爷办事利落，不一会就到了楼下，三下五除二的把废品收拾了一番，像是收获了一批战利品一样。他很惊诧为什么我知道他的电话，我说我看到了你车上的电话号码了，就记下来了。</p>
<p>大爷说：“小伙子，你的记性还真好，不愧是上过大学的人。“，我说：“是呀，我过目不忘！哈哈！”。</p>
<p>那天中午，我把东西半卖半送的都给这位大爷了，谁叫他夸我呢！</p>
<h2 id="思量"><a href="#思量" class="headerlink" title="思量"></a>思量</h2><p>上面这件事算不上什么大事，顶多也就算个鸡毛蒜皮的小事，但是给了我很多回忆和思考。</p>
<p>很多高中生也包括他们的家长们，都经常会说等上了大学就好了，不用那么累了，在大学的殿堂里可以无忧无虑的 <code>享受</code> 了。在我看来这是不对的，高中之所以累是因为有连绵不绝的作业和没有尽头的考试，当然还有班主任喋喋不休的教导，让你的神经时长处于紧绷的状态。高中是人生中必经的一个过程，至少我觉得它锻炼了我的意志和耐力，包括对心理上的考验，我很感激高中三年的生活。</p>
<p>大学生活和学习的确是一个值得向往和想象的，你可以吊儿郎当的过完几年大学生活，也可以努力拼搏过来，没有人逼你去怎么做，完全取决于你自己。</p>
<p>我大学的成绩算是优异，每次看到奖学金名单上有自己的名字，同学们都会说你真厉害，居然考这么好的成绩。我会说，如果你再努力一下肯定比我考的更好，就像那个大爷说我好记性一样，其实并不是我过目不忘，而是自己努力的结果，因为我知道自己并不是天才。</p>
<p>很多人进入社会参加工作后，发现工作并不是想象中的那般一帆风顺，自己一起进公司的同事，明明能力和自己相当甚至还不如自己，为什么别人就升职加薪，马上就要走上人生巅峰了，自己却还是原地踏步或者举步维艰呢？总是想不明白这是为什么，那是因为你自己没有看到别人比你更加努力。</p>
<p>还有不少人会抱怨为什么别人能力没有我强，领导偏偏把一些重要的事情交给了他，开始怀疑对方是不是对领导施了什么魔法，而自己从来都没有想过怎么去向对方请教，或者思考自己是不是真的做好了本职工作。</p>
<p><strong><em>这件小事给了我几个启发：</em></strong></p>
<p><strong>1. 一定要给自己树立一个长远目标和短期目标，不断的完成短期目标，向长远目标前进。</strong></p>
<p><strong>2. 对于别人的赞美或是诋毁，要保持一颗平常心，戒骄戒躁。</strong></p>
<p><strong>3. 不要总是夸你的孩子聪明，要夸他比别人更努力，因为努力比聪明更重要。</strong></p>
<p><strong>4. 不要总是抱怨命运的不公，多去审视自己的不足，想办法去补全。</strong></p>
<p><strong>5. 有个可以交心的朋友尤为重要，可以让彼此敞开心扉，无所顾忌的交谈。</strong></p>
<p>这个世上没有免费的午餐，一切都要靠你自己去奋斗去争取，机会总是留给有准备的人，坚持自己的目标一直前行，相信自己，机会总有一天会和你不期而遇。</p>
<p>相信总有一天，你会感激正在努力的自己！</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 感悟 学习 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识 Wireshark]]></title>
      <url>/2018/08/20/%E5%88%9D%E8%AF%86-Wireshark/</url>
      <content type="html"><![CDATA[<p><a href="http://www.veryitman.com/2017/07/23/%E4%BD%BF%E7%94%A8-Charles/" target="_blank" rel="noopener">使用 Charles</a> 介绍了在 MacOS 上面的使用 <code>Charles</code> 工具, 虽然 <code>Charles</code> 很不错, 但是其只能抓 HTTP/HTTPS 的包, 对 TCP、UDP 等其他协议的网络包, 爱莫能助。</p>
<p>今天给大家分享强大的网络抓包工具 <code>Wireshark</code>，算是初步认识一下这个工具，后续分享更多关于 <code>Wireshark</code> 的内容。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>Wireshark</code> 是免费的，支持 Windows、MacOS 和 Linux，提供丰富的 GUI 交互，能分析所有的网络协议，并且是开源的。</p>
<p><img src="/upload/images/2018/08/20/1.jpg" alt=""></p>
<p>掌握好 <code>Wireshark</code>，能对绝大部分的网络协议进行分析了，所以学习它的使用对你的工作不无裨益。</p>
<p>关于 <code>Wireshark</code> 本身 UI（展示的界面内容） 的部分不在本文的讨论范围内，更多关于 <code>Wireshark</code> 的介绍和特性，可以去 <a href="https://www.wireshark.org/" target="_blank" rel="noopener">Wireshark 官网</a> 查阅。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我的 MacOS 版本:<br><img src="/upload/images/2018/08/20/2.jpg" alt=""></p>
<p>点击 <code>Wireshark</code> 的 <a href="https://www.wireshark.org/download.html" target="_blank" rel="noopener">下载地址</a>, 可以去下载对应的平台版本。</p>
<p><img src="/upload/images/2018/08/20/3.jpg" alt=""></p>
<blockquote>
<p>注意: 之前的 Mac 系统版本可能需要安装 <code>x11</code>, 现在新系统不需要安装了.</p>
</blockquote>
<h2 id="抓-iOS-设备的数据包"><a href="#抓-iOS-设备的数据包" class="headerlink" title="抓 iOS 设备的数据包"></a>抓 iOS 设备的数据包</h2><p>想抓 iOS 设备的网络数据，需要让 iOS 设备数据通过 MacOS 才行，因为 <code>Wireshark</code> 是针对网口进行抓包的。</p>
<p>当然了，你的 iOS 设备不需要越狱.</p>
<p>通过 usb 连接 iOS 设备后，接下来创建远程虚拟接口，在终端执行下面命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rvictl -s 设备id(udid)</div></pre></td></tr></table></figure>
<blockquote>
<p>rvictl 即 Remote Virtual Interface Tool。它可以通过 iOS 设备的 UDID 创建一个虚拟网卡，然后通过这个虚拟网卡监听设备上所有的网络流量。</p>
</blockquote>
<p>执行成功后，Mac 会出现一个对应的虚拟网络接口，名字是 rvi0（如果有多个 iOS 设备， 则累加，rvi1，rvi2…），如下图所示：<br><img src="/upload/images/2018/08/20/4.jpg" alt=""></p>
<p>只要启动 <code>Wireshark</code>，监听 rvi0 接口就能抓到 iOS 设备的数据了。</p>
<blockquote>
<p>关于获取 iOS 设备 ID(UDID)，可以使用 Xcode, 在 <code>Window/Devices and Simulators</code> 中选择相应设备，右面设备信息的 identifier 里就是对应的 UDID. 也可以通过 iTunes 或者第三方工具如 iTools 获取.</p>
</blockquote>
<p>你可以安装 <code>ideviceinstaller</code> 来查看设备 ID.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ideviceinstaller</div></pre></td></tr></table></figure>
<p>然后执行下面命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">idevice_id -l</div></pre></td></tr></table></figure>
<p>以抓取下面的一个 HTTP 请求为例，简单说明一下相关的知识。</p>
<p>GET 请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/news/detailV3.html?id=1279391&amp;COMMON_ACCESS_TOKEN=(null)&amp;COMMON_ACCESS_TOKEN_SECRET=(null)&amp;_cT=IOS&amp;_cV=3.1.3&amp;_cA=PM</div></pre></td></tr></table></figure>
<p>看返回结果，选中 Rsponse(200 OK) 右键, Follow/HTTP Stream，如图所示：<br><img src="/upload/images/2018/08/20/5.jpg" alt=""></p>
<p>在弹出的窗口中就可以看到具体的响应内容，以及响应的 json 数据。</p>
<h2 id="过滤器过滤"><a href="#过滤器过滤" class="headerlink" title="过滤器过滤"></a>过滤器过滤</h2><p>在 <code>Wireshark</code> 中显示过滤器会显示很多当前网络的数据包，如果你想看指定规则的数据包怎么办？</p>
<p>别担心，<code>Wireshark</code> 给我们提供了过滤功能，按照一定的过滤规则就可以达到你的目的。</p>
<p><strong>1. 网络协议过滤</strong></p>
<p>比如 TCP，只显示 TCP 协议，HTTP 只显示 HTTP 协议等。在过滤器输入框中直接输入协议名称即可，不区分大小写。</p>
<p><strong>2. IP 地址过滤</strong></p>
<p>如 ip.src == 192.168.1.102 显示源地址为 <code>192.168.1.102</code>，<br>而 ip.dst == 192.168.1.102, 目标地址为 <code>192.168.1.102</code>。</p>
<p><strong>3. 端口过滤</strong></p>
<p>tcp.port == 80, 端口为 80 的</p>
<p>tcp.srcport == 80, 只显示 TCP 协议的原端口为 80 的。</p>
<p><strong>4. Http 模式过滤</strong></p>
<p>http.request.method == “GET”，只显示 HTTP GET 方法的。</p>
<p><strong>5. 结合逻辑运算符 AND/OR 组成复杂的表达式</strong></p>
<blockquote>
<p>AND/OR 也可以写成 <code>&amp;&amp;</code> / <code>||</code></p>
</blockquote>
<p>下面举几个常用的示例，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//源地址或者目标地址是192.168.1.103</div><div class="line">ip.src == 192.168.1.103 or ip.dst == 192.168.1.103</div><div class="line"></div><div class="line">//显示所有目标或源地址是192.168.1.1的数据包</div><div class="line">ip.addr == 192.168.1.1 </div><div class="line"></div><div class="line">//显示目标地址是192.168.1.1的数据包</div><div class="line">ip.dst == 192.168.1.1 </div><div class="line"></div><div class="line">//显示源地址是192.168.1.1的数据包</div><div class="line">ip.src == 192.168.1.1 </div><div class="line"></div><div class="line">//tcp 连接端口为9101的数据包</div><div class="line">tcp.port == 9101</div></pre></td></tr></table></figure>
<p>更多的过滤规则可以去 <a href="https://www.wireshark.org/docs/man-pages/wireshark-filter.html" target="_blank" rel="noopener">官方手册</a> 和 <a href="https://wiki.wireshark.org/CaptureFilters" target="_blank" rel="noopener">CaptureFilters</a> 查阅和学习。</p>
<h2 id="美中不足"><a href="#美中不足" class="headerlink" title="美中不足"></a>美中不足</h2><p><code>Wireshark</code> 只能查看封包，而不能修改封包的内容，或者发送封包。</p>
<p>对于 HTTP、HTTPS 网络封包，<code>Wireshark</code> 都可以捕获， 但不能直接解密 HTTPS，所以想使用 <code>Wireshark</code> 来分析 HTTPS 包中的内容，需要去额外配置，较麻烦，后续研究再分享给大家。</p>
<p>所以建议大家，分析 HTTP/HTTPS 去使用各自平台上面的其他工具， 如 <code>Fiddler</code> 和 <code>Charles</code> 等优秀的抓包工具。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Wireshark tcp ip udp http https </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[配置 php7 + Nginx]]></title>
      <url>/2018/08/19/%E9%85%8D%E7%BD%AE-php7-Nginx/</url>
      <content type="html"><![CDATA[<h2 id="PHP7"><a href="#PHP7" class="headerlink" title="PHP7"></a>PHP7</h2><p>之前为了配合完成一个项目（PHP 版本为5.6），在本机搭建了 PHP56 的环境，后面自己系统升级为 <code>macOS High Sierra</code>，发现系统自带的 PHP 版本已经是 7.1 了，于是就开始使用系统自带的 PHP 版本了。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -v</div></pre></td></tr></table></figure>
<p>显示 PHP 版本信息，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PHP 7.1.16 (cli) (built: Apr  1 2018 13:14:42) ( NTS )</div><div class="line">Copyright (c) 1997-2018 The PHP Group</div><div class="line">Zend Engine v3.1.0, Copyright (c) 1998-2018 Zend Technologies</div></pre></td></tr></table></figure>
<p>系统自带的 PHP7.1 没有默认的 <code>php.ini</code> 文件，执行下面命令查找一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">php -r &quot;echo php_ini_loaded_file();&quot;</div></pre></td></tr></table></figure>
<p>此时并没有打印对应的配置文件信息。需要我们手动去复制一份：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp /private/etc/php.ini.default /private/etc/php.ini</div></pre></td></tr></table></figure>
<p>再次执行上面命令，即可看到配置文件的绝对路径了。或者执行 <code>php --ini</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">php --ini</div><div class="line"></div><div class="line">Configuration File (php.ini) Path: /etc</div><div class="line">Loaded Configuration File:         /etc/php.ini</div><div class="line">Scan for additional .ini files in: (none)</div><div class="line">Additional .ini files parsed:      (none)</div></pre></td></tr></table></figure>
<p>这里有个问题需要注意，<code>php.ini</code> 文件复制成功后，需要下面两步操作，否则在 php 代码发生致命错误的时候，页面不会输出任何内容，只是报 <code>HTTP ERROR 500</code> 的错误。</p>
<p>第一步，修改 <code>php.ini</code> 文件的权限，否则无法编辑保存，默认是只读属性。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 777 /private/etc/php.ini</div></pre></td></tr></table></figure>
<p>第二步，编辑 <code>php.ini</code> 文件，将 <code>display_errors = Off</code> 改为下面 <code>on</code> 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">display_errors = On</div></pre></td></tr></table></figure>
<p>记得每次修改完配置文件，需要重启 <code>php-fpm</code> 和 <code>nginx</code> 服务。</p>
<h2 id="PHP56"><a href="#PHP56" class="headerlink" title="PHP56"></a>PHP56</h2><p><strong>1. 安装 PHP56</strong> </p>
<p>可以参考下面两篇文章。</p>
<ul>
<li><p><a href="http://www.veryitman.com/2017/02/02/PHP-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/" target="_blank" rel="noopener">PHP开发准备</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2017/02/02/%E5%AE%89%E8%A3%85-PHP-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">安装 PHP 遇到的问题</a></p>
</li>
</ul>
<p><strong>2. 卸载（删除）PHP56</strong></p>
<p>执行 brew uninstall </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall php</div></pre></td></tr></table></figure>
<p>即可完成卸载。</p>
<p>如果卸载遇到问题，就打开 <code>/usr/local/Cellar/</code> 目录，删除对应的 PHP 目录即可。</p>
<h2 id="配置-php-fpm"><a href="#配置-php-fpm" class="headerlink" title="配置 php-fpm"></a>配置 php-fpm</h2><p>现在新版本的 PHP 其内核已经集成了 php-fpm，我们不需要另外安装了。</p>
<p>配置 php-fpm 配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf</div></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /private/etc/php-fpm.conf</div></pre></td></tr></table></figure>
<p>找到 error_log 项，添加下面两个配置项，如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error_log = /usr/local/var/log/php-fpm.log</div><div class="line">pid = /usr/local/var/run/php-fpm.pid</div></pre></td></tr></table></figure>
<p>如果不配置上面的配置项，启动 php-fpm 会报错：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ERROR: failed to open error_log (/usr/var/log/php-fpm.log): No such file or directory (2)</div><div class="line">ERROR: failed to post process the configuration</div><div class="line">ERROR: FPM initialization failed</div></pre></td></tr></table></figure>
<p>接下来, 继续配置，将 <code>www.conf.default</code> 复制一份命名为 <code>www.conf</code> 即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /private/etc/php-fpm.d/</div><div class="line"></div><div class="line">sudo cp www.conf.default www.conf</div></pre></td></tr></table></figure>
<p>不配置上面的，会报如下错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR: No pool defined. at least one pool section must be specified in config file</div><div class="line">ERROR: FPM initialization failed</div></pre></td></tr></table></figure>
<p>至此，可以启动 php-fpm 了，执行下面命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php-fpm -D</div></pre></td></tr></table></figure>
<p>不出意外的话，已经成功启动，可以使用下面命令查看端口使用情况</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an | grep 9000</div></pre></td></tr></table></figure>
<p>如果你在启动 php-fpm 遇到下面的错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERROR: unable to bind listening socket for address &apos;127.0.0.1:9000&apos;: Address already in use (48)</div><div class="line">ERROR: FPM initialization failed</div></pre></td></tr></table></figure>
<p>有两种方式解决这个问题</p>
<p><strong>1.</strong>修改 php-fpm 使用的端口号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /private/etc/php-fpm.d/www.conf</div></pre></td></tr></table></figure>
<p>将 <code>listen = 127.0.0.1:9000</code> 改为 <code>listen = 127.0.0.1:9001</code> 即可。</p>
<p><strong>2.</strong>杀掉9000端口占用的进程</p>
<p>关闭所有之前启动的 php-fpm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">killall php-fpm</div></pre></td></tr></table></figure>
<p>找到占用端口的进程号</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -an | grep 9000</div></pre></td></tr></table></figure>
<p>然后 <code>kill -9 pid</code>，重新启动 php-fpm 即可。</p>
<h2 id="安装和配置-Nginx"><a href="#安装和配置-Nginx" class="headerlink" title="安装和配置 Nginx"></a>安装和配置 Nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx</div></pre></td></tr></table></figure>
<p>创建文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/var/log/nginx</div><div class="line">mkdir -p /usr/local/etc/nginx/sites-available</div><div class="line">mkdir -p /usr/local/etc/nginx/sites-enabled</div><div class="line">mkdir -p /usr/local/etc/nginx/conf.d</div><div class="line">mkdir -p /usr/local/etc/nginx/ssl</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /var/www</div><div class="line">sudo chown :staff /var/www</div><div class="line">sudo chmod 775 /var/www</div><div class="line">vi /var/www/info.php</div><div class="line">vi /var/www/index.html</div><div class="line">vi /var/www/403.html</div><div class="line">vi /var/www/404.html</div></pre></td></tr></table></figure>
<p>改变 nginx.conf 配置文件</p>
<p>该配置文件在 <code>/usr/local/etc/nginx/nginx.conf</code> 下面.</p>
<p>我的配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">worker_processes  1;</div><div class="line"> </div><div class="line">error_log  /usr/local/etc/nginx/logs/error.log debug;</div><div class="line">pid        /usr/local/var/run/nginx.pid;</div><div class="line"> </div><div class="line">events &#123;</div><div class="line">    worker_connections  256;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">http &#123;</div><div class="line">    include             mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"> </div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"> </div><div class="line">    access_log  /usr/local/etc/nginx/logs/access.log  main;</div><div class="line"> </div><div class="line">    sendfile            on;</div><div class="line"> </div><div class="line">    keepalive_timeout   65;</div><div class="line"> </div><div class="line">    index index.html index.php;</div><div class="line"> </div><div class="line">    include /usr/local/etc/nginx/sites-enabled/*; </div><div class="line">    include /usr/local/etc/nginx/conf.d/*;</div><div class="line">     server &#123;</div><div class="line">        listen       8080;</div><div class="line">        server_name  localhost;</div><div class="line">        #charset koi8-r;</div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line">        location / &#123;</div><div class="line">            root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</div><div class="line">            index  index.php index.html index.htm; #加index.php</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</div><div class="line">    index  index.php index.html index.htm; #加index.php</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置了我的 web 目录和支持的文件.</p>
<h2 id="运行-PHP"><a href="#运行-PHP" class="headerlink" title="运行 PHP"></a>运行 PHP</h2><ul>
<li><p>创建 index.php</p>
</li>
<li><p>启动 php-fpm</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php-fpm</div></pre></td></tr></table></figure>
<p>或者以守护进程的方式来启动 PHP-fpm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php-fpm -D</div></pre></td></tr></table></figure>
<ul>
<li>启动 Nginx</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<ul>
<li>编辑 index.php</li>
</ul>
<p>在 web 目录(我配置的) <code>~/projs/phpdev/nginx/nginx_sites/</code> 新建文件 <code>index.php</code>.</p>
<p>index.php 里面可以编写代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- lang: php --&gt;</div><div class="line">&lt;!-- ~/nginx_sites/index.php --&gt;</div><div class="line">&lt;?php</div><div class="line">    echo &quot;Hello PHP&quot;;</div><div class="line">    echo &quot;&lt;/br&gt;&quot;;</div><div class="line">    </div><div class="line">    echo &quot;学习 php&quot;;</div><div class="line">    echo &quot;&lt;/br&gt;&quot;;</div><div class="line">    echo phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>打开浏览器, 输入地址：<a href="http://localhost:8080/index.php" target="_blank" rel="noopener">http://localhost:8080/index.php</a> 你会看到下面的页面:<br><img src="/upload/images/2018/08/19/1.jpg" alt=""></p>
<p>也可以在该目录下创建其他 PHP 文件, 如 <code>m.php</code> 文件.</p>
<p>浏览器中输入 <a href="http://localhost:8080/m.php" target="_blank" rel="noopener">http://localhost:8080/m.php</a> 可以执行相对应的文件.</p>
<p><strong>注意：</strong>这里的 <code>m.php</code> 是新建的 PHP 文件.</p>
<h2 id="重要文件"><a href="#重要文件" class="headerlink" title="重要文件"></a>重要文件</h2><p><strong>1. php 配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/private/etc/php.ini</div></pre></td></tr></table></figure>
<p><strong>2. nginx log 文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">/usr/local/var/log/nginx/access.log</div><div class="line"></div><div class="line">/usr/local/var/log/nginx/error.log</div><div class="line"></div><div class="line">/usr/local/etc/nginx/logs/error.log</div></pre></td></tr></table></figure>
<p><strong>3. nginx 配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p><strong>4. php-fpm 配置文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/private/etc/php-fpm.d/www.conf</div></pre></td></tr></table></figure>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p><strong>502 bad gateaway</strong></p>
<p>我是经常看到这个问题，但是每次引起的原因又不太一样，绝大部分是因为 <code>php-fpm</code> 启动不了或者是其端口错误导致的。</p>
<p>这种情况下，建议去看 <code>/usr/local/etc/nginx/logs/error.log</code> 日志文件。</p>
<p>例如下面的错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[error] </div><div class="line">61016#0: *1 kevent() reported that connect() failed (61: Connection refused) while connecting to upstream, </div><div class="line">client: 127.0.0.1, </div><div class="line">server: localhost, </div><div class="line">request: &quot;GET /3.php HTTP/1.1&quot;, </div><div class="line">upstream: &quot;fastcgi://127.0.0.1:9000&quot;, </div><div class="line">host: &quot;localhost:8080&quot;</div></pre></td></tr></table></figure>
<p>最终，我修改了 <code>/private/etc/php-fpm.d/www.conf</code> 中端口为 <code>9000</code>（我之前将该端口修改了其他的），重启 <code>php-fpm</code> 解决问题。 </p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP MySql nginx php-fpm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[简单配置 Apache]]></title>
      <url>/2018/07/14/%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE-Apache/</url>
      <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>有时候, 我们希望在自己本机(PC)搭建一个 WebServer, 然后自己可以在浏览器或者手机上面可以访问对应的地址直接查看效果, 再或者希望测试下载功能等, 其实 MacOS 自带的有 Apache 服务器.</p>
<p>下面简单分享一下, 在 MacOS 中如何简单的使用 Apache 服务器.</p>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>常用的命令有开启/重启/停止等.</p>
<p>1.开启: <code>sudo apachectl start</code><br>2.重启: <code>sudo apachectl restart</code><br>3.关闭: <code>sudo apachectl stop</code><br>4.查看版本号: <code>httpd -v</code></p>
<p><strong>1.查看 Apache 版本号</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">httpd -v</div></pre></td></tr></table></figure>
<p>或者使用下面的命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apachectl -v</div></pre></td></tr></table></figure>
<p>查看结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Server version: Apache/2.4.28 (Unix)</div><div class="line">Server built:   Oct  9 2017 19:54:20</div></pre></td></tr></table></figure>
<p><strong>2.启动 Apache</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apachectl start</div></pre></td></tr></table></figure>
<p>在浏览器打开: <a href="http://localhost" target="_blank" rel="noopener">http://localhost</a></p>
<p>会显示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">It works</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/07/14/1.jpg" alt=""></p>
<p><strong>3.停止 Apache</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apachectl stop</div></pre></td></tr></table></figure>
<p>如果没有开启 Apache 服务, 执行上面命令的话, 会报下面的错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/System/Library/LaunchDaemons/org.apache.httpd.plist: </div><div class="line">Could not find specified service</div></pre></td></tr></table></figure>
<p><strong>4.重新启动 Apache</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apachectl restart</div></pre></td></tr></table></figure>
<p>如果修改了 Apache 的配置文件, 需要重新启动 Apache 服务, 执行上面的命令即可.</p>
<h2 id="配置-Sites"><a href="#配置-Sites" class="headerlink" title="配置 Sites"></a>配置 Sites</h2><p>在自己的用户目录, 新建一个 <code>Sites</code> 目录, 例如我的用户目录是 <code>/Users/mark</code>, 可以在终端分别执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /Users/mark</div><div class="line"></div><div class="line">mkdir Sites</div></pre></td></tr></table></figure>
<p>执行成功后, 可以看到如下图所示的目录:</p>
<p><img src="/upload/images/2018/07/14/2.jpg" alt=""></p>
<p>接下来修改 Apache 中的配置文件, 执行下面命令开始编辑 <code>httpd.conf</code> 文件.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/apache2/httpd.conf</div></pre></td></tr></table></figure>
<p>打开 httpd.conf 文件，查找 <code>userdir</code> 关键字.</p>
<p>找到如下两行被注释掉的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#Include /private/etc/apache2/extra/httpd-userdir.conf</div><div class="line"></div><div class="line">#LoadModule userdir_module libexec/apache2/mod_userdir.so</div></pre></td></tr></table></figure>
<p>将其前面的 <code>#</code>(注释) 去掉, 紧接着编辑这个文件, 增加如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Directory /Users/mark/Sites&gt;</div><div class="line">  Require all granted</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
<p>将上面的这些代码放到如下代码下面即可:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;Directory &quot;/Library/WebServer/CGI-Executables&quot;&gt;</div><div class="line">    AllowOverride None</div><div class="line">    Options All</div><div class="line">    Require all granted</div><div class="line">&lt;/Directory&gt;</div></pre></td></tr></table></figure>
<p>保存该文件并退出 vim.</p>
<p>执行下面的命令修改 <code>httpd-userdir.conf</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /private/etc/apache2/extra/httpd-userdir.conf</div></pre></td></tr></table></figure>
<p>增加如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">UserDir Sites</div><div class="line"></div><div class="line">&lt;IfModule bonjour_module&gt;</div><div class="line">   RegisterUserSite customized-users</div><div class="line">&lt;/IfModule&gt;</div></pre></td></tr></table></figure>
<p><strong>注意:</strong> 如果在 <code>/private/etc/apache2/extra/</code> 目录下没有该文件, 新建一个即可.</p>
<p>保存文件并退出即可.</p>
<p>我们可以将自己需要运行的 html 等文件放到该目录, 如我将 <code>index.html</code> 放到该目录.</p>
<p>重新启动 Apache 服务, 在浏览器中输入 <code>http://localhost/~mark/</code>, 可以看到 <code>index.html</code> 里面的内容.</p>
<h2 id="WebServer-目录"><a href="#WebServer-目录" class="headerlink" title="WebServer 目录"></a>WebServer 目录</h2><p>上面我们提到, 启动 Apache 服务之后, 在浏览器可以看到 <code>It Works</code> 的字样, 那么这个是哪个文件输出的呢?</p>
<p>这个文件是 <code>sudo mvim index.html.en~orig</code>, 在如下目录:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Library/WebServer/Documents</div></pre></td></tr></table></figure>
<p>可以使用 vim 编辑该文件, 然后再刷新浏览器就可以看到其变化.</p>
<p>我们也可以把自己的 html 文件放到这里, 如 <code>mark.html</code>, 内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">  &lt;body&gt;</div><div class="line">    &lt;h1&gt;Hi, mark, Apache server works!&lt;/h1&gt;</div><div class="line">  &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>在浏览器中输入 <code>http://localhost/mark.html</code>, 可以看到对应的输出.</p>
<p>如果嫌配置 <code>Sites</code> 目录麻烦, 可以使用这种方式, 直接拷贝对应的文件或者目录放到 <code>/Library/WebServer/Documents</code> 中, 只不过需要 root 权限罢了.</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Apache WebServer MacOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RunLoop: 移除常驻线程]]></title>
      <url>/2018/07/01/RunLoop-%E7%A7%BB%E9%99%A4%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>下面两篇文章:</p>
<ul>
<li><p><a href="http://www.veryitman.com/2018/04/21/%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener">常驻线程是一种什么体验</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/06/RunLoop-NSTimer-%E5%AE%9E%E7%8E%B0%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">NSTimer 实现常驻线程的问题</a></p>
</li>
</ul>
<p>都是在 iOS 平台上如何利用 <code>RunLoop</code> 的特性实现常驻线程.</p>
<p>可能你看到本篇文章的标题 <code>移除常驻线程</code>, 有点不理解甚至觉得作者是不是有点神经病, 都已经需要常驻线程了, 为什么还要去退出呢?</p>
<p>实际应用场景中的确几乎遇不到这种情况, 所以, 本篇只是从技术的角度给大家分享 <code>RunLoop</code> 其他的一些知识点.</p>
<p>且耐住性子往下看…</p>
<p>为了不让大家误解, 统一一下相关的词汇和语境.</p>
<ul>
<li>输入源, 包括 source 和 timer.</li>
<li>退出 RunLoop 指的是在常驻线程的方法中立即返回.</li>
<li>这里的 RunLoop 指的是子线程中的 RunLoop 不是主线程中的.</li>
<li>结合之前介绍常驻线程的文章来看现在的文章, 不然不好理解.</li>
</ul>
<h2 id="运行-RunLoop-的方法"><a href="#运行-RunLoop-的方法" class="headerlink" title="运行 RunLoop 的方法"></a>运行 RunLoop 的方法</h2><p>这里有三种方式开启运行 RunLoop, 分别如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (void)run;</div><div class="line"></div><div class="line">- (void)runUntilDate:(NSDate *)limitDate;</div><div class="line"></div><div class="line">- (void)runMode:(NSString *)mode beforeDate:(NSDate *)limitDate;</div></pre></td></tr></table></figure>
<ul>
<li><strong>run 方法</strong></li>
</ul>
<p>看一下 API 文档如何解释 <code>run</code> 方法的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Puts the receiver into a permanent loop, </div><div class="line">during which time it processes data from all attached input sources.</div><div class="line">If no input sources or timers are attached to the run loop, this method exits immediately; </div><div class="line">otherwise, it runs the receiver in the NSDefaultRunLoopMode by repeatedly invoking runMode:beforeDate:. </div><div class="line">In other words, this method effectively begins an infinite loop that processes data from the run loop’s input sources and timers.</div></pre></td></tr></table></figure>
<p>大致意思讲的是, 在没有任何输入源的情况下, <code>run</code> 方法会立即执行后退出, 不会保持线程的持久性, 换句话说, 在有输入源的情况下, 该方法会进入一个无限循环当中. 本质上, 在 <code>NSDefaultRunLoopMode</code> 模式下, 该方法是反复调用 <code>runMode:beforeDate:</code> 方法的.</p>
<p>在之前文章实现常驻线程的代码中, 我们使用了 <code>run</code> 方法来开启运行 RunLoop.</p>
<p>可以看出, 我们之前实现的常驻线程使用 <code>run</code> 方法是无法退出常驻线程的.</p>
<ul>
<li><strong>runUntilDate:(NSDate *)limitDate 方法</strong></li>
</ul>
<p>该方法 API 释义:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Runs the loop until the specified date, </div><div class="line">during which time it processes data from all attached input sources.</div></pre></td></tr></table></figure>
<p>保证有输入源的情况下该方法启动的 RunLoop 可以在指定的日期内一直运行不会返回. 换句话说, 日期只要已到该方法就会立即退出 RunLoop.</p>
<p>示例代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//等同于 run, 可保证一直运行</div><div class="line">[runLoop runUntilDate:[NSDate distantFuture]];</div><div class="line"></div><div class="line">//立即返回, 退出 RunLoop</div><div class="line">[runLoop runUntilDate:[NSDate date]];</div><div class="line"></div><div class="line">//然后过12秒后返回</div><div class="line">[runLoop runUntilDate:[NSDate dateWithTimeIntervalSinceNow:12.0f]];</div></pre></td></tr></table></figure>
<ul>
<li><strong>runMode:(NSString <em>)mode beforeDate:(NSDate </em>)limitDate 方法</strong></li>
</ul>
<p>该方法有两个参数 <code>mode</code> 和 <code>limitDate</code>, <code>mode</code> 就是 RunLoop 的运行模式, <code>limitDate</code> 就是上面方法一样的释义即在指定的日期内.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Runs the loop once, blocking for input in the specified mode until a given date.</div></pre></td></tr></table></figure>
<p>可以这么理解, 该方法开启的 RunLoop 处理完之后会立即返回(once), 如果在指定日期内事件还没处理, 在该日期后会立即返回.<br>换句话说, 如果指定的日期是当前的, 该方法执行后 RunLoop 会立即退出.</p>
<p>示例代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//立即返回</div><div class="line">[runLoop runMode:NSDefaultRunLoopMode beforeDate:[NSDate date]];</div><div class="line">        </div><div class="line">//有事件到达处理后就返回，如果没有则过12秒返回</div><div class="line">[runLoop runMode:NSDefaultRunLoopMode beforeDate:[NSDate dateWithTimeIntervalSinceNow:12.0]];</div></pre></td></tr></table></figure>
<p>这三个方法, 总结一下大概如下:</p>
<ul>
<li>这三个方法在没有任何输入源情况下会都立即返回(退出 RunLoop), 不会等待.</li>
<li><code>run</code> 可保证 RunLoop 在有输入源的情况下一直运行.</li>
<li><code>runUntilDate</code> 可以通过设置超时时间来退出 RunLoop. 超时时间一过就会立即退出 RunLoop.</li>
<li>使用 <code>runMode</code> 方式启动的 RunLoop 会在处理完事件后或者超时后, 立即返回. 即可以通过设置超时时间或者使用 <code>CFRunLoopStop</code> 方法来退出 RunLoop.</li>
</ul>
<h2 id="移除常驻线程"><a href="#移除常驻线程" class="headerlink" title="移除常驻线程"></a>移除常驻线程</h2><p>先看一下, 在子线程执行的方法中如何实现的. 示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">- (void)asyncRun &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">        </div><div class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">        _threadRunLoop = runLoop;</div><div class="line">        </div><div class="line">        // 保持常驻线程的方式1: source</div><div class="line">        NSPort *port = [NSMachPort port];</div><div class="line">        _threadPort = port;</div><div class="line">        [runLoop addPort:port forMode:NSRunLoopCommonModes];</div><div class="line"></div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</div><div class="line">        </div><div class="line">        // 执行其他逻辑</div><div class="line">        //...</div><div class="line">        </div><div class="line">        // 手动开启 RunLoop</div><div class="line">        // [runLoop run];</div><div class="line">        </div><div class="line">        while (!self.stopLoopRunning &amp;&amp; [runLoop runMode:NSDefaultRunLoopMode beforeDate:[NSDate distantPast]]) &#123;</div><div class="line">            </div><div class="line">            // 这里是为了验证常驻线程是否已经退出</div><div class="line">            NSLog(@&quot;--- asyncRun ----&quot;);</div><div class="line">            </div><div class="line">            // 实际业务中, 建议使用空语句实现</div><div class="line">            ; //实现为空语句</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结合上面讲解的原理, 这里选择使用 <code>runMode</code> 方法来开启运行 RunLoop. 大家也可以自由发挥使用其他的方法.</p>
<p><strong>注意: <code>stopLoopRunning</code> 是定义的一个属性.</strong></p>
<p>移除的示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</div><div class="line">    </div><div class="line">    [super viewDidDisappear:animated];</div><div class="line">    </div><div class="line">    // 取消线程</div><div class="line">    // 实际业务场景中自行决定 canCancel 的设置, 这里只是示例</div><div class="line">    BOOL canCancel = YES;</div><div class="line">    if (canCancel) &#123;</div><div class="line">        [[self permanentThread] cancel];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /// 停止常驻线程</div><div class="line">    &#123;</div><div class="line">        self.stopLoopRunning = YES;</div><div class="line">        </div><div class="line">        // 移除 port</div><div class="line">        // 如果是用 timer 的方式的常驻线程, 可以 invalid 对应的 timer</div><div class="line">        [self.threadRunLoop removePort:self.threadPort forMode:NSRunLoopCommonModes];</div><div class="line">        </div><div class="line">        // 停止 RunLoop</div><div class="line">        if (nil != self.threadRunLoop) &#123;</div><div class="line">            CFRunLoopStop([self.threadRunLoop getCFRunLoop]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>离开页面后, 可以发现 <code>NSLog(@&quot;--- asyncRun ----&quot;);</code> 停止了打印, 并且当前的 Controller 也 dealloc 了.</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RunLoop 常驻线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 逆向: dumpdecrypted 砸壳记]]></title>
      <url>/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/</url>
      <content type="html"><![CDATA[<p>今天是一个特别的日子, 高考的第一天, 祝各位莘莘学子金榜题名.</p>
<hr>
<p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/" target="_blank" rel="noopener">iOS 逆向: 砸壳</a> 介绍了如何使用工具 <code>Clutch</code> 对 iOS 的应用进行砸壳操作, 今天继续给大家分享使用另外一个工具 <code>dumpdecrypted</code> 对 APP 进行砸壳.</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>有些朋友就会问了, 既然 <code>Clutch</code> 已经很牛B了, 为什么还需要 <code>dumpdecrypted</code> 这个工具呢? </p>
<p>刚开始的时候, 我也很排斥使用 <code>dumpdecrypted</code> 这个工具的, 使用起来比较复杂, 并且套路不熟的情况下还很容易出错. </p>
<p>之前说过 <code>Clutch</code> 并不是万能的, 从 App Store 下载的 App(比如 WeChat)有些并不能使用 <code>Clutch</code> 来进行砸壳, 换句话说, 使用 <code>Clutch</code> 工具来进行砸壳会失败, 那么, <code>dumpdecrypted</code> 就登场了.</p>
<p>本次砸壳的系统依然是 <code>iOS10.3.x</code>, 工具使用 <code>dumpdecrypted</code>, 砸壳的对象是 WeChat 这个 App.</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>MacOS PC</li>
<li>越狱手机一台(我用的是iPhone6SPlus 10.3.1)</li>
<li>dumpdecrypted</li>
<li>class-dump</li>
<li>在 Cydia 中安装 cycript, 可以先不用管 cycript 是什么, 下载安装即可.</li>
<li>iFunBox 或者其他助手工具</li>
</ul>
<h2 id="编译-dumpdecrypted"><a href="#编译-dumpdecrypted" class="headerlink" title="编译 dumpdecrypted"></a>编译 dumpdecrypted</h2><p>去 <a href="https://github.com/stefanesser/dumpdecrypted" target="_blank" rel="noopener">Github</a> 下载 <code>dumpdecrypted</code> 源码, 源码就一个 C 源文件.</p>
<p>下载 zip 包之后, 解压, 如图:<br><img src="/upload/images/2018/06/07/1.jpg" alt=""></p>
<p>在当前目录, 执行 <code>make</code> 即可完成编译, 如图所示:<br><img src="/upload/images/2018/06/07/2.jpg" alt=""></p>
<p>编译成功后生成 <code>dumpdecrypted.dylib</code> 文件.</p>
<p>这里有个小插曲, 编译 <code>dumpdecrypted</code> 的时候报错了, 错误信息如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xcrun: error: SDK <span class="string">"iphoneos"</span> cannot be located</div><div class="line">xcrun: error: unable to lookup item <span class="string">'Path'</span> <span class="keyword">in</span> SDK <span class="string">'iphoneos'</span></div><div class="line">clang: warning: no such sysroot directory: <span class="string">'-F/System/Library/Frameworks'</span> [-Wmissing-sysroot]</div><div class="line">dumpdecrypted.c:27:10: fatal error: <span class="string">'stdio.h'</span> file not found</div></pre></td></tr></table></figure>
<p>无法找到对应的 <code>SDK</code> 和 <code>stdio.h</code> 文件, 这种问题大多数是 Xcode 路径造成的.</p>
<p>使用下面的命令看一下系统指向的 Xcode 路径:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select -p</div></pre></td></tr></table></figure>
<p>控制台输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Library/Developer/CommandLineTools</div></pre></td></tr></table></figure>
<p>显然不是 Xcode 的路径, 那只能重新切换一下其路径即指向正确的<code>Xcode</code> 路径即可.</p>
<p>命令如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo xcode-select --switch /Applications/Xcode.app</div></pre></td></tr></table></figure>
<p>再次编译 <code>dumpdecrypted</code> 即可成功完成.</p>
<h2 id="对-dumpecrypted-dylib-签名"><a href="#对-dumpecrypted-dylib-签名" class="headerlink" title="对 dumpecrypted.dylib 签名"></a>对 dumpecrypted.dylib 签名</h2><blockquote>
<p>如果不对该文件进行签名, 后续砸壳的操作会失败.</p>
</blockquote>
<p>先找到已经在电脑上面安装的苹果开发者证书, 操作如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">## 列出可签名证书, 找到 mac 上面已经安装的证书</div><div class="line">security find-identity -v -p codesigning</div></pre></td></tr></table></figure>
<p>为 dumpecrypted.dylib 签名, 命令如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">codesign --force --verify --verbose --sign <span class="string">"iPhone Developer: xxx xxxx (xxxxxxxxxx)"</span> dumpdecrypted.dylib</div></pre></td></tr></table></figure>
<p>其中, <code>&quot;iPhone Developer: xxx xxxx (xxxxxxxxxx)&quot;</code> 为你自己本机安装的开发者证书名称.</p>
<h2 id="SSH-连接手机"><a href="#SSH-连接手机" class="headerlink" title="SSH 连接手机"></a>SSH 连接手机</h2><p>使用 OpenSSH 让 Mac 和手机连接起来 这样可以很方便的在 Mac 终端使用 shell 命令来操作手机的目录了.</p>
<p>关于 OpenSSH 的使用请参考我之前的博文 <a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a>.</p>
<h2 id="查找目标-App-所在进程"><a href="#查找目标-App-所在进程" class="headerlink" title="查找目标 App 所在进程"></a>查找目标 App 所在进程</h2><ul>
<li>双击 Home 按键后, 手动杀掉 iPhone 上面所有在后台的 App.</li>
<li>Home 到手机桌面.</li>
<li>打开目标 App 即WeChat, 这里称之为 TargetApp.</li>
<li>Home 到手机桌面.</li>
<li>查看当前运行的所有进程, 命令如下:</li>
</ul>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -e</div></pre></td></tr></table></figure>
<p>看到这个货:<br><img src="/upload/images/2018/06/07/3.jpg" alt=""></p>
<p>在如下目录:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/containers/Bundle/Application/2837EC87-7C28-45C5-9309-24FACD3A97C9/WeChat.app/WeChat</div></pre></td></tr></table></figure>
<p><code>WeChat.app</code> 就是我们要找的 TargetApp.</p>
<p>连接 SSH 成功后, 在 MacOS 终端 <code>ls</code> 一下该目录, 可以发现 <code>WeChat.app</code> 躺在那里.<br><img src="/upload/images/2018/06/07/4.jpg" alt=""></p>
<h2 id="砸壳"><a href="#砸壳" class="headerlink" title="砸壳"></a>砸壳</h2><p><strong>1. 查找 Documents 目录</strong></p>
<p><code>WeChat</code> 为当前的进程目标执行文件名称, 从上面的图可以看出, 其对应的进程 id 是 <code>18983</code>.</p>
<p>在命令行中通过 cycript 执行如下操作:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cycript -p 18983</div></pre></td></tr></table></figure>
<p>再执行 OC 的方法, 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">NSFileManager</span> defaultManager] URLsForDirectory:<span class="built_in">NSDocumentDirectory</span> inDomains:<span class="built_in">NSUserDomainMask</span>][<span class="number">0</span>]</div></pre></td></tr></table></figure>
<p>可以看到对应的输出, 如下图所示, 这就是对应的 Documents 目录.<br><img src="/upload/images/2018/06/07/5.jpg" alt=""></p>
<blockquote>
<p>注意: 执行过程中, 在 iPhone 上面打开运行一下 App, 不然上面的执行一直卡在那里不动.</p>
</blockquote>
<p>找到目录如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/var/mobile/Containers/Data/Application/2EFA08B6-DD7B-41A6-92C9-C6115CA6DDA1/Documents/</div></pre></td></tr></table></figure>
<p>同理, 你也可以使用 iFunBox 查看该目录.</p>
<p><strong>2. 拷贝 dumpdecrypted.dylib</strong>.</p>
<p>拷贝 <code>dumpdecrypted.dylib</code> 这个之前编译签名好的文件到iPhone 上面该 APP 的 Documents 目录有两种方法.</p>
<p>第一种方法, 直接在 mac 上面拖拽 <code>dumpdecrypted.dylib</code> 到 iFunBox 显示的这个目录中, 这种方法比较简单且快.</p>
<p>第二种方法, 使用 <code>scp</code> 命令进行操作.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/dumpdecrypted.dylib root@192.168.99.231:/var/mobile/Containers/Data/Application/2EFA08B6-DD7B-41A6-92C9-C6115CA6DDA1/Documents/</div></pre></td></tr></table></figure>
<p><code>192.168.99.231</code> 是 iPhone 设备的 ip 地址.</p>
<p><strong>3. 退出 cycript, 回到命令行模式</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctrl + d</div></pre></td></tr></table></figure>
<p><strong>4. cd 到 Documents 目录</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /var/mobile/Containers/Data/Application/2EFA08B6-DD7B-41A6-92C9-C6115CA6DDA1/Documents/</div></pre></td></tr></table></figure>
<p><strong>5. 砸壳</strong></p>
<p>终端在 Documents 目录下面, 执行下面命令即可:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib /var/containers/Bundle/Application/2837EC87-7C28-45C5-9309-24FACD3A97C9/WeChat.app/WeChat</div></pre></td></tr></table></figure>
<p>执行过程显示如下:<br><img src="/upload/images/2018/06/07/6.jpg" alt=""></p>
<p>最后生成了 <code>WeChat.decrypted</code> 文件, 如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">-rw-r--r--  1 root   mobile 74513728 Jun  7 15:20 WeChat.decrypted</div><div class="line">drwxr-xr-x 14 mobile mobile      448 Jun  7 15:20 .</div><div class="line">-rw-r--r--  1 root   mobile   207760 Jun  7 15:15 dumpdecrypted.dylib</div><div class="line">-rw-r--r--  1 mobile mobile        8 Jun  7 13:22 db.globalconfig</div><div class="line">-rw-r--r--  1 mobile mobile       15 Jun  7 11:35 SafeMode.dat</div><div class="line">drwxr-xr-x 26 mobile mobile      832 Jun  7 11:35 MMappedKV</div><div class="line">drwxr-xr-x  3 mobile mobile       96 Jun  7 11:35 CrashReport</div><div class="line">-rw-r--r--  1 mobile mobile     1011 Jun  7 11:35 LocalInfo.lst</div><div class="line">drwxr-xr-x  5 mobile mobile      160 Jun  7 11:35 MemoryStat</div><div class="line">drwxr-xr-x  6 mobile mobile      192 Jun  7 11:35 00000000000000000000000000000000</div><div class="line">drwxr-xr-x 15 mobile mobile      480 Jun  5 13:43 MMResourceMgr</div><div class="line">-rw-r--r--  1 mobile mobile      592 Jun  5 13:43 heavy_user_id_mapping.dat</div><div class="line">drwxr-xr-x  2 mobile mobile       64 Jun  5 10:07 OpenImResource</div></pre></td></tr></table></figure>
<p>使用 <code>iFunBox</code> 或者 <code>scp</code> 命令将 <code>WeChat.decrypted</code> 文件导出到 mac 的任意目录即可.</p>
<p>后续会跟大家分享如何使用砸壳后的文件, 敬请期待.</p>
<h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote>
<p>基于 iOS10.3.1 进行的实践。</p>
</blockquote>
<ul>
<li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/" target="_blank" rel="noopener">iOS 逆向: dumpdecrypted 砸壳记</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/" target="_blank" rel="noopener">iOS 逆向: 砸壳</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">iOS 逆向: 查看系统文件目录和结构</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">dumpdecrypted 砸壳：导出头文件</a></p>
</li>
</ul>
<hr>
<p><strong>总有一天，你一定会感激正在努力的自己~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 逆向: 砸壳]]></title>
      <url>/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/</url>
      <content type="html"><![CDATA[<p>所谓的砸壳, 指的是将从 App Store 上面下载的 App 进行破解的过程. 从 App Store 上下载的 ipa 中的二进制文件是经过加密(加壳)的，需要通过破解才能让我们对其 <code>为所欲为</code>, 这里的破解就是通常所说的砸壳.</p>
<p>类似的, Android 应用(apk 文件)也有加壳操作, 如果想破解别人的 apk, 首先要进行砸壳操作.</p>
<h2 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h2><p>[1]. Clutch<br>[2]. iFunBox 或者 <code>pp 助手</code><br>[3]. 越狱手机一台(本人iPhone6sPlus iOS10.3.x 系统).<br>[4]. 可以正常使用 SSH 功能.</p>
<p>如果你还没有安装上面提到的除 <code>Clutch</code> 之外的工具, 请先阅读 <a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">iOS 逆向: 查看系统文件目录和结构</a> 这篇文章, 并安装对应的工具.</p>
<h2 id="安装-Clutch"><a href="#安装-Clutch" class="headerlink" title="安装 Clutch"></a>安装 Clutch</h2><p>可以在 Github 获取 <a href="https://github.com/KJCracks/Clutch" target="_blank" rel="noopener">Clutch 源码</a>, 然后自己在 MacOS 上面编译得到二进制文件.</p>
<p>也可以去直接下载已经编译好的 <a href="https://github.com/KJCracks/Clutch/releases" target="_blank" rel="noopener">二进制包</a>, 直接使用, 我是直接下载了已经编译好的二进制包的, 截止到写这篇文章为止, <code>Clutch</code> 版本为 <code>2.0.4</code>.</p>
<p>下载完成后, 我将其放到 <code>~/Downloads</code> 目录下面了.</p>
<p>准备好越狱设备, 保证可以正常连接 wifi, 使用 scp 命令将 <code>Clutch</code> 二进制文件复制到设备的系统目录中, 命令如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp ~/Downloads/Clutch root@192.168.91.126:/usr/bin</div></pre></td></tr></table></figure>
<p>其中, <code>192.168.91.126</code> 是我设备连接 wifi 后的 IP 地址.</p>
<p>复制成功后, 使用 iFunBox 可以看到 <code>Clutch</code> 静静地躺在那里.</p>
<p><img src="/upload/images/2018/05/13/6.jpg" alt=""></p>
<p>你可以使用 iFunBox 或者 <code>pp 助手</code>, 直接将 <code>~/Downloads/Clutch</code> 拖拽到 <code>/usr/bin</code> 目录.</p>
<h2 id="Clutch-的基本使用"><a href="#Clutch-的基本使用" class="headerlink" title="Clutch 的基本使用"></a>Clutch 的基本使用</h2><p>SSH 连接越狱设备, 开始使用 <code>Clutch</code>. 关于使用 SSH, 可以阅读一下 <a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a> 这篇文章.</p>
<p>如果你发现直接执行 <code>Clutch</code> 说没有权限之类的提示, 可以先将其授予可执行的权限.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x /usr/bin/Clutch</div></pre></td></tr></table></figure>
<p>Clutch 命令选项如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-b --binary-dump     Only dump binary files from specified bundleID</div><div class="line">-d --dump            Dump specified bundleID into .ipa file</div><div class="line">-i --print-installed Print installed application</div><div class="line">--clean              Clean /var/tmp/clutch directory</div><div class="line">--version            Display version and exit</div><div class="line">-? --help            Display this help and exit</div></pre></td></tr></table></figure>
<p><code>-b</code> 选项表示产出一个二进制文件, <code>-d</code> 选项表示产出一个 ipa 文件, <code>-i</code> 表示列出手机上面已经安装的 APP.</p>
<p>我们先看一下手机上已经安装的 App, 命令如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clutch -i</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/05/13/7.jpg" alt=""></p>
<p>这些 APP 前面的数字表示指定的 id. <code>-d</code> 和 <code>-b</code> 选项都需要指定这些 id.</p>
<h2 id="砸吧-骚年"><a href="#砸吧-骚年" class="headerlink" title="砸吧, 骚年"></a>砸吧, 骚年</h2><p>我们现在开始使用 <code>Clutch</code> 来对 APP 进行砸壳操作, 这里以已经安装的 App 序号为 8 的为例子.</p>
<p>使用下面的命令开始砸壳:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clutch -d 8</div></pre></td></tr></table></figure>
<p>效果如下图所示:</p>
<p><img src="/upload/images/2018/05/13/8.jpg" alt=""></p>
<p>砸壳成功后会在 <code>/private/var/mobile/Documents/Dumped</code>  这个目录生成对应的 <code>*.ipa</code> 文件.</p>
<p>砸壳后的 ipa 文件, 可以从 iFunBox 中复制到 MacOS 的目录中, 然后你就可以对该 ipa 进行下一步操作了, 比如获取图片/音频/视频等资源和对应的头文件. 关于这些后续的越狱工作, 我会在下几篇博客中分享给大家.</p>
<p>也许有人会说了, 我自己从 <code>pp 助手</code> 中备份指定的 App 就可以获取资源了, 不需要使用 <code>Clutch</code> 这么麻烦了. 高系统版本, <code>pp 助手</code> 是无法直接获取 ipa 文件的, 况且我们也不仅仅是想获取别人 APP 的资源文件.</p>
<p>当然了, 你可以从越狱 APP 市场直接下载已经被砸壳的 App 进行玩耍, 不需要自己千辛万苦的去砸壳了.</p>
<h2 id="Clutch-并不是万能的"><a href="#Clutch-并不是万能的" class="headerlink" title="Clutch 并不是万能的"></a>Clutch 并不是万能的</h2><p>上面大家可以看出, <code>Clutch</code> 是可以进行砸壳的并且也挺方便, 但 <code>Clutch</code> 并不是万能的, 也就是说, <code>Clutch</code> 不能将任意一个 App Store 下载 APP 进行砸壳.</p>
<p>拿上面序号为4 的微信来说, 执行下面命令报错:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Clutch -d 4</div></pre></td></tr></table></figure>
<p>砸壳执行过程如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Writing new checksum</div><div class="line">...</div><div class="line">FAILED: &lt;WeChat bundleID: com.tencent.xin&gt;</div><div class="line">Finished dumping com.tencent.xin <span class="keyword">in</span> 28.7 seconds</div></pre></td></tr></table></figure>
<p>还有一些 APP, 再被砸壳的时候会报如下的错误:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">could not obtain mach port either the process is dead</div></pre></td></tr></table></figure>
<p>虽然最新版本(2.0.4)说解决了该问题, 但是实际操作过程中, 还是会出现这个问题, 无法进行砸壳.</p>
<h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote>
<p>基于 iOS10.3.1 进行的实践。</p>
</blockquote>
<ul>
<li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/" target="_blank" rel="noopener">iOS 逆向: dumpdecrypted 砸壳记</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/" target="_blank" rel="noopener">iOS 逆向: 砸壳</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">iOS 逆向: 查看系统文件目录和结构</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">dumpdecrypted 砸壳：导出头文件</a></p>
</li>
</ul>
<hr>
<p><strong>特别喜欢上善如水这句话，你呢？</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 逆向: 查看系统文件目录和结构]]></title>
      <url>/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>在 <a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a> 中给大家分享了如何使用工具对 iOS10.3 的系统进行越狱和配置使用 SSH 的内容, 今天继续探逆向的知识.</p>
<p>手机被越狱之后, 我们首先要搞清楚是否能够正常的访问手机里面的文件和目录结构, 这些文件和目录结构究竟是什么样的, 虽然这些知识很基础, 但是还是很有必要去了解和学习的, 就算是为后期逆向 APP 做点准备吧. </p>
<h2 id="安装-iFunBox"><a href="#安装-iFunBox" class="headerlink" title="安装 iFunBox"></a>安装 iFunBox</h2><p><code>iFunBox</code> 是一个可以浏览 iPhone 文件目录的文件管理工具, 支持 MacOS 和 Windows 两个平台.</p>
<p>点击 <a href="http://www.i-funbox.com/" target="_blank" rel="noopener">下载地址</a> 可以去下载 MacOS 版本的 iFunBox. 关于 <code>iFunBox</code> 的介绍和特性可以去 <a href="http://www.i-funbox.com/en_about.html" target="_blank" rel="noopener">这里</a> 查阅.</p>
<p>最新版本是 <code>1.8</code>, 如图:</p>
<p><img src="/upload/images/2018/05/13/1.jpg" alt=""></p>
<p>手机插上 USB 连接上 Mac 电脑, iFunBox 就可以识别你的手机了, 如图所示:</p>
<p><img src="/upload/images/2018/05/13/2.jpg" alt=""></p>
<p>这个时候, 你点击 <code>Raw File System</code> 其实是看不到 iPhone 的系统目录的, 接下来在 iPhone 中安装另外一个软件就可以了.</p>
<h2 id="安装-Apple-File-Conduit”2”"><a href="#安装-Apple-File-Conduit”2”" class="headerlink" title="安装 Apple File Conduit”2”"></a>安装 Apple File Conduit”2”</h2><p>在 Cydia 中搜索 Apple File Conduit, 如下图所示.</p>
<p><img src="/upload/images/2018/05/13/3.jpg" alt=""></p>
<p>点击更改/安装即可.</p>
<p>如果你没有搜索到, 那么就需要自己添加对应的软件源地址.</p>
<p>点击【软件源】–编辑/添加 –输入源地址 <code>apt.25pp.com</code> – 添加源, 然后再去搜索 <code>Apple File Conduit</code> 安装.</p>
<p>安装好之后, 再用 <code>iFunBox</code>, 就可以正常查看 iPhone 的系统目录了, 如下图所示:</p>
<p><img src="/upload/images/2018/05/13/4.jpg" alt=""></p>
<p>看到这些目录, 是不是跟 linux 或者 MacOS 的目录有很多相似的地方, 哈哈.</p>
<h2 id="安装-pp-助手"><a href="#安装-pp-助手" class="headerlink" title="安装 pp 助手"></a>安装 pp 助手</h2><p>既然已经安装了 <code>iFunBox</code> 工具, 那为什么还需要安装 <code>pp 助手</code> 之类的工具呢? 其实, 这个看个人的需要吧, 在某种程度上, <code>pp 助手</code> 的界面和便捷性要比 <code>iFunBox</code> 好一点.</p>
<p>安装好 <code>pp 助手</code> 后, 点击 Tools/File Manager 显示的目录导航, 如图:</p>
<p><img src="/upload/images/2018/05/13/5.jpg" alt=""></p>
<p>可以看出, 相比 <code>iFunBox</code> 的界面显示, <code>pp 助手</code> 工具显得更加友好一些. </p>
<p>至于使用哪个工具, 要看个人爱好和自己的工作需要, 毕竟工具都是为了提高我们学习和工作效率的, 没有什么绝对的好与坏, 自己觉得合适顺手就好了, 最主要的是能够帮到自己. 我一般是将两者结合使用的, 当然你如果你有更好的工具也可以推荐给我.</p>
<h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote>
<p>基于 iOS10.3.1 进行的实践。</p>
</blockquote>
<ul>
<li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/" target="_blank" rel="noopener">iOS 逆向: dumpdecrypted 砸壳记</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/" target="_blank" rel="noopener">iOS 逆向: 砸壳</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">iOS 逆向: 查看系统文件目录和结构</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">dumpdecrypted 砸壳：导出头文件</a></p>
</li>
</ul>
<hr>
<p><strong>每一个关注，都会激励我继续前行</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 逆向: 越狱使用 SSH]]></title>
      <url>/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/</url>
      <content type="html"><![CDATA[<h2 id="越狱"><a href="#越狱" class="headerlink" title="越狱"></a>越狱</h2><p>使用苹果设备或者做 iOS 开发的朋友们, 几乎都应该听说过越狱这个词. 那么究竟什么是越狱呢?</p>
<blockquote>
<p>iOS越狱（英语：iOS Jailbreaking）是获取 iOS 设备的 Root 权限的技术手段。iOS 设备的 Root 权限一般是不开放的。由于获得了Root 权限，在越狱之前无法查看的 iOS 的文件系统也可查看.</p>
</blockquote>
<p>上面是维基百科的解释, 具体可以去 <a href="https://zh.wikipedia.org/wiki/%E8%B6%8A%E7%8D%84_(iOS" target="_blank" rel="noopener">iOS 越狱</a>) 了解一下. iOS 的越狱就类似 Android 获取 root 权限一样的道理.</p>
<p>手头上面之前闲置了一台 iPhone4s, 闲来无事就把他越狱了, 后面不知道怎么操作的, 手机变成了白苹果(开机就白屏, 无法进入系统), 最后没办法, 只能升级系统, 这台手机也算是废了. </p>
<p>当时使用的工具是 <a href="http://www.pangu.io/" target="_blank" rel="noopener">盘古越狱</a>, 越狱的 iOS 系统是 7.x. 现在 iOS 已经升级到 11.x 了, 很多 APP 和游戏已经不再支持 iOS8 以下的系统了, 系统的安全性也越来越好了, 越狱破解的难度也随之提高了, 目前市面上能越狱的最高版本应该是 10.3.x 的系统(截止到该篇文章写的时候). </p>
<p>为了能够分析和学习一些优秀 App 的设计, 我索性买了台iPhone6sPlus 拿来越狱, 所以接下来的分享都是基于这台手机的.</p>
<p><strong>越狱工具和设备</strong></p>
<p>[1]. 设备 iPhone6s Plus, 系统 iOS10.3.2<br>[2]. 越狱工具: 爱思助手和 doubleH3lix.ipa</p>
<p>安装并打开 pc 上面的 <code>爱思助手</code> 直接开始越狱, 爱思助手会帮您在设备上安装 <code>doubleH3lix</code>. 运行 <code>doubleH3lix</code> 应用，点击 <code>jailbreak</code> 按钮，等待设备自行重启.</p>
<p>手机重启后, 你会看到 <code>Cydia</code> 静静的呆在那里了, 这种方式的越狱属于非完美越狱, 换句话说就是没有真正的破解 iOS 系统.</p>
<p>如果发现手机断电关机或者重启后 <code>Cydia</code> 一打开就闪退, 就使用 <code>doubleH3lix</code> 重新越狱就可以了, 如果还是不行就需要重新使用 <code>爱思助手</code> 了.</p>
<p>参考越狱教程 <a href="https://weibo.com/ttarticle/p/show?id=2309404217487167220184" target="_blank" rel="noopener">64位设备iOS 10-10.3.3爱思助手一键越狱教程</a>.</p>
<h2 id="安装-iOS-终端"><a href="#安装-iOS-终端" class="headerlink" title="安装 iOS 终端"></a>安装 iOS 终端</h2><p>安装终端, 在 <code>Cydia</code> 中搜索 <code>MTerminal</code>, 安装即可.</p>
<p><img src="/upload/images/2018/05/12/1.jpg" alt=""></p>
<p>安装好终端工具后，打开终端，输入</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su</div></pre></td></tr></table></figure>
<p>紧接着让你输入密码，默认的 root 用户密码是 <code>alpine</code>. 输入改密码回车即可。</p>
<p>为了安全起见, 修改默认密码 <code>alpine</code>.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd</div></pre></td></tr></table></figure>
<p>连续输入相同的密码即为呢修改后的新密码。</p>
<h2 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h2><p>配置和使用 SSH 功能是后续越狱工作的基础, 这样就可以在 MacOS 的终端中访问 iOS 系统了, 各种 shell 命令让你倍感亲切, 所以大家尽量要完成该步骤. 试想一下, 本来手机上面文字输入的体验就不好, 还需要在 iPhone 设备上面的终端中敲着命令…没法忍!</p>
<p>iOS 10 越狱以后自带了 SSH, 所以不需要单独去 Cydia 下载和安装 <code>OpenSSH</code>.</p>
<p>很多人越狱后, 发现也安装了 OpenSSH, 但是一旦连接 iPhone 设备就无法连接甚至报错. 如果你已经安装了 OpenSSH 并且无法使用 SSH 来操作你的 iPhone 设备, 请继续往下看.</p>
<p>[1]. 打开 Cydia, 分别搜索 OpenSSL 和 Openssh, 然后分别卸载 OpenSSL 和 Openssh.</p>
<p>[2]. 打开 Cydia, 添加源：<code>http://cydia.ichitaso.com/test</code></p>
<p><img src="/upload/images/2018/05/12/2.jpg" alt=""></p>
<p>点击左上角的 <code>添加</code>, 在弹框中输入对应的源地址即可.</p>
<p>[3]. 在 Cydia 中搜索 <code>dropbear</code> 并安装.</p>
<p><img src="/upload/images/2018/05/12/3.jpg" alt=""></p>
<p>安装即可.</p>
<p>安装成功后, 一般就可以正常使用 SSH 功能了.</p>
<p>打开 MacOS 终端, 开始使用 SSH 连接你的 iPhone 设备.</p>
<p>[1]. 查看 iPhone 设备的(wifi) IP 地址. 如我的是 <code>192.168.1.105</code>.<br>[2]. 使用 MacOS 终端, 输入:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@192.168.1.105</div></pre></td></tr></table></figure>
<p>成功的话, 它先会警告你是否继续操作, 输入 <code>yes</code> 即可, 然后又提示你输入 root 密码, 密码就是前面说的修改后的密码. 如果你没有修改密码, 那就是 <code>alpine</code>. 操作流程如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'192.168.1.105 (192.168.1.105)'</span> can<span class="string">'t be established.</span></div><div class="line"><span class="string">ECDSA key fingerprint is SHA256:ANF7Cvc1yM/ZdaHyz9V1EHjG115cylIcHWyOzCL+kzs.</span></div><div class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></div><div class="line"><span class="string">Warning: Permanently added '</span>192.168.1.105<span class="string">' (ECDSA) to the list of known hosts.</span></div><div class="line"><span class="string">root@192.168.1.105'</span>s password:</div></pre></td></tr></table></figure>
<p>之前在 iOS 10.2.x 越狱修改对应的配置文件, 就可以使用 SSH 功能了, 但是在 iOS10.3.x 无济于事, 如果你是iOS 10.2.x 的越狱手机, 可以参考本文末附录配置 SSH, 也是我之前实践的结果.</p>
<h2 id="usbmuxd"><a href="#usbmuxd" class="headerlink" title="usbmuxd"></a>usbmuxd</h2><p>上面是通过 wifi 来连接 iPhone 设备的, 其实还有一种方式, 就是借助于 <code>usbmuxd</code> 这个工具通过 USB 连接(手机数据线连接电脑)不需要 wifi, USB连接比 wifi 响应速度快，且无网络环境的限制.</p>
<p>使用 usbmuxd 的前提是你的手机可以正常的使用 SSH 功能, 否则 usbmuxd 也无法救你.</p>
<p>[1].MacOS 安装 <code>usbmuxd</code></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install usbmuxd</div></pre></td></tr></table></figure>
<p>[2]. 使用 <code>usbmuxd</code> 自带工具 <code>iproxy</code>.</p>
<p><code>iproxy</code> 可以快捷的操作连接 iPhone 等操作.</p>
<p>MacOS 上只支持 4 位的端口号，需要把 iPhone 的默认端口 22 映射到 Mac 上面一个 4 位端口号的端口上面，相当于建立一个 Mac 和 iPhone 之间的通道. <code>iproxy</code> 具体使用, 后面再讲. 大家先安装一下即可.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">iproxy 5678 22</div><div class="line">waiting <span class="keyword">for</span> connection</div></pre></td></tr></table></figure>
<p>以上命令就是把当前连接设备的 <code>22</code> 端口(SSH端口)映射到电脑的 <code>5678</code> 端口，那么想和设备 <code>22</code> 端口通信，直接和本地的 <code>5678</code> 端口通信就可以了.</p>
<p>终端提示 <code>waiting for connection</code>, 表示这两个端口之间已经可以通信了，保留当前终端窗口(如果关闭就停止端口之间的通信了)，新建另一个终端输入，默认密码 root 密码.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -p 5678 root@127.0.0.1</div></pre></td></tr></table></figure>
<p>执行过程如下, 类似上面通过 wifi 操作的方式.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">The authenticity of host <span class="string">'[127.0.0.1]:5678 ([127.0.0.1]:5678)'</span> can<span class="string">'t be established.</span></div><div class="line"><span class="string">ECDSA key fingerprint is SHA256:ANF7Cvc1yM/ZdaHyz9V1EHjG115cylIcHWyOzCL+kzs.</span></div><div class="line"><span class="string">Are you sure you want to continue connecting (yes/no)? yes</span></div><div class="line"><span class="string">Warning: Permanently added '</span>[127.0.0.1]:5678<span class="string">' (ECDSA) to the list of known hosts.</span></div><div class="line"><span class="string">root@127.0.0.1'</span>s password:</div></pre></td></tr></table></figure>
<p>接下来, 你就可以在 MacOS 终端上面操作你的 iPhone 设备了, 尽情的享受 shell 命令吧。不使用的时候, 输入 <code>exit</code> 即可退出 SSH.</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p><strong>[1]. iOS 10.2.x 越狱使用 SSH 功能.</strong></p>
<p>首先修改 root 密码。</p>
<p>iOS 10.2 (越狱后)自带 <code>OpenSSH</code>，不需要自己重新安装 OpenSSH, 但是需要修改一个文件才能使用。</p>
<p>在手机上安装 <code>MTERMINAL</code>，运行 <code>su</code>，输入 <code>root</code> 密码，执行:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux|grep dropbear</div></pre></td></tr></table></figure>
<p>如果你看到的进程没有 dropbear, 执行:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/dropbear -F -R -p 22</div></pre></td></tr></table></figure>
<p>然后就可以连接了，重启依然有效。</p>
<p>如果你看到进程是这样的:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/<span class="built_in">local</span>/bin/dropbear -F -R -p 127.0.0.1:22</div></pre></td></tr></table></figure>
<p>意思是只能数据线重定向连接 SSH，如果你想改成 WIFI 可以访问, 需要修改 <code>/private/var/containers/Bundle/Application/D9185B6D-EA9E-4678-B59C-BF43DEFE67BF/yalu102.app/dropbear.plist</code><br>把里面有个参数 <code>127.0.0.1:22</code> 改成<code>22</code> 保存，重启手机即可.</p>
<p><strong>[2]. 使用 <code>usbmuxd</code> 无法使用 SSH</strong></p>
<p>执行 <code>ssh -p 5678 root@127.0.0.1</code> 后报错，如下:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh_exchange_identification: <span class="built_in">read</span>: Connection reset by peer</div></pre></td></tr></table></figure>
<p>这种情况一般是没有正确的使用数据线连接 Mac 电脑，使用数据线正常连接 Mac 电脑即可解决问题。</p>
<h2 id="越狱系列文章"><a href="#越狱系列文章" class="headerlink" title="越狱系列文章"></a>越狱系列文章</h2><blockquote>
<p>基于 iOS10.3.1 进行的实践。</p>
</blockquote>
<ul>
<li><p><a href="http://www.veryitman.com/2018/06/07/iOS-%E9%80%86%E5%90%91-dumpdecrypted-%E7%A0%B8%E5%A3%B3%E8%AE%B0/" target="_blank" rel="noopener">iOS 逆向: dumpdecrypted 砸壳记</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E7%A0%B8%E5%A3%B3/" target="_blank" rel="noopener">iOS 逆向: 砸壳</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/13/iOS-%E9%80%86%E5%90%91-%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E5%92%8C%E7%BB%93%E6%9E%84/" target="_blank" rel="noopener">iOS 逆向: 查看系统文件目录和结构</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/05/12/iOS-%E9%80%86%E5%90%91-%E8%B6%8A%E7%8B%B1%E4%BD%BF%E7%94%A8-SSH/" target="_blank" rel="noopener">iOS 逆向: 越狱使用 SSH</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2019/04/07/dumpdecrypted-%E7%A0%B8%E5%A3%B3%EF%BC%9A%E5%AF%BC%E5%87%BA%E5%A4%B4%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">dumpdecrypted 砸壳：导出头文件</a></p>
</li>
</ul>
<hr>
<p><strong>关注不是目的，交流、学习，一起进步才是关键</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS安全 越狱 jailbreak </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RunLoop: NSTimer 实现常驻线程的问题]]></title>
      <url>/2018/05/06/RunLoop-NSTimer-%E5%AE%9E%E7%8E%B0%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="可行性"><a href="#可行性" class="headerlink" title="可行性"></a>可行性</h2><p>在 <a href="http://www.veryitman.com/2018/04/21/%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/" target="_blank" rel="noopener">常驻线程是一种什么体验</a> 这篇文章中给大家分享了如何利用 RunLoop 的特性, 结合 <code>NSMachPort</code> 实现一个 <code>常驻线程</code> 的主题内容.</p>
<p>今天我们探讨一下使用 <code>NSTimer</code> 如何实现 <code>常驻线程</code> 以及注意事项.</p>
<p>从 RunLoop 的特性来看, 只要有 Source 或者 Timer 都会使其能自循环使用, 不会立即终止当前线程的执行, 所以从理论上来看 <code>NSTimer</code> 是可以达到创建 <code>常驻线程</code> 的目的的.</p>
<h2 id="开始实践"><a href="#开始实践" class="headerlink" title="开始实践"></a>开始实践</h2><p>完整的例子代码, 可以从文章的附录获取和查看, 这里只给出核心代码.</p>
<p><strong><em>创建线程</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (NSThread *)permanentThread &#123;</div><div class="line">    </div><div class="line">    static NSThread *thread = nil;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        </div><div class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</div><div class="line">        [thread setName:@&quot;veryitman-thread&quot;];</div><div class="line">        </div><div class="line">        // 同一个线程连续多次 start 会导致 crash</div><div class="line">        [thread start];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return thread;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>线程执行的函数</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (void)asyncRun &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">        </div><div class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">        </div><div class="line">        // 保持常驻线程: 使用 NSTimer</div><div class="line">        [self _attachTimerToRunLoop];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</div><div class="line">        </div><div class="line">        // 执行其他逻辑</div><div class="line">        //...</div><div class="line">        </div><div class="line">        // 手动开启 RunLoop</div><div class="line">        [runLoop run];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong><em>创建定时器</em></strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)_attachTimerToRunLoop &#123;</div><div class="line">    </div><div class="line">    if (nil == self.timer) &#123;</div><div class="line">        </div><div class="line">        // scheduledTimerWithTimeInterval 这种方式</div><div class="line">        // 创建的 Timer 会默认加入到当前的 RunLoop 的 NSDefaultRunLoopMode 中</div><div class="line">        _timer = [NSTimer scheduledTimerWithTimeInterval:2</div><div class="line">                                                  target:self</div><div class="line">                                                selector:@selector(runTimer)</div><div class="line">                                                userInfo:nil</div><div class="line">                                                 repeats:YES];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出, <code>_attachTimerToRunLoop</code> 中是将 timer 加入到当前的 RunLoop 当中了. 这里注意, repeats 值被设置为 <code>YES</code> 了.</p>
<p>跟之前一样, 可以使用点击事件来模拟和验证常驻线程的有效性.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    </div><div class="line">    // 模拟在指定线程上面再次执行方法</div><div class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</div><div class="line">    </div><div class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>每点击一次屏幕, 都会对应执行 <code>runAnyTime</code> 里面的内容.</p>
<h2 id="对-repeat-的思考"><a href="#对-repeat-的思考" class="headerlink" title="对 repeat 的思考"></a>对 repeat 的思考</h2><p>在上面的示例中, 我将 <code>repeat</code> 参数设置为 <code>YES</code>, 试想一下如果把 <code>repeat</code> 参数设置为 <code>NO</code>, 会不会造成常驻线程失效呢?</p>
<p>动手试试…</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)_attachTimerToRunLoop &#123;</div><div class="line">    </div><div class="line">    if (nil == self.timer) &#123;</div><div class="line">        </div><div class="line">        // scheduledTimerWithTimeInterval 这种方式</div><div class="line">        // 创建的 Timer 会默认加入到当前的 RunLoop 的 NSDefaultRunLoopMode 中</div><div class="line">        _timer = [NSTimer scheduledTimerWithTimeInterval:2</div><div class="line">                                                  target:self</div><div class="line">                                                selector:@selector(runTimer)</div><div class="line">                                                userInfo:nil</div><div class="line">                                                 repeats:NO];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次点击屏幕若干次, 同样会执行对应函数里面的内容. 这就说明了即使将 <code>repeat</code> 参数设置为 <code>NO</code>, 也不会影响常驻线程.</p>
<p>那我们再来点具有挑战的活动…</p>
<p>将当前页面加入 <code>UIScrollview</code> 这个视图, 还是保持 <code>repeat</code> 参数设置为 <code>NO</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    self.view.backgroundColor = [UIColor lightGrayColor];</div><div class="line">    self.navigationItem.title = @&quot;NSTimer 创建常驻线程&quot;;</div><div class="line">    </div><div class="line">    // 加入滚动视图</div><div class="line">    _scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];</div><div class="line">    [self.view addSubview:self.scrollView];</div><div class="line">    self.scrollView.contentSize = CGSizeMake(1000, 1000);</div><div class="line">    self.scrollView.delegate = self;</div><div class="line">    </div><div class="line">    // 启动线程</div><div class="line">    [self permanentThread];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为加入了滚动视图, 我们换一种方式来模式和验证常驻线程.</p>
<p>在 <code>UIScrollview</code> 代理中来模拟, 示例如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView &#123;</div><div class="line">    </div><div class="line">    // 模拟在指定线程上面再次执行方法</div><div class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</div><div class="line">    </div><div class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行后进入该页面, 可以发现常驻线程被终止了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">veryitman--timerRun.</div><div class="line">veryitman--asyncRun. End Run.</div></pre></td></tr></table></figure>
<p>当除我以为更换一下模式即使 将 <code>repeat</code> 参数设置为 <code>NO</code>, 也不会出现常驻线程被终止的问题. 如下面的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_timer = [NSTimer timerWithTimeInterval:2 target:self selector:@selector(runTimer) userInfo:nil repeats:NO];</div><div class="line">[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</div></pre></td></tr></table></figure>
<p>这样更换模式为 <code>NSRunLoopCommonModes</code> 也不行.</p>
<p>在这种情况(有滚动视图的)下, 将 <code>repeat</code> 参数设置为 <code>YES</code> 就不会导致常驻线程被终止了, 无论哪种方式创建的 Timer.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.子线程创建中的 RunLoop 的模式不会与主线程中 RunLoop 的模式冲突, 各自运行在各自的 mode 当中. </p>
<p>2.使用 <code>NSTimer</code> 来创建常驻线程, 在有 <code>UIScrollview</code> 或者其子类的情况下, 需要将 <code>repeats</code> 设置为 <code>YES</code>, 否则不会创建常驻线程. 没有滚动视图的情况下, <code>repeats</code> 设置为 <code>NO</code> 也没有关系.</p>
<p>3.创建 NSTimer</p>
<p>下面两种创建 Timer 的效果是一致的.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[NSTimer scheduledTimerWithTimeInterval:2</div><div class="line">                  target:self</div><div class="line">                selector:@selector(runTimer)</div><div class="line">                userInfo:nil</div><div class="line">                 repeats:YES];</div></pre></td></tr></table></figure>
<p><code>scheduledTimerWithTimeInterval</code> 默认会将 Timer 加入到当前的 RunLoop 中.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[NSTimer timerWithTimeInterval:2 target:self selector:@selector(runTimer) userInfo:nil repeats:NO];</div><div class="line">[[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSDefaultRunLoopMode];</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>完整示例代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div></pre></td><td class="code"><pre><div class="line">#import &quot;MZTimerPermanentThreadController.h&quot;</div><div class="line"></div><div class="line">@interface MZTimerPermanentThreadController () &lt;UIScrollViewDelegate&gt;</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSTimer *timer;</div><div class="line"></div><div class="line">@property (nonatomic, strong) UIScrollView *scrollView;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@implementation MZTimerPermanentThreadController</div><div class="line"></div><div class="line">- (void)dealloc &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;veryitman---MZTimerPermanentThreadController dealloc.&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    self.view.backgroundColor = [UIColor lightGrayColor];</div><div class="line">    self.navigationItem.title = @&quot;NSTimer 创建常驻线程&quot;;</div><div class="line">    </div><div class="line">    // 加入滚动视图</div><div class="line">    _scrollView = [[UIScrollView alloc] initWithFrame:self.view.bounds];</div><div class="line">    [self.view addSubview:self.scrollView];</div><div class="line">    self.scrollView.contentSize = CGSizeMake(1000, 1000);</div><div class="line">    self.scrollView.delegate = self;</div><div class="line">    </div><div class="line">    // 启动线程</div><div class="line">    [self permanentThread];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</div><div class="line">    </div><div class="line">    [super viewDidDisappear:animated];</div><div class="line">    </div><div class="line">    // 取消线程</div><div class="line">    // 实际业务场景中自行决定 canCancel 的设置, 这里只是示例</div><div class="line">    BOOL canCancel = YES;</div><div class="line">    if (canCancel) &#123;</div><div class="line">        </div><div class="line">        [self.timer invalidate];</div><div class="line">        _timer = nil;</div><div class="line">        </div><div class="line">        [[self permanentThread] cancel];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)scrollViewDidEndDecelerating:(UIScrollView *)scrollView &#123;</div><div class="line">    </div><div class="line">    // 模拟在指定线程上面再次执行方法</div><div class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</div><div class="line">    </div><div class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    </div><div class="line">    // 模拟在指定线程上面再次执行方法</div><div class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</div><div class="line">    </div><div class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSThread *)permanentThread &#123;</div><div class="line">    </div><div class="line">    static NSThread *thread = nil;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        </div><div class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</div><div class="line">        [thread setName:@&quot;veryitman-thread&quot;];</div><div class="line">        </div><div class="line">        // 同一个线程连续多次 start 会导致 crash</div><div class="line">        [thread start];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return thread;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)asyncRun &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">        </div><div class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">        </div><div class="line">        // 保持常驻线程: 使用 NSTimer</div><div class="line">        [self _attachTimerToRunLoop];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</div><div class="line">        </div><div class="line">        // 执行其他逻辑</div><div class="line">        //...</div><div class="line">        </div><div class="line">        // 手动开启 RunLoop</div><div class="line">        [runLoop run];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)runAnyTime &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;veryitman--runAnyTime. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)_attachTimerToRunLoop &#123;</div><div class="line">    </div><div class="line">    if (nil == self.timer) &#123;</div><div class="line">        </div><div class="line">        // scheduledTimerWithTimeInterval 这种方式</div><div class="line">        // 创建的 Timer 会默认加入到当前的 RunLoop 的 NSDefaultRunLoopMode 中</div><div class="line">        _timer = [NSTimer scheduledTimerWithTimeInterval:2</div><div class="line">                                                  target:self</div><div class="line">                                                selector:@selector(runTimer)</div><div class="line">                                                userInfo:nil</div><div class="line">                                                 repeats:YES];</div><div class="line">        </div><div class="line">#if 0</div><div class="line">        _timer = [NSTimer timerWithTimeInterval:2 target:self selector:@selector(runTimer) userInfo:nil repeats:NO];</div><div class="line">        [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</div><div class="line">#endif</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)runTimer &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;--veryitman--timerRun.&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RunLoop 常驻线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[常驻线程是一种什么体验]]></title>
      <url>/2018/04/21/%E5%B8%B8%E9%A9%BB%E7%BA%BF%E7%A8%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E4%BB%80%E4%B9%88%E4%BD%93%E9%AA%8C/</url>
      <content type="html"><![CDATA[<h2 id="简说-RunLoop"><a href="#简说-RunLoop" class="headerlink" title="简说 RunLoop"></a>简说 RunLoop</h2><p>关于 iOS RunLoop 网上很多文章都有介绍过, 很多技术面试官也会问关于 RunLoop 的相关知识. 我把自己工作中遇到的问题和总结的经验分享出来(会做成一系列的文章), 也算是对自己的一个总结和沉淀, 欢迎大家交流.</p>
<p>网上的文章基本都是针对于 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html" target="_blank" rel="noopener">Apple Developer Doc - Run Loops</a> 这篇来展开的, 所以建议大家认真的去通读这篇文章, 并写代码验证, 实践.</p>
<p>可以简单粗暴的这么理解一下 RunLoop, 基于事件驱动的死循环(由内核来调度和管理的), 在需要处理事情的时候就出来干点事, 否则休眠待命.<br>RunLoop 的核心是基于 <code>machport</code> 的，其进入休眠时调用的函数是 mach_msg().</p>
<p>类似下面的代码来说明一下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">BOOL stopRunning = NO;</div><div class="line"></div><div class="line">do &#123;</div><div class="line">   </div><div class="line">   // 处理 App 中各种操作各种事件</div><div class="line">   // 点击屏幕, 触摸到硬件也会唤醒 RunLoop</div><div class="line">   </div><div class="line">  &#125; while(!stopRunning);</div></pre></td></tr></table></figure>
<p>说到这里, 随便提及一下, 学习过 Android 开发的同事应该和好理解 RunLoop 了,  iOS 的 RunLoop 跟 Android 的 Looper 机制几乎一样, 只是不同的系统之间实现有差异罢了!</p>
<p>有兴趣的朋友可以看一下我之前写的文章 <a href="https://blog.csdn.net/veryitman/article/details/6384641" target="_blank" rel="noopener">Handler: 更新UI的方法</a>.</p>
<hr>
<p>今天跟大家分享如何在 iOS 中结合 RunLoop 和 machport 实现常驻线程, 先跟着实例走, 后续再去总结 RunLoop 的各种细节点.</p>
<h2 id="神奇的-main"><a href="#神奇的-main" class="headerlink" title="神奇的 main"></a>神奇的 main</h2><p>开发过 iOS 应用中的朋友, 对 <code>main.m</code> 再也熟悉不过了, <code>main</code> 函数正是应用的入口函数.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将 <code>return</code> 代码分开写, 看看有什么蛛丝马迹可寻.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        int ret = UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--- UIApplicationMain end.&quot;);</div><div class="line">        </div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无论如何你也看不到日志 <code>veryitman--- UIApplicationMain end.</code> 的打印, 这说明 <code>UIApplicationMain</code> 一直在呵护着 APP 的运行, 哈哈.</p>
<p>我们不妨再改一次, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">int main(int argc, char * argv[]) &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再去运行 APP, 你会发现根本没有让 APP 运行起来, 再次说明没有了 <code>UIApplicationMain</code> 的呵护, APP 无法起死回生.</p>
<p>猜测在 <code>UIApplicationMain</code> 函数中，开启了和主线程相关的 RunLoop，使 <code>UIApplicationMain</code> 不会返回一直在运行中，从而保证了程序的持续运行, 最大的功臣就是  RunLoop.</p>
<h2 id="普通线程"><a href="#普通线程" class="headerlink" title="普通线程"></a>普通线程</h2><p>一般我们开启的线程在执行完任务后, 就会结束该线程. 除非你写了类似下面的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while(1) &#123;</div><div class="line">    // 业务处理</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while (条件满足) &#123;</div><div class="line">    // 业务处理</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>开启一个线程</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (NSThread *)permanentThread &#123;</div><div class="line">    </div><div class="line">    static NSThread *thread = nil;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line"></div><div class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</div><div class="line">        [thread setName:@&quot;veryitman-thread&quot;];</div><div class="line">        </div><div class="line">        // 同一个线程连续多次 start 会导致 crash</div><div class="line">        [thread start];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return thread;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行对应的 <code>asyncRun</code> 函数, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">- (void)asyncRun &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">        </div><div class="line">        // 执行其他逻辑</div><div class="line">        //...</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现 <code>asyncRun</code> 很快就可以执行完成 (End Run).</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">veryitman--asyncRun. Current Thread: &lt;NSThread: 0x60000066c400&gt;&#123;number = 3, name = veryitman-thread&#125;</div><div class="line">veryitman--asyncRun. End Run.</div></pre></td></tr></table></figure>
<h2 id="子线程开启-RunLoop"><a href="#子线程开启-RunLoop" class="headerlink" title="子线程开启 RunLoop"></a>子线程开启 RunLoop</h2><p>主线程是默认开启 RunLoop 的即 mainRunLoop 是系统默认开启的, 但是子线程中的 RunLoop 需要我们自己手动开启.</p>
<blockquote>
<p>关于为什么子线程中需要手动开启, 后续文章结合源码给大家分析, 这里暂时可以理解为获取 RunLoop 对象是一种懒加载模式. 只不过主线程中, 系统帮我们开启了, 然而子线程中需要我们手动开启而已.</p>
</blockquote>
<p>类似这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (void)asyncRun &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">        </div><div class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</div><div class="line">        </div><div class="line">        // 执行其他逻辑</div><div class="line">        //...</div><div class="line">        </div><div class="line">        // 手动开启 RunLoop</div><div class="line">        [runLoop run];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制台可以看到输出:</p>
<p><img src="/upload/images/2018/04/21/1.jpg" alt="1"></p>
<p>RunLoop 没有任何输入源(input source) 和定时器(timer), 这时即使开启了 RunLoop 也不会让其等待执行, 换句话说会立即结束当前的 RunLoop.</p>
<p>既然这样我们给子线程的 RunLoop 添加源或者定时器即可. 这里以添加 NSPort 为例.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">- (void)asyncRun &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">        </div><div class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">        </div><div class="line">        // 添加 source</div><div class="line">        NSPort *port = [NSMachPort port];</div><div class="line">        [runLoop addPort:port forMode:NSRunLoopCommonModes];</div><div class="line">               </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</div><div class="line">        </div><div class="line">        // 执行其他逻辑</div><div class="line">        //...</div><div class="line">        </div><div class="line">        // 手动开启 RunLoop</div><div class="line">        [runLoop run];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次运行, 你会发现 <code>End Run</code> 这个 Log 是不会打印出来的. 对应当前的 RunLoop 也有了源和定时器, 如图所示:<br><img src="/upload/images/2018/04/21/2.jpg" alt="1"></p>
<p>关于定时器和 RunLoop 的结合, 下篇再分享. </p>
<p>现在有这样一个需求, 需要在指定的线程中执行某项任务, 显然使用上面的方法来满足需求, 下面进入今天的正题.</p>
<h2 id="验证常驻线程"><a href="#验证常驻线程" class="headerlink" title="验证常驻线程"></a>验证常驻线程</h2><p>一定到 <code>常驻</code> 这个词, 就知道是能够让该线程随时待命, 保证其不挂掉.</p>
<p>iOS 中默认就有个主线程即 <code>main 线程</code>, 我们的 UI 线程指的就是主线程, 一般都是在主线程中操作 UI, 从某个角度来说, 主线程就是一个常驻线程.</p>
<p>我们开启其他线程, 目的是为了异步完成一些任务, 这些任务一般都比较耗时, 如果放在主线程当中完成这些任务就会导致主线程的卡顿, 用户体验极其差. </p>
<p>说了这么多, 也许你会问, 为什么要常驻线程呢?</p>
<p>频繁的创建和销毁线程，会造成资源(主要是内存)的浪费, 我们为什么不让频繁使用的子线程常驻在内存中, 想用的时候就用, 不用的时候让他休眠呢?! </p>
<p>上面已经使用 RunLoop 来实现了让线程长时间存活而不被销毁了.</p>
<p>用 <code>touchesBegan</code> 来模拟在指定线程中再次执行任务(runAnyTime)的方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    </div><div class="line">    // 模拟在指定线程上面再次执行方法</div><div class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</div><div class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)runAnyTime &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;veryitman--runAnyTime. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应上面的 <code>asyncRun</code> 实现即可, 你会发现在当前页面每次点击屏幕都会执行 <code>runAnyTime</code>.</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>代码的完整实现</p>
<blockquote>
<p>常驻线程, 可以参考具体的注释.</p>
</blockquote>
<p><strong>MZCreatePermanentThreadController.m</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">@implementation MZCreatePermanentThreadController</div><div class="line"></div><div class="line">- (void)dealloc &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;veryitman---MZCreatePermanentThreadController dealloc.&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    self.view.backgroundColor = [UIColor lightGrayColor];</div><div class="line">    self.navigationItem.title = @&quot;创建常驻线程&quot;;</div><div class="line">    </div><div class="line">    // 启动线程</div><div class="line">    [self permanentThread];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidDisappear:(BOOL)animated &#123;</div><div class="line">    </div><div class="line">    [super viewDidDisappear:animated];</div><div class="line">    </div><div class="line">    // 取消线程</div><div class="line">    // 实际业务场景中自行决定 canCancel 的设置, 这里只是示例</div><div class="line">    BOOL canCancel = YES;</div><div class="line">    if (canCancel) &#123;</div><div class="line">        [[self permanentThread] cancel];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event &#123;</div><div class="line">    </div><div class="line">    // 模拟在指定线程上面再次执行方法</div><div class="line">    SEL seltor = NSSelectorFromString(@&quot;runAnyTime&quot;);</div><div class="line">    </div><div class="line">    [self performSelector:seltor onThread:[self permanentThread] withObject:nil waitUntilDone:NO];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (NSThread *)permanentThread &#123;</div><div class="line">    </div><div class="line">    static NSThread *thread = nil;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line"></div><div class="line">        thread = [[NSThread alloc] initWithTarget:self selector:@selector(asyncRun) object:nil];</div><div class="line">        [thread setName:@&quot;veryitman-thread&quot;];</div><div class="line">        </div><div class="line">        // 同一个线程连续多次 start 会导致 crash</div><div class="line">        [thread start];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return thread;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)asyncRun &#123;</div><div class="line">    </div><div class="line">    @autoreleasepool &#123;</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">        </div><div class="line">        NSRunLoop *runLoop = [NSRunLoop currentRunLoop];</div><div class="line">        </div><div class="line">        // 添加 source</div><div class="line">        NSPort *port = [NSMachPort port];</div><div class="line">        [runLoop addPort:port forMode:NSRunLoopCommonModes];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. Current RunLoop: %@&quot;, runLoop);</div><div class="line">        </div><div class="line">        // 执行其他逻辑</div><div class="line">        //...</div><div class="line">        </div><div class="line">        // 手动开启 RunLoop</div><div class="line">        [runLoop run];</div><div class="line">        </div><div class="line">        NSLog(@&quot;veryitman--asyncRun. End Run.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)runAnyTime &#123;</div><div class="line">    </div><div class="line">    NSLog(@&quot;veryitman--runAnyTime. Current Thread: %@&quot;, [NSThread currentThread]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/CocoaEncyclopedia/Toll-FreeBridgin/Toll-FreeBridgin.html" target="_blank" rel="noopener">Toll-Free Bridging</a></p>
<p><a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Multithreading/RunLoopManagement/RunLoopManagement.html" target="_blank" rel="noopener">Run Loops</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RunLoop 常驻线程 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[发人员需具备一点产品能力]]></title>
      <url>/2018/04/17/%E5%8F%91%E4%BA%BA%E5%91%98%E9%9C%80%E5%85%B7%E5%A4%87%E4%B8%80%E7%82%B9%E4%BA%A7%E5%93%81%E8%83%BD%E5%8A%9B/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2018/04/17/12332.jpg" alt=""></p>
<p>为了开始今天的话题, 我先来借助几个角色, 模拟一下工作中的某些场景.</p>
<h2 id="设立人物"><a href="#设立人物" class="headerlink" title="设立人物"></a>设立人物</h2><p>小 A 是名刚入门的技术人员, 比较听话.<br>小 B 是有工作经验的一名技术人员, 平时喜欢看看产品相关的书籍, 喜欢和产品经理撕逼.<br>小 C 就厉害了, 不仅技术厉害, 也具有产品思维, 除了阅读产品类的书籍, 还写产品体验报告和体验竞品(和当前自己产品相关的产品).<br>小 D 就是一名产品经理, 具有一定的产品能力, 数据分析能力和管理能力.</p>
<p>人物已经设立好了, 现在让他们登场.</p>
<h2 id="情景再现-需求评审"><a href="#情景再现-需求评审" class="headerlink" title="情景再现: 需求评审"></a>情景再现: 需求评审</h2><p>这天风和日丽, 小 D(产品经理) 通知项目组的所有成员, 包括设计/开发/运营/测试等人员按时参加产品需求评审会议.</p>
<p>为了缓解大家的情绪, 小 D 买了很多零食和水果, 也算是犒劳一下大家. 小 D 开始给大家讲需求了, 像往常一样, 拿出精湛的原型, 口沫直飞的向大家展示其绵绵不绝的口才和产品思维. 小 A 一直在点头, 也不知道到底有没有听懂小 D 在说什么, 反正我看到有部分设计人员已经开始打瞌睡了.</p>
<p>突然, 小 C 中断了正在口述的小 D, 小 D 不慌不忙的停止了手中的一切动作, 聚精会神的听小 C 的意见和建议. 小 C 也有条不紊的将刚才的某项需求口述了一遍, 按照小 C 的逻辑, 目前的需求还是存在一些漏洞的, 这个时候, 小 D 开始认真的跟小 C 开始交流, 但是没有马上肯定小 C, 只是说我暂时记下这个点, 回头在思考一番. 产品小 D 稳如老狗, 继续自己的表演.</p>
<p>产品需求基本已经讲完了, 现在是大家提问题和交流的时间, 我看到有些同事揉了揉眼睛, 像是如梦初醒般的看着产品小 D, 不是旁边的同事拉住 Ta, 估计都能冲出会议室. 小 B 也不淡定了, 提出了不少问题, 并从技术的角度说明了实现的难度. 产品经理听的也是一脸懵逼, 心理想: “你实现是否有困难管我鸟事?”.</p>
<p>小 B 在产品小 D 那里并没有得到应有的表扬和鼓励, 反遭到同事小 C 的鄙视, 小 C 说, 你先不要告诉他实现方案, 先讨论这个需求的场景和真伪度. 小 D 默默的对小 C 投过赞赏的目光. 紧接着测试和其他人员提出了几个不痛不痒的问题, 都被老练的小 D 一一破解, 那气势, 啧啧! 势如破竹!</p>
<p>需求评审会议就这样结束了.</p>
<h2 id="情景再现-需求变更"><a href="#情景再现-需求变更" class="headerlink" title="情景再现: 需求变更"></a>情景再现: 需求变更</h2><p>在产品进入开发和设计阶段, 按理说需求变更也算是比较正常的一件事情.</p>
<p>这年头, 唯一不变的就是变化.</p>
<p>小 B 正在聚精会神的写代码, 突然小 D 跟他说, 这个地方的需求需要修改一下, 你看改动有多大?</p>
<p>小 B 鄙视的看着产品经理小 D, 心理在说改动有多大你心里还没有点 B数嘛. 小 B 还是控制了自己的情绪, 接着说道, 你当初应该好好思考的, 你看我都快做完了, 你才告诉我需要改动.</p>
<p>噼里啪啦的说完, 估计小 B 心理也暗爽了不少, 最终还是接受了这次的变动.</p>
<p>小 A 负责的模块, 也被产品经理修改过, Ta 和产品经理小 D 的交流基本是, 哦, 恩, 好, 可以!</p>
<p>当小 C 找到小 D 的时候, 并没有直接告诉小 D 需要改东改西, 而是问问小 D, 你看这样会不会更好一些?</p>
<p>小 C 当然明白小 D 的目的了, 于是拿出自己看过的竞品, 并说出了自己的意见, 愉快的和小 D 交流后, 居然 TMD 的砍了一个需求. 这让旁边的小 A 和小 B 羡慕不已.</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面的两种情景, 我相信做过开发的同事应该都深有体会, 但是千万不要对号入座, 我只是打个比方.</p>
<p>从上面看出, 小 C 是一个很不错的角色, 无论是思维还是沟通能力都有别与他人, 最重要的是他没有仅仅把自己当做一名开发人员, 而是站在产品的角度去思考问题和解决问题.</p>
<p>需求变更是常态, 作为开发人员, 要最大限度的给产品以支持. 产品经理也是人, 当然有考虑不周的地方, 如果你不能想出更好更完美的解决方案, 请支持他的决定.</p>
<p>多站在别人的角度去思考问题, 换位思考, 才能保证有效的沟通. 作为一名技术人员, 尤其是在互联网行业, 多多少少都应该需要具备一定的产品思维.</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 技术 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[不让 SIGPIPE signal 太嚣张]]></title>
      <url>/2018/04/15/%E4%B8%8D%E8%AE%A9-SIGPIPE-signal-%E5%A4%AA%E5%9A%A3%E5%BC%A0/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>由于项目迭代比较快, 大家还没有来得及做自我调整和总结, 就需要投入到新版本当中开发新功能了.</p>
<p>在最近的一次版本测试和体验过程中, 很多内测用户反馈进入或者退出 App 的聊天室, 会莫名其妙的崩溃掉(Crash).<br>对于 Crash 的问题, 我们开发同事绝对是零容忍, 于是就开始跟踪问题.</p>
<p>跟踪了很久, 发现这个 Crash 并不是那么的 ‘乖巧’, 很难复现!<br>既然用户已经反馈了并且后台也有 Crash 上报, 这个问题肯定存在, 所以我们不能放弃.</p>
<p>好吧, 继续加班搞…苦逼中…</p>
<p>最终, 我们发现一个规律, 在日志后台, 看到很多类似下面的日志:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Signal <span class="number">13</span> was raised. SIGPIPE (_mh_execute_header + <span class="number">420728</span>)</div></pre></td></tr></table></figure>
<p>很遗憾的是, 堆栈信息中没有提供给我们更有力的证据, 所以当时定位在 <code>Signal 13</code> 这个点上面.</p>
<p>也算是有了突破…这班没有白加…</p>
<h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>既然所有的罪证都指向了 <code>Signal 13</code>, 我们就需要去跟踪它, 去调查它, 去研究它.</p>
<p>在 <code>signal.h</code> 文件中, 可以发现其定义如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* write on a pipe with no one to read it */</span></div><div class="line"><span class="meta">#define	SIGPIPE	13</span></div></pre></td></tr></table></figure>
<p>用通俗的话来讲, 就是管道破裂.</p>
<blockquote>
<p>管道破裂，这个信号通常在进程间通信产生，比如采用 FIFO(管道)通信的两个进程，读管道没打开或者意外终止就往管道写，写进程会收到 SIGPIPE 信号.<br>此外用 Socket 通信的两个进程，写进程在写 Socket 的时候，读进程已经终止.<br>另外, 在 send/write 时会引起管道破裂，关闭 Socket, 管道时也会出现管道破裂.<br>使用 Socket 一般都会收到这个 SIGPIPE 信号.</p>
</blockquote>
<p>也就是说, 该信号是跟 Socket 的连接以及数据的读写相关联的.</p>
<p>这样的话，我们就知道为什么进退房间导致 Crash 了，我们的进退房间都和 Socket 有关联，这种 Crash 大都数是在用户网络不好的情况下发生的.</p>
<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>类似 <code>signal 13</code> 这种错误是系统发出来的, 和内存使用异常和野指针一样，由于是系统级别崩溃，所以不能通过</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@try</span> &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"><span class="keyword">@catch</span>(<span class="built_in">NSException</span> *exception) &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>捕获到这类异常.</p>
<p>因此, <code>try catch</code> 是无法解决问题的.</p>
<p>目前有两个方案可用:</p>
<blockquote>
<p>方案1. 忽略这类信号.</p>
<p>方案2. 修改源码, 在 IM 代码里面修改.</p>
</blockquote>
<p>因为, IMSDK 我们是使用第三方的, 所以无法更改其源码, 所以采取了方案1: 忽略这类信号.</p>
<p>忽略的方案很简单, 在你连接或者初始化 IMSDK 之前, 只需要一行代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">signal(SIGPIPE, SIG_IGN);</div></pre></td></tr></table></figure>
<p>示例代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions </div><div class="line">&#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    </div><div class="line">    signal(SIGPIPE, SIG_IGN);</div><div class="line">    </div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对于 <code>方案2</code>, 我查阅了一下 <code>CocoaAsyncSocket</code> 的源码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Prevent SIGPIPE signals</span></div><div class="line">    </div><div class="line"><span class="keyword">int</span> nosigpipe = <span class="number">1</span>;</div><div class="line">setsockopt(socketFD, SOL_SOCKET, SO_NOSIGPIPE, &amp;nosigpipe, <span class="keyword">sizeof</span>(nosigpipe));</div></pre></td></tr></table></figure>
<p>所以对于 <code>方案2</code>, 就是增加上面的代码即可, 即设置 Socket 不发送 SIGPIPE 信号.</p>
<p>对于上面的两种方案, 苹果开发者文档 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/CommonPitfalls/CommonPitfalls.html" target="_blank" rel="noopener">Avoiding Common Networking Mistakes</a> 都有提及.</p>
<p><img src="/upload/images/2018/04/15/1.jpg" alt="-w380"></p>
<h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>既然这个问题很难复现, 我们就想办法让他很容易复现.</p>
<p>可以采用手动发送 signal 的方式, 来复现这个问题.</p>
<p>先看一下 <a href="https://linux.die.net/man/3/kill" target="_blank" rel="noopener">kill(3) - Linux man page</a> 函数:</p>
<blockquote>
<p>The kill() function shall send a signal to a process or a group of processes specified by pid. The signal to be sent is specified by sig and is either one from the list given in <signal.h> or 0. If sig is 0 (the null signal), error checking is performed but no signal is actually sent. The null signal can be used to check the validity of pid.</signal.h></p>
</blockquote>
<p>kill 函数是可移植操作系统接口 POSIX(Portable Operating System Interface of UNIX) 定义的, 可以参考 <a href="https://zh.wikipedia.org/wiki/POSIX" target="_blank" rel="noopener">维基百科</a>.</p>
<p>示例代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="comment">//获取进程 id</span></div><div class="line">    pid_t cur_pid = getpid();</div><div class="line">    printf(<span class="string">"current process's id: %i\n"</span>, cur_pid);</div><div class="line">    </div><div class="line">    <span class="comment">//延时10s 为了让 Bugtags 有时间上报日志.</span></div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(<span class="number">10</span> * <span class="built_in">NSEC_PER_SEC</span>)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        </div><div class="line">        wpcSendSignal(cur_pid);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">///手动发送信号</span></div><div class="line"><span class="keyword">int</span> wpcSendSignal(<span class="keyword">int</span> pid)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ret = kill(pid, SIGPIPE);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们将 <code>signal(SIGPIPE, SIG_IGN)</code> 代码先注释.</p>
<p>运行 APP 到手机, 然后退出 Xcode 的连接.</p>
<blockquote>
<p>注意: 这里如果连接 Xcode, 不会直接 Crash, 所以需要断开手机与 Xcode 的连接.</p>
</blockquote>
<p>在后台可以看到类似的 Crash 日志:</p>
<p><img src="/upload/images/2018/04/15/2.jpg" alt="-w500"></p>
<p>除了上面使用 <code>kill</code> 函数外, 我们还可以使用 <code>raise</code> 函数来发送 signal.</p>
<p>关于 raise 函数, 可以查阅 <a href="https://linux.die.net/man/3/raise" target="_blank" rel="noopener">手册</a>.</p>
<p>或者直接问男人(man):</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">man raise</div></pre></td></tr></table></figure>
<h2 id="问题再次来临-与-Bugtags-的结合"><a href="#问题再次来临-与-Bugtags-的结合" class="headerlink" title="问题再次来临: 与 Bugtags 的结合"></a>问题再次来临: 与 Bugtags 的结合</h2><p>本以为采用上述方案就万事大吉了, 在第二次提测后, 还是有这种 Crash 的问题在后台上报.</p>
<p>排查了很久后才发现，问题的原因是 BugTags 也会控制这个开头，默认是不忽略，这样：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 是否忽略 PIPE Signal (SIGPIPE) 闪退，默认 NO</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">assign</span>) <span class="built_in">BOOL</span> ignorePIPESignalCrash;</div></pre></td></tr></table></figure>
<p>这个默认设置为 NO, 即可以上报 PIPE Signal Crash 的问题.</p>
<p>这里也说明一个问题, 即使我们采用 <code>方案1</code> 解决 Crash 的问题了, Bugtags 还是会将这种 Crash 上报到后台.</p>
<p>示例代码:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bugtag.option.ignorePIPESignalCrash = <span class="literal">YES</span>;</div><div class="line"></div><div class="line"><span class="comment">// ...</span></div><div class="line"></div><div class="line">signal(SIGPIPE, SIG_IGN);</div></pre></td></tr></table></figure>
<p>对比一下测试的两张图, 第一张图到第二张图是增加了两次崩溃次数, 原因是故意设置了 <code>bugtag.option.ignorePIPESignalCrash = NO</code>, 也正好验证了我们的想法.</p>
<p><img src="/upload/images/2018/04/15/3.jpg" alt="-w600"><br><img src="/upload/images/2018/04/15/4.jpg" alt="-w600"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>Xcode 连接真机或者模拟器, 运行出现异常断点, 可能就是隐患点.</p>
</li>
<li><p>学会使用后台日志找到规律, 继而去思考并解决问题.</p>
</li>
<li><p>对 Crash 进行更深入的分析和总结, 不要轻易放弃.</p>
</li>
</ol>
<h2 id="后续研究"><a href="#后续研究" class="headerlink" title="后续研究"></a>后续研究</h2><ol>
<li><p>是否可以忽略其他的 signal, 来避免不必要的 Crash?</p>
</li>
<li><p>自定义一套关于 signal 捕获的跨平台库, 在开发阶段可以直接看到完整的日志.</p>
</li>
</ol>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><ol>
<li><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/NetworkingOverview/CommonPitfalls/CommonPitfalls.html" target="_blank" rel="noopener">Avoiding Common Networking Mistakes</a></p>
</li>
<li><p><a href="https://linux.die.net/" target="_blank" rel="noopener">linux die</a></p>
</li>
<li><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/NetworkingTopics/Articles/UsingSocketsandSocketStreams.html#//apple_ref/doc/uid/CH73-SW1" target="_blank" rel="noopener">Using Sockets and Socket Streams</a></p>
</li>
</ol>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Crash linux signal SIGPIPE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这样学习你愿意吗?]]></title>
      <url>/2018/04/07/%E8%BF%99%E6%A0%B7%E5%AD%A6%E4%B9%A0%E4%BD%A0%E6%84%BF%E6%84%8F%E5%90%97/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2018/04/07/1.jpg" alt=""></p>
<p>不得不承认, 学习确实是个「苦差事」, 这里说的学习不仅仅指伏案学习, 之乎者也等, 而是一种广泛的学习.</p>
<p>如何学习是始终要去探讨的一个话题, 时代在变, 环境在变, 学习当然也不能一成不变. 坚持学习是一辈子的事, 活到老学到老.</p>
<p>既然学习是一个漫长的马拉松, 那我们只有持之以恒的’跑’下去, 才能保持不掉队. 这样一来, 学习方法和学习技巧就是取胜的关键了.</p>
<p>世上没有绝对的学习妙招和学习宝典, 找到适合自己的就是最好的. 下面我结合自己的一些经历给大家分享在学习的道路上遇到的那些事.</p>
<blockquote>
<p>不管怎样, 学习一定要带着目标, 结合理论再去实践, 事半功倍.</p>
</blockquote>
<hr>
<p>欢迎大家在评论区交流, 不喜勿喷~ </p>
<h2 id="回忆当天事"><a href="#回忆当天事" class="headerlink" title="回忆当天事"></a>回忆当天事</h2><p>每晚躺在床上或者沙发上, 发发呆, 把当天做过的事情, 在脑海中统统的过一遍, 像放电影一样, 能有多详细就多详细, 也就是说尽量的回忆细节.</p>
<p>这种做法看似很简单, 其实很难坚持下去. 特别是中间几天, 很多人都会放弃, 再加上现在手机互联网的 “毒害”, 留给自己去真正学习的时间更少了. 但是只要你咬咬牙坚持一下, 把这个习惯养成, 就会终生受用.</p>
<p>我在初中时期已经养成了这个习惯, 直到大学都没有放弃. 大学里面每次期末考试, 看到很多人忙的不可开交, 我都是不慌不忙的, 悠闲自得, 室友问我怎么做到游刃有余, 我说你白天少睡点觉, 平时注意听讲, 晚上回忆一下就可以了, 从他迷茫的眼神中可以看出, 他当时并不完全相信我说的!</p>
<p>每次回忆结束, 有些东西还是比较模糊甚至一知半解, 没事, 你第二天去翻阅相关知识再去整理和理解一下就好了, 这种自我激励比任何鞭策都有用.</p>
<blockquote>
<p>有些困难只是暂时的, 想办法 ‘挺’ 过去, 你就赢了. 很多时候不是困难吓到了我们, 而是我们放弃了自己.</p>
</blockquote>
<h2 id="多想多问"><a href="#多想多问" class="headerlink" title="多想多问"></a>多想多问</h2><p>和你身边兴趣相投或者比你有能力的人多交流, 交流的过程也是你练习自我表达能力的过程, 把自己的问题能够清楚的描述给别人听, 也是一种能力.</p>
<p>不知道大家有没有这样一种感觉, 在跟别人交流的过程中, 虽然别人没有直接帮你解决问题, 但是你突然有了解决问题的办法. 为什么会这样呢? 很简单, 因为这个问题你之前思考过, 只是在交流的过程中, 你的大脑专注在此, 聚精会神的在想这件事情.</p>
<p>问问题有一套门道. 在请教别人问题之前, 最好自己先尽力想一想, 不要遇到一点问题就去问东问西, 即使别人给你讲了, 你也只是当时明白了, 下次再遇到此类问题, 你依然懵逼. 还有就是会让你形成一种依赖心理, 反正有人能解决, 我问就可以了, 干嘛还有费时费力的去想?! 久而久之, 就破罐子破摔了.</p>
<p>另外一个要说的就是在请教或者交流问题的时候, 要对对方谦虚.</p>
<p>我很感激高中时代, 班主任很信任我, 让我当了三年班长, 那三年让我学到了很多书本之外的东西, 其中沟通和管理让我在今后的工作中受益匪浅. </p>
<h2 id="阅读和写作"><a href="#阅读和写作" class="headerlink" title="阅读和写作"></a>阅读和写作</h2><blockquote>
<p>这里说的写作不是指专业的作家级的写作, 泛指任何文字的记录, 日记也算.</p>
</blockquote>
<p>每天最幸福的时刻就是在 23:00 点之前坐在电脑前, 可以写自己心中要表达的内容, 任思绪飘摇.</p>
<p>只要有闲暇的时间, 我就会整理和总结这段时间发生的事情, 既有工作上的也有生活上的.</p>
<p>小的时候, 家里比较穷, 交学费都是问题, 更别说是买书了. 我记得初中一年级, 我很想要一本英语书籍, 那种渴望至今难忘! 后来, 我每天从自己的生活费里抠出一点钱(生活费本来就少), 就这样积攒了几个星期, 去新华书店买了一本英语书籍. 高中时期, 有同学不要的或者已经不读的书籍, 我都会借过来看, 沉浸在自己的幸福当中.</p>
<p>参加工作之后, 我也有写博客的习惯, 把自己工作中遇到的问题以及解决问题的思路和方式写出来, 分享给其他人, 快乐无比. 特别是收到文章的评论后, 心理美滋滋的. 在互联网的海洋里, 大家素不相识, 通过键盘上敲击的文字互相交流知识和想法, 彼此成长着, 也别具一番乐趣.</p>
<p>阅读和写作可以培养自己的专注力, 这么好的习惯你千万不要拒绝. 写作可以倒逼着你去阅读, 去关心生活里面的点滴, 阅读和生活中的体验又可以激发你写作的欲望, 两者相辅相成.</p>
<p>推荐给大家一本书: <strong>Google 工作整理术</strong></p>
<p><img src="/upload/images/2018/04/07/2.png" alt="-w200"></p>
<blockquote>
<p>谷歌前CIO（首席信息官）分享风靡谷歌的信息整理术，帮助现代人彻底告别无序工作，学会利用数字工具为大脑减压！信息太多、时间太少，整理信息已成为现代人急需掌握的必备技能。谷歌作为引领全球的信息搜索与整合巨头，拥有能够有序整理信息的独特方式，而谷歌首席信息官便是主导这一“信息工厂”的总工程师。如今，曾担任“总工程师”的道格拉斯梅里尔亲自将风靡谷歌的信息整理方式分享给大众读者，帮助现代人克服无序工作的通病。《Google工作整理术》告诉你：不要花太多时间给信息归档，用的时候学会去搜索；在数字信息文档中加上关键词，方便日后检索；从前，知识就是力量,现在，共享知识才是力量；把工作和生活融为一体，而不是力图在二者之间求平衡。这些实用 Tips 都揭示了：信息整理才是高效工作的关键，信息整理已是现代人的工作必备技能！</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 感悟 学习 阅读 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC-RunTime: 总结消息转发中用到的知识点]]></title>
      <url>/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程</a></p>
<p><a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程实例讲解</a></p>
<p><a href="http://www.veryitman.com/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">OC-RunTime: 消息转发之类方法的转发流程</a></p>
<p>在上面的几篇文章中我分享了关于消息转发相关的知识点，里面有很多细节没有阐述。</p>
<p>若在上面的文章中加入很多细节点的话，一是拉长了文章的内容, 二是对于刚接触 Runtime 的朋友来说不一定能接受, 于是就有了这篇文章的诞生.</p>
<h2 id="RunTime-的定义及使用场景"><a href="#RunTime-的定义及使用场景" class="headerlink" title="RunTime 的定义及使用场景"></a>RunTime 的定义及使用场景</h2><p>苹果 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Introduction/Introduction.html" target="_blank" rel="noopener">开发文档</a> 的这样解释 runtime 的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">The Objective-C language defers as many decisions as it can from compile time and link time to runtime. Whenever possible, it does things dynamically. This means that the language requires not just a compiler, but also a runtime system to execute the compiled code. The runtime system acts as a kind of operating system for the Objective-C language; it’s what makes the language work</div></pre></td></tr></table></figure>
<p>尽量将决定放到运行的时候，而不是在编译和链接过程中.</p>
<p>RunTime 的应用场景:</p>
<blockquote>
<p>1.面向切面编程 AOP.<br>2.方法调配 method swizzling. 有些地方称之为”黑魔法”.<br>3.消息转发.<br>4.给分类添加属性(关联对象).<br>5.动态获取 class 和 slector.<br>6.KVO/KVC, 修改私有属性的值.</p>
</blockquote>
<p>建议去阅读下面框架的源码，恕我没有加入链接:</p>
<blockquote>
<p>Aspects（AOP必备，“取缔” baseVC，无侵入埋点）</p>
<p>MJExtension（JSON 转 model，一行代码实现 NSCoding 协议的自动归档和解档）</p>
<p>JSPatch（动态下发 JS 进行热修复）</p>
<p>NullSafe（防止因发 unrecognised messages 给 NSNull 导致的崩溃）</p>
<p>UITableView-FDTemplateLayoutCell（自动计算并缓存 table view 的 cell 高度）</p>
<p>UINavigationController+FDFullscreenPopGesture（全屏滑动返回）</p>
</blockquote>
<h2 id="思考问题"><a href="#思考问题" class="headerlink" title="思考问题"></a>思考问题</h2><p>在前面的文章中，很多次看到 IMP、SEL、selector 以及 Method 等关键字，相信大家随着对 RunTime 的逐步了解，慢慢会逐渐熟悉它们的，只是时间问题。很多概念上面的东西理解起来没那么简单，需要动手去写写代码。</p>
<p>在看下面内容之前, 先抛出一个问题:</p>
<blockquote>
<p>runtime 如何通过 selector 找到对应的 IMP 地址?</p>
</blockquote>
<p>接下来分别说一下 IMP、SEL、selector 以及 Method.</p>
<h2 id="IMP"><a href="#IMP" class="headerlink" title="IMP"></a>IMP</h2><p>IMP 保存的是 Method 的地址，本质是一个函数指针，由编译器生成。</p>
<p>IMP 在 <code>objc.h</code> 中的定义：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// A pointer to the function of a method implementation. </span></div><div class="line"><span class="meta">#if !OBJC_OLD_DISPATCH_PROTOTYPES</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> (*IMP)(<span class="keyword">void</span> <span class="comment">/* id, SEL, ... */</span> ); </div><div class="line"><span class="meta">#else</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">id</span> (*IMP)(<span class="keyword">id</span>, SEL, ...); </div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>向对象发送消息之后，是由这个函数指针 IMP 指定的, 即 IMP 函数指针就指向了方法的实现.</p>
<p>IMP 函数指针最少包含 id 和 SEL 类型的两个参数，后面其他的参数是对应方法需要的参数。其中 id 代表执行该方法的 target(对象), SEL 就是对应的方法, 通过 id 和 SEL 参数就能确定唯一的方法实现地址.</p>
<p>那么我们如何获取方法的 IMP 呢？很简单.</p>
<p>NSObject 提供了如下两个方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (IMP)methodForSelector:(SEL)aSelector;</div><div class="line">+ (IMP)instanceMethodForSelector:(SEL)aSelector;</div></pre></td></tr></table></figure>
<p>对应的实现(源码 NSObject.mm), 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (IMP)instanceMethodForSelector:(SEL)sel &#123;</div><div class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</div><div class="line">    <span class="keyword">return</span> class_getMethodImplementation(<span class="keyword">self</span>, sel);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (IMP)methodForSelector:(SEL)sel &#123;</div><div class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</div><div class="line">    <span class="keyword">return</span> object_getMethodImplementation((<span class="keyword">id</span>)<span class="keyword">self</span>, sel);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IMP)methodForSelector:(SEL)sel &#123;</div><div class="line">    <span class="keyword">if</span> (!sel) [<span class="keyword">self</span> doesNotRecognizeSelector:sel];</div><div class="line">    <span class="keyword">return</span> object_getMethodImplementation(<span class="keyword">self</span>, sel);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>大家可以看到，对应的 <code>methodForSelector</code> 既有实例方法又有类方法，而 <code>instanceMethodForSelector</code> 只有类方法。</p>
<p>在使用 <code>methodForSelector</code> 方法时，向类发送消息，则 SEL 应该是类方法, 若向实例对象发送消息，则 SEL 应该为实例对象方法.</p>
<p>而 <code>instanceMethodForSelector</code> 仅仅允许类发送该消息, 从而获取实例方法的 IMP. 该方法无法获取类方法的 IMP, 如果想获取类方法的 IMP 可以使用 <code>methodForSelector</code> 来获取。</p>
<p>函数文档原文解释如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Use this method to ask the class object for the implementation of instance methods only. </div><div class="line">To ask the class for the implementation of a class method, send the methodForSelector: instance method to the class instead.</div></pre></td></tr></table></figure>
<p>举个例子，或许更好理解。</p>
<p>下面两个方法, 一个是类方法(testClassMethod), 另一个是实例方法(testInstanceMethod).</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)testClassMethod &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)testInstanceMethod &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>分别使用上面提到的方法来获取 IMP 的几个方法.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">IMP imp = [[<span class="keyword">self</span> <span class="keyword">class</span>] instanceMethodForSelector:<span class="keyword">@selector</span>(testClassMethod)];</div><div class="line">IMP imp2 = [[<span class="keyword">self</span> <span class="keyword">class</span>] instanceMethodForSelector:<span class="keyword">@selector</span>(testInstanceMethod)];</div><div class="line"></div><div class="line"><span class="comment">// 也可以改成 NSObject 调用的方式, 结果一样.</span></div><div class="line"><span class="comment">// IMP imp = [NSObject instanceMethodForSelector:@selector(testClassMethod)];</span></div><div class="line"><span class="comment">// IMP imp2 = [NSObject instanceMethodForSelector:@selector(testInstanceMethod)];</span></div><div class="line">    </div><div class="line">IMP imp3 = [[<span class="keyword">self</span> <span class="keyword">class</span>] methodForSelector:<span class="keyword">@selector</span>(testClassMethod)];</div><div class="line">IMP imp4 = [<span class="keyword">self</span> methodForSelector:<span class="keyword">@selector</span>(testInstanceMethod)];</div></pre></td></tr></table></figure>
<p>调试器可以看出, 如下日志:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Printing description of imp:</div><div class="line">(IMP) imp = <span class="number">0x000000010d8455c0</span> (libobjc.A.dylib`_objc_msgForward)</div><div class="line"></div><div class="line">Printing description of imp2:</div><div class="line">(IMP) imp2 = <span class="number">0x000000010cf19b90</span> (-[ViewController testInstanceMethod] at ViewController.m:<span class="number">94</span>)</div><div class="line"></div><div class="line">Printing description of imp3:</div><div class="line">(IMP) imp3 = <span class="number">0x000000010cf19b60</span> (+[ViewController testClassMethod] at ViewController.m:<span class="number">89</span>)</div><div class="line"></div><div class="line">Printing description of imp4:</div><div class="line">(IMP) imp4 = <span class="number">0x000000010cf19b90</span> (-[ViewController testInstanceMethod] at ViewController.m:<span class="number">94</span>)</div><div class="line">(lldb)</div></pre></td></tr></table></figure>
<p>imp2、imp3、imp4 都是正常的，唯独 imp 不正常，也充分说明了 <code>instanceMethodForSelector</code> 无法获取类方法的 IMP.</p>
<h2 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h2><p>在源码 <code>runtime.h</code> 中, 定义 method, 其本质是一个结构体.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_method &#123;</div><div class="line">    SEL method_name     OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *method_types  OBJC2_UNAVAILABLE;</div><div class="line">    IMP method_imp      OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法名 <code>method_name</code> 类型为 SEL.</p>
<p><code>method_types</code> 方法类型, 是一个 char 指针，存储着方法的参数类型和返回值类型。</p>
<p>方法实现 <code>method_imp</code> 的类型为 IMP.</p>
<p>可以看出, 有 SEL 和 IMP, method_types 是对应的方法返回值和参数类型, 如 <code>v@:</code>，是一个字符串。</p>
<p><code>runtime.h</code> 中有两个方法，可以根据 SEL 直接获取实例方法和类方法的 Method，如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Method class_getInstanceMethod(Class cls, SEL name);</div><div class="line"></div><div class="line">Method class_getClassMethod(Class cls, SEL name);</div></pre></td></tr></table></figure>
<h2 id="SEL"><a href="#SEL" class="headerlink" title="SEL"></a>SEL</h2><p><code>selector</code>, 称之为方法选择器，SEL 是 <code>selector</code> 的表示类型，也是方法的编号，是类成员方法的指针。</p>
<p>SEL 定义在源码 <code>objc.h</code> 中, 是一个结构体指针, 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// An opaque type that represents a method selector.</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> objc_selector *SEL;</div></pre></td></tr></table></figure>
<p>但是源码中查不到 <code>objc_selector</code> 具体的定义和实现.</p>
<p>获取 SEL 有三个方法:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SEL sel = <span class="keyword">@selector</span>(play:);</div><div class="line">SEL sel = sel_registerName(<span class="string">"play:"</span>); </div><div class="line">SEL sel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"play"</span>);</div></pre></td></tr></table></figure>
<p>SEL 表示一个 selector 的指针，无论什么类里，只要方法名相同，SEL 就相同，SEL 实际是根据方法名 hash 化了的字符串。而对于字符串的比较仅仅需要比较他们的地址就可以了，所以速度上非常快，SEL 的存在加快了查询方法的速度。</p>
<blockquote>
<p>思考一个问题：为什么在同一个 OC 类中，不能存在同名的函数，即使参数类型不同也不行，换句话说 OC为什么没有重载？</p>
<p>答案已经在上面说了，SEL 表示一个 selector 的指针，无论什么类里，只要方法名相同，SEL 就相同，相同的函数名，编译器无法编译通过。</p>
</blockquote>
<p><code>dispatch table</code> 存放 SEL 和 IMP 的对应关系，SEL 最终会通过 <code>dispatch table</code> 寻找到对应的IMP。</p>
<p>总之，Selector、Method 和 IMP 三者之间的关系可以这么解释，在类的(实例和类方法)调度表(dispatch table)中的每一个实体代表一个方法 Method，其名字叫做选择器 SEL，并对应着一种方法实现称之为 IMP，有了 Method 就可以使用 SEL 找到对应的 IMP，SEL 就是为了查找方法的最终实现 IMP。</p>
<h2 id="class-addMethod"><a href="#class-addMethod" class="headerlink" title="class_addMethod"></a>class_addMethod</h2><p>查看源码 <code>objc-runtime-new.mm</code> 中该函数实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> class_addMethod(Class cls, SEL name, IMP imp, <span class="keyword">const</span> <span class="keyword">char</span> *types)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line"></div><div class="line">    rwlock_writer_t lock(runtimeLock);</div><div class="line">    <span class="keyword">return</span> ! addMethod(cls, name, imp, types ?: <span class="string">""</span>, <span class="literal">NO</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>开发文档中这样描述该函数:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Adds a new method to a <span class="keyword">class</span> with a given name and implementation.</div><div class="line">class_addMethod will add an override of a superclass's implementation, </div><div class="line">but will not replace an existing implementation <span class="keyword">in</span> <span class="keyword">this</span> <span class="keyword">class</span>. </div><div class="line">To change an existing implementation, use method_setImplementation.</div></pre></td></tr></table></figure>
<p>解释一下，可以为类根据 SEL 和 IMP 动态添加一个新方法。<code>class_addMethod</code> 仅可以动态添加方法，不会替换。如果想达到方法替换的效果可使用 <code>method_setImplementation</code> 函数。</p>
<p>关于 <code>method_setImplementation</code> 和 <code>method_exchangeImplementations</code> 后面文章再做分析.</p>
<p>其实, <code>method_exchangeImplementations</code> 的内部实现相当于调用了 2 次 <code>method_setImplementation</code> 方法。</p>
<p><code>class_addMethod</code> 不仅可以动态添加类方法, 也可以添加实例方法。</p>
<p>参数及返回值解释:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">返回值: 返回 <span class="literal">YES</span> 表示方法添加成功, 否则添加失败。</div><div class="line"></div><div class="line">参数 Class cls: 将要给添加方法的类, 即［类名 <span class="keyword">class</span>］</div><div class="line"></div><div class="line">参数 SEL name: 将要添加的方法 SEL, 即 <span class="keyword">@selector</span>(方法名)，如果已经存在，该方法返回失败，不存在就添加成功。</div><div class="line"></div><div class="line">参数 IMP imp：实现这个方法的函数. 有两种写法即 C 和 OC 的写法. 一个 IMP 最少包括两个参数, 上面已经说过。</div><div class="line"></div><div class="line">参数 <span class="keyword">const</span> <span class="keyword">char</span> *types: 实现方法的函数的返回和参数编码类型. 如 <span class="string">"v@:"</span> 表示返回值为 <span class="keyword">void</span>, 没有参数的一个函数, 其中 @和:分别代表 IMP 的默认两个参数即 <span class="keyword">id</span> 和 sel.</div></pre></td></tr></table></figure>
<p>关于 types，可以使用 <code>method_getTypeEncoding</code> 来获取。</p>
<p>更多关于 types 的内容可以参考开发者文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100-SW1" target="_blank" rel="noopener">Type Encodings</a>.</p>
<h2 id="解答问题"><a href="#解答问题" class="headerlink" title="解答问题"></a>解答问题</h2><p>读到这里, 大家对 IMP, SEL 以及 Method 应该有初步的了解了, 那么来解答一下刚才提出的问题:</p>
<blockquote>
<p>runtime 如何通过 selector 找到对应的 IMP 地址?</p>
</blockquote>
<p>回答这个问题的关键是要知道消息调度表(dispatch table)，另外一个要回答的要点是 IMP 的实现和获取以及和 Method 之间的关系。</p>
<p>类对象中有类方法和实例方法的分发表，表中记录着方法的名字、参数和实现，selector 本质就是方法名称，runtime 通过这个方法名称就可以在列表中找到该方法对应的实现.</p>
<p>系统为我们提供了获取 IMP 指针的函数，无论是类方法还是实例方法我们都可以获取对应的 IMP.</p>
<p>而 Method 将 Selector 和 IMP 联系起来，可从源码中看出:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> objc_method &#123;</div><div class="line">    SEL method_name     OBJC2_UNAVAILABLE;</div><div class="line">    <span class="keyword">char</span> *method_types  OBJC2_UNAVAILABLE;</div><div class="line">    IMP method_imp      OBJC2_UNAVAILABLE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IMP 是函数的指针，它是由编译器编译生成的。当发一个消息时，它会找到那段代码执行，IMP 指向了这个方法的具体的实现，得到这个函数的指针可以直接执行。</p>
<p>IMP 指向的方法与 <code>objc_msgSend</code> 函数类型相同，参数都包含 id 和 SEL 类型。每个方法名都对应一个 SEL 类型的方法选择器，而每个实例对象中的 SEL 对应的方法实现肯定是唯一的，通过一组 id 和 SEL 参数就能确定唯一的方法实现地址，反之亦然。当发送消息给一个对象时，runTime 会在对象的类对象方法列表里查找，当我们发送一个消息给一个类时，这条消息会在类的 <code>Meta Class</code> 对象的方法列表里查找，直到超找到 NSObject 中为止。</p>
<p><strong>消息传递的过程</strong></p>
<p><strong>1.</strong> 当消息被发送给一个对象，messaging function 跟随对象的 isa 指针找到它的 class structure，在 dispatch table 中寻找 method selector.</p>
<p><strong>2.</strong> 如果没有找到 selector，objc_msgsend 跟随该类实例的 isa 找到父类，尝试在父类的 dispatch table 中寻找 selector.</p>
<p><strong>3.</strong> 重复步骤 <strong>2</strong>，直到 isa 指向 NSObject Class 为止。</p>
<p>关于分发表和消息相关的知识可以参考开发文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html" target="_blank" rel="noopener">Messaging</a>，讲得很清楚。</p>
<h2 id="实际例子"><a href="#实际例子" class="headerlink" title="实际例子"></a>实际例子</h2><p>说了这么多理论知识，是时候举栗子了，方便大家更好的理解上面的内容。</p>
<h3 id="1-动态添加实例方法"><a href="#1-动态添加实例方法" class="headerlink" title="1. 动态添加实例方法"></a>1. 动态添加实例方法</h3><p><strong>Student.m</strong></p>
<p>除 <code>init</code> 外，Student 只有一个实例方法 <code>studentWalkImp</code>.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        </div><div class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"studentWalkImp"</span>);</div><div class="line">        IMP impletor = class_getMethodImplementation([<span class="keyword">self</span> <span class="keyword">class</span>], proxySelector);</div><div class="line">        </div><div class="line">        <span class="comment">// 获取实例方法</span></div><div class="line">        Method method = class_getInstanceMethod([<span class="keyword">self</span> <span class="keyword">class</span>], proxySelector);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</div><div class="line">        </div><div class="line">        SEL origSel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"walk"</span>);</div><div class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], origSel, impletor, types);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)studentWalkImp</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- Student studentWalkImp"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>调用测试一下.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    Student *stud = [[Student alloc] init];</div><div class="line">    [stud performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"walk"</span>) withObject:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里 Student 并没有 <code>walk</code> 方法，故意为之，运行后控制台会打印:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---veryitman--- Student studentWalkImp</div></pre></td></tr></table></figure>
<p>成功的为 Student 添加了一个实例方法 <code>walk</code> 的实现 <code>studentWalkImp</code>.</p>
<p>上面的例子是使用 OC 的 IMP 方式来实现的，可以改为 C 实现版本的.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        SEL origSel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"walk"</span>);</div><div class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], origSel, (IMP)studentWalkImp, <span class="string">"v:@"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> studentWalkImp()</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- Student studentWalkImp"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-动态添加类方法"><a href="#2-动态添加类方法" class="headerlink" title="2. 动态添加类方法"></a>2. 动态添加类方法</h3><p>动态添加类方法，和动态添加实例方法稍微有点不同。下面是改造后的 <code>Student.m</code>.</p>
<p><strong>Student.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">Student</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init</div><div class="line">&#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 获取 MetaClass, 类方法不可以使用 [self class]</span></div><div class="line">        Class metaCls = objc_getMetaClass([<span class="built_in">NSStringFromClass</span>([<span class="keyword">self</span> <span class="keyword">class</span>]) UTF8String]);</div><div class="line">        </div><div class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"clsImp"</span>);</div><div class="line">        IMP impletor = class_getMethodImplementation(metaCls, proxySelector);</div><div class="line">        </div><div class="line">        <span class="comment">// 获取类方法</span></div><div class="line">        Method method = class_getClassMethod([<span class="keyword">self</span> <span class="keyword">class</span>], proxySelector);</div><div class="line">        </div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</div><div class="line">        SEL origSel = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"walk"</span>);</div><div class="line">        </div><div class="line">        class_addMethod(metaCls, origSel, impletor, types);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)clsImp</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- Student clsImp"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：这里获取 Class 稍微不同的是使用了 <code>objc_getMetaClass</code>，这里关系到 Objective-C 中的类、Class、根类和元类的区别，可以参考 <a href="http://www.veryitman.com/2019/01/29/Class%E3%80%81isa%E3%80%81%E5%85%83%E7%B1%BB/" target="_blank" rel="noopener">Class、isa、元类</a> 这篇文章。</p>
<p>调用测试一下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    Student *stud = [[Student alloc] init];</div><div class="line">    </div><div class="line">    [[stud <span class="keyword">class</span>] performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"walk"</span>) withObject:<span class="literal">nil</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台打印：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">---veryitman--- Student clsImp</div></pre></td></tr></table></figure>
<p>成功地为类动态的添加了一个类方法 <code>clsImp</code>.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><strong>1. <a href="http://blog.devtang.com/2013/10/15/objective-c-object-model/" target="_blank" rel="noopener">Objective-C 对象模型及应用</a></strong></p>
<p><strong>2. <a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="noopener">Apple RunTime 源码 objc4-723.tar.gz</a></strong></p>
<p><strong>3. <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtHowMessagingWorks.html" target="_blank" rel="noopener">Messaging</a></strong></p>
<p><strong>4. <a href="https://junyixie.github.io/2017/05/01/Objective-C-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E4%B8%AD%E7%9A%84%E6%B6%88%E6%81%AF%E6%9C%BA%E5%88%B6%E5%92%8C%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8/" target="_blank" rel="noopener">Objective-C 深入理解中的消息机制和方法调用</a></strong></p>
<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward" target="_blank" rel="noopener">Demo</a>.</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC-RunTime: 消息转发之类方法的转发流程]]></title>
      <url>/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>本篇是「消息转发」系列的第三篇, 在 <a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程</a> 和 <a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程[实例讲解]</a> 中分享了实例方法的转发流程.</p>
<p>今天分享如何对类方法进行消息的转发.</p>
<h2 id="resolveClassMethod"><a href="#resolveClassMethod" class="headerlink" title="resolveClassMethod"></a>resolveClassMethod</h2><p>NSObject 提供了 <code>resolveClassMethod</code> 来让开发者在里面动态添加一个类方法.</p>
<p>类方法的转发流程和实例方法转发的流程大致一样, 唯独不同的是需要重写的方法(NSObject中)的不一样.</p>
<p>当时我在写 Demo, 以为只需要将 <code>resolveInstanceMethod</code> 改为 <code>resolveClassMethod</code> 就万事大吉了即重写下面几个方法就可以解决问题, 事实证明这样是不行的.</p>
<blockquote>
<ol>
<li>+resolveClassMethod</li>
<li>-forwardingTargetForSelector</li>
<li>-methodSignatureForSelector</li>
<li>-forwardInvocation</li>
<li>-doesNotRecognizeSelector:</li>
</ol>
</blockquote>
<p>网上很多博文并没有深入的探讨关于类方法转发的流程, 只是在介绍实例方法转发的流程的同时, 一笔带过类方法转发机制和流程.</p>
<p>通过对 <code>NSObject.mm</code> 源码的查看, 可以看到对应上面的几个方法都有类方法. 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">1.</span> +resolveClassMethod</div><div class="line"><span class="number">2.</span> +forwardingTargetForSelector</div><div class="line"><span class="number">3.</span> +methodSignatureForSelector</div><div class="line"><span class="number">4.</span> +forwardInvocation</div><div class="line"><span class="number">5.</span> +doesNotRecognizeSelector:</div></pre></td></tr></table></figure>
<p>重新这几个方法才是解决问题的关键.</p>
<p>现在我们重写 <code>resolveClassMethod</code>, 如下.</p>
<hr>
<p><strong>ViewController.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> sPerformClassMethodName = <span class="string">@"veryClassMethod"</span>;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 1--- +resolveClassMethod"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([sPerformClassMethodName isEqualToString:methodName]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 获取 MetaClass</span></div><div class="line">        Class predicateMetaClass = objc_getMetaClass([<span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>) UTF8String]);</div><div class="line">        <span class="comment">// 根据 metaClass 获取方法的实现</span></div><div class="line">        IMP impletor = class_getMethodImplementation(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</div><div class="line">        <span class="comment">// 获取类方法</span></div><div class="line">        Method predicateMethod = class_getClassMethod(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *encoding = method_getTypeEncoding(predicateMethod);</div><div class="line">        </div><div class="line">        <span class="comment">// 动态添加类方法</span></div><div class="line">        class_addMethod(predicateMetaClass, sel, impletor, encoding);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveClassMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)proxyMethod</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- +proxyMethod of class's method for OC."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>模拟调用</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="comment">// 运行类方法</span></div><div class="line">    SEL selector = <span class="built_in">NSSelectorFromString</span>(sPerformClassMethodName);</div><div class="line">    SuppressPerformSelectorLeakWarning(</div><div class="line">        [[<span class="keyword">self</span> <span class="keyword">class</span>] performSelector:selector withObject:<span class="literal">nil</span>];</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 <code>SuppressPerformSelectorLeakWarning</code> 可以参考 <a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程[实例讲解]</a>.</p>
<p>将动态添加的方法让 <code>proxyMethod</code> 来执行, 显示结果达到预期.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod</div><div class="line">---veryitman--- +proxyMethod of class's method for OC.</div></pre></td></tr></table></figure>
<h2 id="创建被转发者"><a href="#创建被转发者" class="headerlink" title="创建被转发者"></a>创建被转发者</h2><p><strong>MZTempObj.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZTempObj</span></span></div><div class="line"></div><div class="line"><span class="comment">/// 类方法</span></div><div class="line">+ (<span class="keyword">void</span>)veryClassMethod</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- veryClassMethod"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这里有类方法的一个实现 <code>veryClassMethod</code>.</p>
<h2 id="重写转发消息的函数"><a href="#重写转发消息的函数" class="headerlink" title="重写转发消息的函数"></a>重写转发消息的函数</h2><p>同理将 <code>resolveClassMethod</code> 修改一下, 为了保证流程继续.</p>
<p>示例代码如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveClassMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 1--- +resolveClassMethod. selector: %@"</span>, <span class="built_in">NSStringFromSelector</span>(sel));</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="comment">// 这里故意将 sPerformClassMethodName 改为 @"", 为了流程往下走</span></div><div class="line">    <span class="keyword">if</span> ([<span class="string">@""</span> isEqualToString:methodName]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 获取 MetaClass</span></div><div class="line">        Class predicateMetaClass = objc_getMetaClass([<span class="built_in">NSStringFromClass</span>(<span class="keyword">self</span>) UTF8String]);</div><div class="line">        <span class="comment">// 根据 metaClass 获取方法的实现</span></div><div class="line">        IMP impletor = class_getMethodImplementation(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</div><div class="line">        <span class="comment">// 获取类方法</span></div><div class="line">        Method predicateMethod = class_getClassMethod(predicateMetaClass, <span class="keyword">@selector</span>(proxyMethod));</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *encoding = method_getTypeEncoding(predicateMethod);</div><div class="line">        </div><div class="line">        <span class="comment">// 动态添加类方法</span></div><div class="line">        class_addMethod(predicateMetaClass, sel, impletor, encoding);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveClassMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 2--- +forwardingTargetForSelector"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([sPerformClassMethodName isEqualToString:selectorName]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 注意1: 也可在此转发实例方法</span></div><div class="line"><span class="meta">#if 0</span></div><div class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></div><div class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> myobject;</div><div class="line"><span class="meta">#endif</span></div><div class="line">        </div><div class="line">        <span class="comment">// 转发类方法对应返回类对象</span></div><div class="line">        <span class="keyword">return</span> [MZTempObj <span class="keyword">class</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 3--- +methodSignatureForSelector"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 找出对应的 aSelector 签名</span></div><div class="line">    <span class="built_in">NSMethodSignature</span> *signature = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</div><div class="line">    </div><div class="line">    <span class="comment">// 注意2: 也可以在此获取实例方法的签名</span></div><div class="line"><span class="meta">#if 0</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == signature) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 是否有 aSelector</span></div><div class="line">        <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:aSelector]) &#123;</div><div class="line">            signature = [MZTempObj instanceMethodSignatureForSelector:aSelector];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> signature;</div><div class="line"><span class="meta">#endif</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == signature) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 是否有 aSelector</span></div><div class="line">        <span class="keyword">if</span> ([MZTempObj respondsToSelector:aSelector]) &#123;</div><div class="line">            </div><div class="line">            <span class="comment">//methodSignatureForSelector 可以获取类方法和实例方法的签名</span></div><div class="line">            <span class="comment">//instanceMethodSignatureForSelector只能获取实例方法的签名</span></div><div class="line">            signature = [MZTempObj methodSignatureForSelector:aSelector];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> signature;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 4--- +forwardInvocation"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 注意3: 也可以调用实例方法</span></div><div class="line"><span class="meta">#if 0</span></div><div class="line">    <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:anInvocation.selector]) &#123;</div><div class="line">        [anInvocation invokeWithTarget:[[MZTempObj alloc] init]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span>;</div><div class="line"><span class="meta">#endif</span></div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([MZTempObj respondsToSelector:anInvocation.selector]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 这里转发的是 MZTempObj Class, 不是对象</span></div><div class="line">        [anInvocation invokeWithTarget:[MZTempObj <span class="keyword">class</span>]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">void</span>)doesNotRecognizeSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 5--- +doesNotRecognizeSelector: %@"</span>, <span class="built_in">NSStringFromSelector</span>(aSelector));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行后, 控制台输出日志:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod. selector: veryClassMethod</div><div class="line">---veryitman--- <span class="number">2</span>--- +forwardingTargetForSelector</div><div class="line">---veryitman--- veryClassMethod</div></pre></td></tr></table></figure>
<p><strong>这里注意一下</strong></p>
<blockquote>
<p>将代码中 <code>注意1</code> <code>注意2</code> 等部分可以自行打开测试一下, 然后将 <code>MZTempObj.m</code> 中的类方法(+veryClassMethod)改为实例方法(-veryClassMethod), 也是可以的, 这样就达到了将类方法转发给实例方法的效果.</p>
</blockquote>
<p>修改一下 <code>forwardingTargetForSelector</code> 中的实现, 可以看到 4, 5也会执行.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 2--- +forwardingTargetForSelector"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([<span class="string">@""</span> isEqualToString:selectorName]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 注意1: 也可在此转发实例方法</span></div><div class="line"><span class="meta">#if 0</span></div><div class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></div><div class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> myobject;</div><div class="line"><span class="meta">#endif</span></div><div class="line">        </div><div class="line">        <span class="comment">// 转发类方法对应返回类对象</span></div><div class="line">        <span class="keyword">return</span> [MZTempObj <span class="keyword">class</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod. selector: veryClassMethod</div><div class="line">---veryitman--- <span class="number">2</span>--- +forwardingTargetForSelector</div><div class="line">---veryitman--- <span class="number">3</span>--- +methodSignatureForSelector</div><div class="line">---veryitman--- <span class="number">1</span>--- +resolveClassMethod. selector: _forwardStackInvocation:</div><div class="line">---veryitman--- <span class="number">4</span>--- +forwardInvocation</div><div class="line">---veryitman--- veryClassMethod</div></pre></td></tr></table></figure>
<p>同理我们可以得到类方法的消息转发流程图, 如下图所示:</p>
<p><img src="/upload/images/2018/04/03/1.jpg" alt="1"></p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程</a></p>
<p><a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程实例讲解</a></p>
<p><a href="http://www.veryitman.com/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/" target="_blank" rel="noopener">OC-RunTime: 总结消息转发中用到的知识点</a></p>
<p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward" target="_blank" rel="noopener">Demo</a>.</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC-RunTime: 消息转发之实例方法的转发流程[实例讲解]]]></title>
      <url>/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/</url>
      <content type="html"><![CDATA[<p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程</a> 分享了消息转发的流程, 本次结合实际例子继续分析一下消息转发流程.</p>
<h2 id="发送不存在的消息"><a href="#发送不存在的消息" class="headerlink" title="发送不存在的消息"></a>发送不存在的消息</h2><p>在 ViewController 的 viewDidLoad 中运行 <code>veryTestMethod</code> 方法.</p>
<p><strong>ViewController.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> * <span class="keyword">const</span> sPerformInstanceMethodName = <span class="string">@"veryTestMethod"</span>;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    </div><div class="line">    <span class="comment">// 运行实例方法</span></div><div class="line">    SEL selector = <span class="built_in">NSSelectorFromString</span>(sPerformInstanceMethodName);</div><div class="line">    </div><div class="line">    SuppressPerformSelectorLeakWarning(</div><div class="line">        [<span class="keyword">self</span> performSelector:selector withObject:<span class="literal">nil</span>];</div><div class="line">    );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中, <code>SuppressPerformSelectorLeakWarning</code> 是定义的一个宏.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define SuppressPerformSelectorLeakWarning(Stuff) \</span></div><div class="line"><span class="keyword">do</span> &#123; \</div><div class="line">    _Pragma(<span class="string">"clang diagnostic push"</span>) \</div><div class="line">    _Pragma(<span class="string">"clang diagnostic ignored \"-Warc-performSelector-leaks\""</span>) \</div><div class="line">    Stuff; \</div><div class="line">    _Pragma(<span class="string">"clang diagnostic pop"</span>) \</div><div class="line">&#125; <span class="keyword">while</span> (<span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>在 ViewController 中我并没有写 <code>veryTestMethod</code> 这个函数, 只是借助 <code>performSelector</code> 动态执行, 如果编译运行直接会 crash.</p>
<p>可以查看 <code>NSObject.mm</code> 源码, 里面关于消息转发的几个重要函数都写着 <code>_objc_fatal</code>, 可谓是招招毙命.</p>
<p>紧接着, 我们可以借助 <code>resolveInstanceMethod</code> 来完成消息转发给 ViewController.</p>
<h2 id="resolveInstanceMethod-转发"><a href="#resolveInstanceMethod-转发" class="headerlink" title="resolveInstanceMethod 转发"></a>resolveInstanceMethod 转发</h2><p>重写 NSObject 中的 <code>resolveInstanceMethod</code> 函数.</p>
<blockquote>
<p>+resolveInstanceMethod</p>
</blockquote>
<p><strong>ViewController.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 记得导入 RunTime 头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 1--- +resolveInstanceMethod"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([sPerformInstanceMethodName isEqualToString:methodName]) &#123;</div><div class="line">        </div><div class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"proxyMethod"</span>);</div><div class="line">        IMP impletor = class_getMethodImplementation(<span class="keyword">self</span>, proxySelector);</div><div class="line">        </div><div class="line">        <span class="comment">// 获取实例方法</span></div><div class="line">        Method method = class_getInstanceMethod(<span class="keyword">self</span>, proxySelector);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</div><div class="line">        </div><div class="line">        <span class="comment">// 添加 OC 的函数</span></div><div class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, impletor, types);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ViewController 中实现的 <code>proxyMethod</code></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// OC 实现</span></div><div class="line">- (<span class="keyword">void</span>)proxyMethod</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- -proxyMethod of instance's method for OC."</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 <code>resolveInstanceMethod</code> 中动态添加了 <code>veryTestMethod</code> 方法, 并让 <code>proxyMethod</code> 函数来实现(IMP).</p>
<p>运行可以看到, 程序并没有 crash, 成功的执行了 <code>proxyMethod</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">---veryitman--- 1--- +resolveInstanceMethod</div><div class="line">---veryitman--- -proxyMethod of instance&apos;s method for OC.</div></pre></td></tr></table></figure>
<p>到此为止, 我们已经看到动态添加一个方法的实现并成功运行的完整例子.</p>
<p>接下来, 我们将转发给其他对象 <code>MZTempObj</code> 来执行.</p>
<h2 id="自定义被转发的对象"><a href="#自定义被转发的对象" class="headerlink" title="自定义被转发的对象"></a>自定义被转发的对象</h2><p><strong>MZTempObj.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MZTempObj</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)veryTestMethod</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- veryTestMethod"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>veryTestMethod</code> 就是我们要转发对应的消息.</p>
<h2 id="消息转发实践"><a href="#消息转发实践" class="headerlink" title="消息转发实践"></a>消息转发实践</h2><p>接下来我们把向 ViewController 发送 <code>veryTestMethod</code> 的消息转发给 <code>MZTempObj</code> 的  <code>veryTestMethod</code> 方法.</p>
<p>继续重写下面函数, 不过 <code>resolveInstanceMethod</code> 要稍微改造一下, 才能达到我们实践的目的.</p>
<blockquote>
<ol>
<li>+resolveInstanceMethod</li>
<li>-forwardingTargetForSelector</li>
<li>-methodSignatureForSelector</li>
<li>-forwardInvocation</li>
<li>-doesNotRecognizeSelector:</li>
</ol>
</blockquote>
<p><strong>ViewController.m</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 记得导入 RunTime 头文件</span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;objc/runtime.h&gt;</span></span></div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 1--- +resolveInstanceMethod: %@"</span>, <span class="built_in">NSStringFromSelector</span>(sel));</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *methodName = <span class="built_in">NSStringFromSelector</span>(sel);</div><div class="line">    </div><div class="line">    <span class="comment">// 这里故意为之, 让流程往下走</span></div><div class="line">    <span class="keyword">if</span> ([<span class="string">@""</span> isEqualToString:methodName]) &#123;</div><div class="line">        </div><div class="line">        SEL proxySelector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"proxyMethod"</span>);</div><div class="line">        IMP impletor = class_getMethodImplementation(<span class="keyword">self</span>, proxySelector);</div><div class="line">        </div><div class="line">        <span class="comment">// 获取实例方法</span></div><div class="line">        Method method = class_getInstanceMethod(<span class="keyword">self</span>, proxySelector);</div><div class="line">        <span class="keyword">const</span> <span class="keyword">char</span> *types = method_getTypeEncoding(method);</div><div class="line">        </div><div class="line">        <span class="comment">// 添加 OC 的函数</span></div><div class="line">        class_addMethod([<span class="keyword">self</span> <span class="keyword">class</span>], sel, impletor, types);</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 转发给对应的某个对象来执行 aSelector</span></div><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 2--- -forwardingTargetForSelector"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([sPerformInstanceMethodName isEqualToString:selectorName]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></div><div class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> myobject;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 3--- -methodSignatureForSelector"</span>);</div><div class="line">    </div><div class="line">    <span class="comment">// 找出对应的 aSelector 签名</span></div><div class="line">    <span class="built_in">NSMethodSignature</span> *signature = [<span class="keyword">super</span> methodSignatureForSelector:aSelector];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="literal">nil</span> == signature) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 是否有 aSelector</span></div><div class="line">        <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:aSelector]) &#123;</div><div class="line">            signature = [MZTempObj instanceMethodSignatureForSelector:aSelector];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">        </div><div class="line">    <span class="keyword">return</span> signature;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)forwardInvocation:(<span class="built_in">NSInvocation</span> *)anInvocation</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 4--- -forwardInvocation"</span>);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([MZTempObj instancesRespondToSelector:anInvocation.selector]) &#123;</div><div class="line">        [anInvocation invokeWithTarget:[[MZTempObj alloc] init]];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">super</span> forwardInvocation:anInvocation];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)doesNotRecognizeSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 5--- -doesNotRecognizeSelector: %@"</span>, <span class="built_in">NSStringFromSelector</span>(aSelector));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行程序, 控制台打印结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">---veryitman--- 1--- +resolveInstanceMethod</div><div class="line">---veryitman--- 2--- -forwardingTargetForSelector</div><div class="line">---veryitman--- veryTestMethod</div></pre></td></tr></table></figure>
<p>这里对照之前的流程图是完全符合的, 那么怎么让其执行 3 和 4 呢? 很简单, 修改一下 <code>forwardingTargetForSelector</code> 里面的实现即可.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"---veryitman--- 2--- -forwardingTargetForSelector"</span>);</div><div class="line">    </div><div class="line">    <span class="built_in">NSString</span> *selectorName = <span class="built_in">NSStringFromSelector</span>(aSelector);</div><div class="line">    </div><div class="line">    <span class="comment">// 故意为之</span></div><div class="line">    <span class="keyword">if</span> ([<span class="string">@""</span> isEqualToString:selectorName]) &#123;</div><div class="line">        </div><div class="line">        <span class="comment">// 让 MZTempObj 去执行 aSelector, 实现消息的转发</span></div><div class="line">        MZTempObj *myobject = [[MZTempObj alloc] init];</div><div class="line">        </div><div class="line">        <span class="keyword">return</span> myobject;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">id</span> obj = [<span class="keyword">super</span> forwardingTargetForSelector:aSelector];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次执行看结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">---veryitman--- 1--- +resolveInstanceMethod veryTestMethod</div><div class="line">---veryitman--- 2--- -forwardingTargetForSelector</div><div class="line">---veryitman--- 3--- -methodSignatureForSelector</div><div class="line">---veryitman--- 1--- +resolveInstanceMethod: _forwardStackInvocation:</div><div class="line">---veryitman--- 4--- -forwardInvocation</div><div class="line">---veryitman--- veryTestMethod</div></pre></td></tr></table></figure>
<p><strong>注意:</strong> 这里在 3后面会多了一个 <code>1--- resolveInstanceMethod</code> 的打印, 是系统调用的, 此时对应的 sel 是 <code>_forwardStackInvocation</code>.</p>
<p>如果不去重写 <code>methodSignatureForSelector</code> 打印结果如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">---veryitman--- 1--- +resolveInstanceMethod</div><div class="line">---veryitman--- 2--- -forwardingTargetForSelector</div><div class="line">---veryitman--- 5--- -doesNotRecognizeSelector: veryTestMethod</div></pre></td></tr></table></figure>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1.Apple RunTime 源码 <a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="noopener">objc4-723.tar.gz</a></p>
<p>2.<a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1" target="_blank" rel="noopener">Message Forwarding</a></p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="http://www.veryitman.com/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程</a></p>
<p><a href="http://www.veryitman.com/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">OC-RunTime: 消息转发之类方法的转发流程</a></p>
<p><a href="http://www.veryitman.com/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/" target="_blank" rel="noopener">OC-RunTime: 总结消息转发中用到的知识点</a></p>
<p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward" target="_blank" rel="noopener">Demo</a>.</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[OC-RunTime: 消息转发之实例方法的转发流程]]></title>
      <url>/2018/03/31/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>本篇只是从系统函数的实现上, 来分析消息转发的流程. </p>
<p>下一篇结合本篇的理论和实际的例子来分析一下消息转发.</p>
<h2 id="需要明确的几个问题"><a href="#需要明确的几个问题" class="headerlink" title="需要明确的几个问题"></a>需要明确的几个问题</h2><p>在往下看这篇博文之前, 有几个问题需要大家达成共识.</p>
<p><strong>1.Objective-C 的特点</strong><br>按照是否需要编译的原理来说, 编程语言一般可以分为静态编译类型和动态解释类型.</p>
<p>如 Java/C/C++ 是属于编译类型的语言, Php/Python/Ruby 属于解释类型的语言.</p>
<p>Objective-C 是基于 C 并具有自身特点的编译型语言, 再加上其 RunTime 机制, Objective-C 既是编译型又是动态的一门编程语言. 所谓的动态指的是在程序编译后运行中可以改变其结构.</p>
<p><strong>2.函数调用</strong><br>在 Objective-C 中调用函数, 被解释为向一个对象发送消息, 该对象可以是类对象也可以是实例对象.</p>
<p>例如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[person play];</div></pre></td></tr></table></figure>
<p>意思是向实例对象 person 发送一个 play 的消息. </p>
<p>还有一个比较有意思的是, 向一个空对象(nil) 发送消息不会 crash, 如果在 Java 中这个是不行的.例如:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">person = <span class="literal">nil</span>;</div><div class="line">[person play];</div></pre></td></tr></table></figure>
<p>这个不会导致程序崩溃, 只是调用 <code>play</code> 函数没有任何反应罢了!</p>
<p><strong>3.self</strong><br>在 C++/Java 语言中, 有 this 指针的概念, 在 Objective-C 中, 也有类似的 this 指针即 self. self 既可以是实例对象也可以是类对象.</p>
<p>这里举个例子, 下面两个同名函数, 一个是类方法(+)一个是实例方法(-).<br>跟 Java 中的类似, 实例方法可以直接使用类方法, 但是类方法不可以直接使用实例方法.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">void</span>)testClassMethod</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> sendMsg];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)testInstanceMethod</div><div class="line">&#123;</div><div class="line">    [<span class="keyword">self</span> sendMsg];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 类方法</span></div><div class="line">+ (<span class="keyword">void</span>)sendMsg</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"+ sendMsg. self: %@"</span>, <span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实例方法</span></div><div class="line">- (<span class="keyword">void</span>)sendMsg</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"- sendMsg. self: %@"</span>, <span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 ViewController 中分别调用两个 test 方法, 输出内容, 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ sendMsg. <span class="keyword">self</span>: ViewController</div><div class="line"></div><div class="line">- sendMsg. <span class="keyword">self</span>: &lt;ViewController: <span class="number">0x7fc64740a5e0</span>&gt;</div></pre></td></tr></table></figure>
<p>从结果可以看出类方法中的 <code>self</code> 代表的是该类, 实例方法中的 <code>self</code> 指的是类的一个实例即对象.</p>
<p>更多 <code>self</code> 的知识点，可以参考 <a href="http://www.veryitman.com/2018/12/23/OC-self/" target="_blank" rel="noopener">OC: self</a> 这篇文章。</p>
<h2 id="关于-Message-Forwarding"><a href="#关于-Message-Forwarding" class="headerlink" title="关于 Message Forwarding"></a>关于 Message Forwarding</h2><p>Message Forwarding 即消息转发. </p>
<p>关于消息转发, 官方文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1" target="_blank" rel="noopener">Message Forwarding</a> 是这么解释的:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Sending a message to an object that does not handle that message is an error. However, </div><div class="line">before announcing the error, </div><div class="line">the runtime system gives the receiving object a second chance to handle the message.</div></pre></td></tr></table></figure>
<p>大概意思是这样的:</p>
<blockquote>
<p>向一个对象发送消息, 该对象如果无法处理该消息, 系统就会报错, 但是在报错之前, 利用 Objective-C 提供的运行时机制可以防止报错的发生. 在 iOS 中类似这样的报错会导致程序直接 crash.<br>这里的对象, 可以是实例对象又可以是类对象.</p>
</blockquote>
<p>在开发过程中, 大家一般都会遇到类似的 crash:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> *** Terminating app due to uncaught exception  </div><div class="line">'NSInvalidArgumentException', </div><div class="line">reason: '-[Controller play]: unrecognized selector sent to instance 0x7ff779f322a0'</div><div class="line">*** First throw call stack:</div><div class="line">(</div><div class="line">CoreFoundation  <span class="number">0x000000010d89712b</span> __exceptionPreprocess + <span class="number">171</span></div><div class="line">libobjc.A.dylib <span class="number">0x000000010cf2bf41</span> objc_exception_throw + <span class="number">48</span></div><div class="line">CoreFoundation  <span class="number">0x000000010d918024</span> -[<span class="built_in">NSObject</span>(<span class="built_in">NSObject</span>) doesNotRecognizeSelector:] + <span class="number">132</span></div><div class="line"><span class="built_in">UIKit</span> 			<span class="number">0x000000010df48f51</span> -[<span class="built_in">UIResponder</span> doesNotRecognizeSelector:] + <span class="number">295</span></div><div class="line">CoreFoundation  <span class="number">0x000000010d819f78</span> ___forwarding___ + <span class="number">1432</span></div><div class="line">CoreFoundation  <span class="number">0x000000010d819958</span> _CF_forwarding_prep_0 + <span class="number">120</span></div><div class="line">)</div></pre></td></tr></table></figure>
<p>这个 crash 很明显, <code>Controller</code> 中调用了一个不存在的函数 <code>play</code>.</p>
<p>这里可以看到一个被调用的系统函数 <code>doesNotRecognizeSelector</code>, 今天我们剖析一下消息转发的流程.</p>
<h2 id="实例方法-消息-转发的流程"><a href="#实例方法-消息-转发的流程" class="headerlink" title="实例方法(消息)转发的流程"></a>实例方法(消息)转发的流程</h2><p>在上面已经说过, OC 可以通过运行时来避免因为找不到方法而导致错误.</p>
<p>其实, 含义就是 OC 给了我们第二次机会来避免类似的错误.</p>
<p>我们重写 NSObject 中的 5 个方法, 分别是:</p>
<blockquote>
<ol>
<li>+resolveInstanceMethod</li>
<li>-forwardingTargetForSelector</li>
<li>-methodSignatureForSelector</li>
<li>-forwardInvocation</li>
<li>-doesNotRecognizeSelector:</li>
</ol>
</blockquote>
<p>当无法找到对应的方法时, 调用的方法和顺序大致如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+resolveInstanceMethod</div><div class="line">-forwardingTargetForSelector</div><div class="line">-methodSignatureForSelector</div><div class="line">-doesNotRecognizeSelector:</div></pre></td></tr></table></figure>
<p>当找到对应的方法时, 调用方法和顺序大致如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+resolveInstanceMethod</div><div class="line">-forwardingTargetForSelector</div><div class="line">-methodSignatureForSelector</div><div class="line">-forwardInvocation</div></pre></td></tr></table></figure>
<p>根据实践结果, 画流程图如下:<br><img src="/upload/images/2018/03/31/1.jpg" alt="1"></p>
<p>下面分别解释一下这几个方法的作用和意义.</p>
<p><strong>+ (BOOL)resolveInstanceMethod:(SEL)sel</strong></p>
<p>解析对应的实例方法. 在该方法中允许增加一个方法的实现, 从而实现动态添加方法.</p>
<p>默认返回 NO.</p>
<p>在 <code>NSObject.mm</code> 中可以看到方法的实现:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>- (id)forwardingTargetForSelector:(SEL)aSelector</strong></p>
<p>将对应的 selector 转发给指定的对象. 换句话说就是将之前没有实现的 selector 转交给另外一个可能实现了该 selector 的对象去处理.</p>
<p>默认返回 nil.</p>
<p><strong>- (NSMethodSignature *)methodSignatureForSelector:(SEL)aSelector</strong></p>
<p>该方法返回对 selector 实现的方法签名.</p>
<p>默认实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSMethodSignature</span> *)methodSignatureForSelector:(SEL)sel &#123;</div><div class="line">    _objc_fatal(<span class="string">"-[NSObject methodSignatureForSelector:] "</span></div><div class="line">                <span class="string">"not available without CoreFoundation"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>- (void)forwardInvocation:(NSInvocation *)anInvocation</strong></p>
<p>该方法是依赖第3个方法的, 如果第三个方法找到了对应的方法签名, 该方法就可以实现转向调用了.</p>
<p><strong>- (void)doesNotRecognizeSelector:(SEL)sel</strong></p>
<p>如果前面几个方法都没有处理好, 系统会调用该方法, 直接导致程序 crash, 也称之为终极死亡方法.</p>
<p>源码实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)doesNotRecognizeSelector:(SEL)sel &#123;</div><div class="line">    _objc_fatal(<span class="string">"-[%s %s]: unrecognized selector sent to instance %p"</span>, </div><div class="line">                object_getClassName(<span class="keyword">self</span>), sel_getName(sel), <span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>总结, Objective-C 中给一个对象发送消息会经过如下几个步骤：</p>
<p><strong>步骤1.</strong> 在类的调度表(dispatch table) 中找要执行的函数(消息), 如果找到了，到相应的函数 IMP 去执行.</p>
<blockquote>
<p>每个类的结构体包含着两个必备的元素:<br>[1]. 指向父类的指针<br>[2]. class dispatch table(调度表). 调度表中包含了 method selectors 和特定 class 相应方法实现的地址.</p>
</blockquote>
<p><strong>步骤2.</strong> 如果没找到，运行时会调用 +resolveInstanceMethod: 或者 +resolveClassMethod: 尝试解析这个消息. 在该方法中, 允许动态添加一个方法的实现.</p>
<blockquote>
<p>关于 <code>resolveClassMethod</code> 这个放在另一篇博客中讲解.</p>
</blockquote>
<p><strong>步骤3.</strong> 如果 resolveXX 返回 YES, 直接结束后面的流程, 执行解析得到的方法. 如果 resolveXX 返回 NO，运行时就发送 forwardingTargetForSelector 消息, 允许这个消息转发给另一个可能实现了对应 selector 的对象.</p>
<p><strong>步骤4.</strong> 如果没有新的目标对象返回, 运行时就会发送methodSignatureForSelector 消息, 找到对应的方法签名.<br>如果找到了, 会接着调用 forwardInvocation, 如果没有找到即返回 nil, 那么直接调用 doesNotRecognizeSelector.</p>
<p>下一篇结合实际例子分析一下整个实例方法的转发流程.</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>1.Apple 开发者文档 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtForwarding.html#//apple_ref/doc/uid/TP40008048-CH105-SW1" target="_blank" rel="noopener">Message Forwarding</a></p>
<p>2.Apple RunTime 源码 <a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="noopener">objc4-723.tar.gz</a></p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="http://www.veryitman.com/2018/04/01/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B-%E5%AE%9E%E4%BE%8B%E8%AE%B2%E8%A7%A3/" target="_blank" rel="noopener">OC-RunTime: 消息转发之实例方法的转发流程实例讲解</a></p>
<p><a href="http://www.veryitman.com/2018/04/03/OC-RunTime-%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B9%8B%E7%B1%BB%E6%96%B9%E6%B3%95%E7%9A%84%E8%BD%AC%E5%8F%91%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">OC-RunTime: 消息转发之类方法的转发流程</a></p>
<p><a href="http://www.veryitman.com/2018/04/05/OC-RunTime-%E6%80%BB%E7%BB%93%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91%E4%B8%AD%E7%94%A8%E5%88%B0%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/" target="_blank" rel="noopener">OC-RunTime: 总结消息转发中用到的知识点</a></p>
<p>点击下载文中完整的 <a href="https://github.com/veryitman/iOSDemo/tree/master/MZRuntimeMsgForward" target="_blank" rel="noopener">Demo</a>.</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS RunTime MessageForward </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MacOS 文件大小的单位]]></title>
      <url>/2018/03/24/MacOS-%E6%96%87%E4%BB%B6%E5%A4%A7%E5%B0%8F%E7%9A%84%E5%8D%95%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>我一直以为文件大小都是按照 <code>1024</code> 为单位来计算的, 但是在 MacOS 上面是按照 <code>1000</code> 为单位计算的, windows 上面是按照 <code>1024</code> 为单位来计算的.</p>
<h2 id="偶然的发现"><a href="#偶然的发现" class="headerlink" title="偶然的发现"></a>偶然的发现</h2><p>之前写代码, 需要用到获取文件大小的功能, 代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 读取文件大小</div><div class="line">long getFileSize(char *filename) &#123;</div><div class="line">    </div><div class="line">    FILE *fp = fopen(filename, &quot;r&quot;);</div><div class="line">    if (!fp) &#123;</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fseek(fp, 0, SEEK_END);</div><div class="line">    </div><div class="line">    long size = ftell(fp);</div><div class="line">    fclose(fp);</div><div class="line">    </div><div class="line">    return size;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>文件名是 <code>mm.aac</code>, 一个音频文件, 获取到的文件大小是 <code>76395</code> 字节.</p>
<p>我无聊至极, 使用 <code>du</code> 命令来获取该文件的大小:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">du -sh mm.aac</div></pre></td></tr></table></figure>
<p>显示文件大小是 <code>76KB</code>.</p>
<p>MacOS 上面查看文件属性, 获取到的大小也是 <code>76KB</code></p>
<p><img src="/upload/images/2018/03/24/1.jpg" alt="1"></p>
<p>二者获取的文件大小一致, 可以看出文件的大小是正确的.</p>
<p>于是我查了一下在 windows 上面的该文件的大小, 如下截图:</p>
<p><img src="/upload/images/2018/03/24/2.png" alt="1"></p>
<p>可以看出, MacOS 上面文件大小是按照 1000 单位来计算的, 而 windows 上面是按照 1024 单位来计算的.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">76395 / 1000 = 76.395</div><div class="line">76395 / 1024 = 74.604</div></pre></td></tr></table></figure>
<blockquote>
<p>按照 GNU 的习惯，单纯的 <code>K</code> <code>M</code> <code>G</code> <code>T</code> 分别指代 <code>KiB</code> <code>MiB</code> <code>GiB</code> <code>TiB</code> 以 1024 进制数据量单位，用 <code>KB</code> <code>MB</code> <code>GB</code> <code>TB</code> 以 1000 进制数据量单位. </p>
</blockquote>
<p>所以, 在 windows 上面准确表示 <code>76395bytes</code> 应该是 <code>74.6KiB</code>.</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>在线计算 <a href="http://www.justintools.com/unit-conversion/data-storage.php?" target="_blank" rel="noopener">单位换算</a>.</p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS C 文件大小单位 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GO: 写第一个 GOLang 程序]]></title>
      <url>/2018/03/11/GO-%E5%86%99%E7%AC%AC%E4%B8%80%E4%B8%AA-GOLang-%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>本文分享在 MacOS 上面通过 pkg 的方式安装 GO 编程环境, 以及编译运行第一个使用 GOLang 编写的程序.</p>
<p>其他关于 GO 的安装方式, 如使用 Homebrew 安装或者使用源码安装的方式, 请自行尝试.</p>
<h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><p>在 <a href="https://golang.org/doc/install" target="_blank" rel="noopener">这里</a> 下载 GO 的 pkg 安装包.</p>
<p>但是你需要科(fan)学(qiang)才能下载.</p>
<p><img src="/upload/images/2018/03/11/1.jpg" alt="1"></p>
<p>你也可以下载 Stable versions.</p>
<p>下载完成后, 直接双击安装即可.</p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>安装完成后, GO 安装目录在 <code>/usr/local</code> 下面.</p>
<p>安装目录如下图所示:</p>
<p><img src="/upload/images/2018/03/11/2.jpg" alt="1"></p>
<p>需要将其设置到环境变量中, 才能在终端使用其相关的命令.</p>
<p>编辑 <code>~/.bash_profile</code>, 增加下面几行即可.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"># Golang</div><div class="line"></div><div class="line">export GOROOT=/usr/local/go</div><div class="line">export GOPATH=~/gowork</div><div class="line">export PATH=$GOROOT/bin:$GOPATH:$PATH</div></pre></td></tr></table></figure>
<blockquote>
<p>记住, GOROOT 和 GOPATH 必须设置.<br><code>gowork</code> 是我自己新建的目录. GOPATH 可以理解为工作目录.</p>
</blockquote>
<p>关于 GOPATH 可以参考这个文档 <a href="https://github.com/golang/go/wiki/SettingGOPATH" target="_blank" rel="noopener">SettingGOPATH</a>.</p>
<p>我刚开始没有配置 GOROOT 变量, 执行 go 命令会提示警告, 警告内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">warning: GOPATH set to GOROOT (/usr/local/go) has no effect</div></pre></td></tr></table></figure>
<p>编辑保存, 然后使其立即生效.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>检查环境变量是否生效.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go version</div></pre></td></tr></table></figure>
<p>对应输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go version go1.9.4 darwin/amd64</div></pre></td></tr></table></figure>
<p>也可以使用 <code>go env</code> 来查看更加详细的内容.</p>
<h2 id="编译运行-GOLang-程序"><a href="#编译运行-GOLang-程序" class="headerlink" title="编译运行 GOLang 程序"></a>编译运行 GOLang 程序</h2><p><strong>1.编写代码</strong></p>
<p>编辑一个 <code>Hello GOLang</code> 的程序.</p>
<p>在任意一个文件夹位置, 新建一个 <code>go_hello.go</code> 的文件.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch go_hello.go</div></pre></td></tr></table></figure>
<p>写入如下程序:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">package main</div><div class="line"></div><div class="line">import &quot;fmt&quot;</div><div class="line"></div><div class="line">func main() &#123;</div><div class="line">   fmt.Println(&quot;Hello, GOLang!&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>2.编译运行</strong></p>
<p>使用 <code>go build</code> 命令编译.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build go_hello.go</div></pre></td></tr></table></figure>
<p>编译成功后, 生成可执行文件 <code>go_hello</code>. 执行即可.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./go_hello</div></pre></td></tr></table></figure>
<p>或者直接运行, 执行下面的命令.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go run go_hello.go</div></pre></td></tr></table></figure>
<p>这个不会生成可执行文件.</p>
<p>至此, GO 的编程环境已经搭建完成, 比较简单.</p>
<h2 id="卸载-GO"><a href="#卸载-GO" class="headerlink" title="卸载 GO"></a>卸载 GO</h2><p>如果你想卸载 GO 环境, 只需要三个步骤.</p>
<p><strong>1.删除安装目录</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -fr /usr/local/go</div></pre></td></tr></table></figure>
<p><strong>2.删除 go 文件</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm -f /etc/paths.d/go</div></pre></td></tr></table></figure>
<p><strong>3.删除环境变量</strong></p>
<p>编辑 etc, 删除对应添加的 go 环境变量即可.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://golang.org/doc/install" target="_blank" rel="noopener">GO: Getting Started</a></p>
<p><a href="https://golang.org/doc/" target="_blank" rel="noopener">GO: DOC</a></p>
<p><a href="https://github.com/golang/go/wiki/SettingGOPATH" target="_blank" rel="noopener">SettingGOPATH</a></p>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GOLanguage Google </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C 指针与 OC 对象之间的转换]]></title>
      <url>/2018/03/07/C-%E6%8C%87%E9%92%88%E4%B8%8E-OC-%E5%AF%B9%E8%B1%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h2 id="Core-Foundation-框架"><a href="#Core-Foundation-框架" class="headerlink" title="Core Foundation 框架"></a>Core Foundation 框架</h2><p>Core Foundation 框架 (CoreFoundation.framework) 是一组 C 语言接口， 简称 CF. </p>
<p>它们为 iOS 应用程序提供基本数据管理和服务功能.</p>
<p>如 Core Graphics、Core Text，并且我们可能需要将 CF 对象和OC 对象进行相互转化，ARC 下，编译器不会自动管理 CF 对象的内存，我们需要手动管理. </p>
<p>创建一个 CF 对象使用后, 需要使用 CFRelease 将其手动释放, 换句话说, Core Foundation 对象类型不在 ARC 管理范畴内.</p>
<p>如何将 CF 和 OC 对象有效的结合起来, 在 ARC 环境下, 提供了 <code>桥接</code> 的技术, 即 ARC 下 OC 对象和 Core Foundation 对象之间的桥梁.</p>
<h2 id="ARC-桥接"><a href="#ARC-桥接" class="headerlink" title="ARC 桥接"></a>ARC 桥接</h2><p>ARC 下 C 指针与 OC 指针(对象)之间转换, 一般会用到下面的方法.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">__bridge_retained &lt;<span class="meta">#CF type#&gt;)<span class="meta-string">&lt;#expression#&gt;</span></span></div><div class="line"></div><div class="line">__bridge_transfer &lt;<span class="meta">#Objective-C type#&gt;)<span class="meta-string">&lt;#expression#&gt;</span></span></div><div class="line"></div><div class="line">__bridge &lt;<span class="meta">#type#&gt;)<span class="meta-string">&lt;#expression#&gt;</span></span></div></pre></td></tr></table></figure>
<p>也就是所谓的 <code>桥接</code>, 它是 Object-C 在 ARC 环境下开发出来的一种用作转换 C 指针跟 OC (类)指针的一种转换技术, 所以是 ARC 下的称谓, 在 MRC 下没有 <code>桥接</code>.</p>
<p>针对内存管理问题，ARC 可以管理 Objective-C 对象, 但不支持 Core Foundation 对象的管理，所以转换后要注意一个问题：谁来释放使用后的对象.</p>
<p>结合 ARC 和 内存管理, 下面分别介绍一下.</p>
<p>Core Foundation 对象必须使用 CFRetain 和 CFRelease 来进行内存管理.<br>当使用 Objective-C 和 Core Foundation 对象相互转换的时候，必须让编译器知道，到底由谁来负责释放对象，是否交给 ARC 处理, 只有正确的处理，才能避免内存泄漏和 double free 导致程序崩溃.</p>
<h2 id="bridge-retained-lt-CF-type-gt-lt-expression-gt"><a href="#bridge-retained-lt-CF-type-gt-lt-expression-gt" class="headerlink" title="__bridge_retained &lt;#CF type#&gt;)&lt;#expression#&gt;"></a>__bridge_retained &lt;#CF type#&gt;)&lt;#expression#&gt;</h2><p><code>__bridge_retained</code> 等同于 <code>CFBridgingRetain()</code>.</p>
<p>将 Objective-C 对象转换为 Core Foundation 对象，把对象所有权桥接给 Core Foundation 对象，同时剥夺 ARC 的管理权，后续需要开发者使用 CFRelease 或者相关方法手动来释放 CF 对象.</p>
<p>示例:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *cPointer;</div><div class="line"><span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line"></div><div class="line"><span class="comment">//将 OC 对象转换为 C 指针</span></div><div class="line">cPointer = (__bridge_retained <span class="keyword">void</span>*)objc;</div><div class="line"></div><div class="line"><span class="comment">//use cPointer ...</span></div><div class="line"></div><div class="line"><span class="comment">//需要释放资源</span></div><div class="line"><span class="built_in">CFRelease</span>(cPointer);</div></pre></td></tr></table></figure>
<p>在 ARC 下, CFBridgingRetain 实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_INLINE</span> <span class="built_in">CF_RETURNS_RETAINED</span> <span class="built_in">CFTypeRef</span> _Nullable <span class="built_in">CFBridgingRetain</span>(<span class="keyword">id</span> _Nullable X) &#123;</div><div class="line">    <span class="keyword">return</span> (__bridge_retained <span class="built_in">CFTypeRef</span>)X;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 CFTypeRef, 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="built_in">CF_BRIDGED_TYPE</span>(<span class="keyword">id</span>) <span class="keyword">void</span> * <span class="built_in">CFTypeRef</span>;</div></pre></td></tr></table></figure>
<p>所以 CFBridgingRetain 返回值是 <code>const void *</code> 类型的.</p>
<p>上面的示例可以改写为:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">void</span> *cPointer;</div><div class="line"><span class="keyword">const</span> <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">cPointer = <span class="built_in">CFBridgingRetain</span>(objc);</div><div class="line">    </div><div class="line"><span class="comment">//use cPointer ...</span></div><div class="line">    </div><div class="line"><span class="built_in">CFRelease</span>(cPointer);</div></pre></td></tr></table></figure>
<h2 id="bridge-transfer-lt-Objective-C-type-gt-lt-expression-gt"><a href="#bridge-transfer-lt-Objective-C-type-gt-lt-expression-gt" class="headerlink" title="__bridge_transfer &lt;#Objective-C type#&gt;)&lt;#expression#&gt;"></a>__bridge_transfer &lt;#Objective-C type#&gt;)&lt;#expression#&gt;</h2><p><code>__bridge_transfer</code> 等同于 <code>CFBridgingRelease()</code>.</p>
<p>将非 OC 对象转换为 OC 对象，同时将对象的管理权交给 ARC，开发者无需手动管理内存.</p>
<p>示例:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CFUUIDRef</span> uuid = <span class="built_in">CFUUIDCreate</span>(kCFAllocatorDefault);</div><div class="line"><span class="built_in">CFStringRef</span> strUUID = <span class="built_in">CFUUIDCreateString</span>(kCFAllocatorDefault, uuid);</div><div class="line"><span class="built_in">NSString</span> *str = (__bridge_transfer <span class="built_in">NSString</span> *)strUUID;</div><div class="line"></div><div class="line"><span class="comment">//无需释放 strUUID</span></div><div class="line"><span class="comment">//CFRelease(strUUID);</span></div><div class="line"></div><div class="line"><span class="built_in">CFRelease</span>(uuid);</div></pre></td></tr></table></figure>
<p>CFBridgingRelease 实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NS_INLINE</span> <span class="keyword">id</span> _Nullable <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFTypeRef</span> <span class="built_in">CF_CONSUMED</span> _Nullable X) &#123;</div><div class="line">    <span class="keyword">return</span> (__bridge_transfer <span class="keyword">id</span>)X;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的示例可以改写为:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CFUUIDRef</span> uuid = <span class="built_in">CFUUIDCreate</span>(kCFAllocatorDefault);</div><div class="line"><span class="built_in">CFStringRef</span> strUUID = <span class="built_in">CFUUIDCreateString</span>(kCFAllocatorDefault, uuid);</div><div class="line"><span class="built_in">NSString</span> *str = <span class="built_in">CFBridgingRelease</span>(strUUID);</div><div class="line">    </div><div class="line"><span class="comment">//无需释放 strUUID</span></div><div class="line"><span class="comment">//CFRelease(strUUID);</span></div><div class="line">    </div><div class="line"><span class="built_in">CFRelease</span>(uuid);</div></pre></td></tr></table></figure>
<h2 id="bridge"><a href="#bridge" class="headerlink" title="__bridge"></a>__bridge</h2><p><code>__bridge</code> 不改变对象所有权, 需要我们自己来管理内存, 它也是我们经常使用的方法, 从某种程度上来说, 它是上面两个方法的简化版本.</p>
<p><code>__bridge</code> 可以将 OC 对象 与 C 指针相互转换, 示例:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//CFString -&gt; OC 对象</span></div><div class="line"><span class="built_in">CFStringRef</span> cfString = <span class="built_in">CFStringCreateWithCString</span>(kCFAllocatorDefault, <span class="string">"very"</span>, kCFStringEncodingUTF8);</div><div class="line"><span class="built_in">NSString</span> *nsString = (__bridge <span class="built_in">NSString</span> *)cfString;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"CFString -&gt; NSString: %@"</span>, nsString);</div><div class="line"><span class="built_in">CFRelease</span>(cfString);</div></pre></td></tr></table></figure>
<p>如果将 <code>CFRelease(cfString)</code> 注释掉, Xcode 的静态检测器会告诉你有内存泄露的情况, 如图:<br><img src="/upload/images/2018/03/07/2.png" alt="1"></p>
<p>再来另外一个例子, 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//OC 对象 -&gt; CFString</span></div><div class="line"><span class="built_in">NSString</span> *nstr = <span class="string">@"itman"</span>;</div><div class="line"><span class="built_in">CFStringRef</span> cfStringRef = (__bridge <span class="built_in">CFStringRef</span>)nstr;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"NSString -&gt; CFString: %@"</span>, cfStringRef);</div><div class="line"><span class="built_in">CFRelease</span>(cfStringRef);</div></pre></td></tr></table></figure>
<p>无论是使用 <code>CFRelease(cfStringRef)</code>, 还是注释掉 <code>CFRelease(cfStringRef)</code>, 静态检测器都不会报错. 说明这种情况下, 当前的内存管理已经被 OC 对象管理.</p>
<h2 id="经典例子"><a href="#经典例子" class="headerlink" title="经典例子"></a>经典例子</h2><h3 id="NSString-与-CFString-转换"><a href="#NSString-与-CFString-转换" class="headerlink" title="NSString 与 CFString 转换"></a>NSString 与 CFString 转换</h3><p>1、NSString → CFString</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *string = <span class="string">@"veryitman.com"</span>;</div><div class="line">    <span class="comment">// 方法1: 不需要释放</span></div><div class="line">    <span class="built_in">CFStringRef</span> cfStr = (__bridge <span class="built_in">CFStringRef</span>)string;</div><div class="line">    </div><div class="line">    <span class="comment">// 方法2: 需要释放, 这里 retain 了</span></div><div class="line">    <span class="built_in">CFStringRef</span> cfStr2 = (__bridge_retained <span class="built_in">CFStringRef</span>)string;</div><div class="line">    <span class="built_in">CFRelease</span>(cfStr2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2、CFString → NSString</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CFStringRef</span> cfStr = <span class="built_in">CFStringCreateWithCString</span>(kCFAllocatorDefault, <span class="string">"veryitman"</span>, kCFStringEncodingUnicode);</div><div class="line">    </div><div class="line"><span class="comment">// 方法1: 需要释放</span></div><div class="line"><span class="built_in">NSString</span> *string = (__bridge <span class="built_in">NSString</span> *)cfStr;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"OC string: %@"</span>, string);</div><div class="line"><span class="built_in">CFRelease</span>(cfStr);</div><div class="line">    </div><div class="line"><span class="comment">// 方法2: 不需要释放, __bridge_transfer 自带 release</span></div><div class="line">string = (__bridge_transfer <span class="built_in">NSString</span> *)cfStr;</div></pre></td></tr></table></figure>
<h3 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h3><p>运行下面的示例:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *p;</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">    p = (__bridge <span class="keyword">void</span>*)objc;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"mark: %@"</span>, (__bridge <span class="built_in">NSObject</span>*)p);</div></pre></td></tr></table></figure>
<p>会直接 crash, 如图:</p>
<p><img src="/upload/images/2018/03/07/1.jpg" alt="1"></p>
<p>当 <code>objc</code> 这个对象超出作用域范围，其内存就会被回收，接着在作用域范围外用 <code>void *p</code> 去访问 <code>objc</code> 的内存，就造成了野指针.</p>
<p>结合上面所说的, 我们可以让指针 p 对 objc 进行引用即 retain 操作, 修改如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *p;</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">    <span class="comment">//p = (__bridge void*)objc;</span></div><div class="line">    p = (__bridge_retained <span class="keyword">void</span>*)objc;</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"mark: %@"</span>, (__bridge <span class="built_in">NSObject</span>*)p);</div><div class="line">    </div><div class="line"><span class="comment">// 一定要释放</span></div><div class="line"><span class="built_in">CFRelease</span>(p);</div></pre></td></tr></table></figure>
<p>可以正常的运行. 还可以修改为另一种方式:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> *p;</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSObject</span> *objc = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">    <span class="comment">//p = (__bridge void*)objc;</span></div><div class="line">    <span class="comment">//p = (__bridge_retained void*)objc;</span></div><div class="line">    p = (<span class="keyword">void</span> *)<span class="built_in">CFBridgingRetain</span>(objc);</div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"mark: %@"</span>, (__bridge <span class="built_in">NSObject</span>*)p);</div><div class="line">    </div><div class="line"><span class="comment">// 一定要释放</span></div><div class="line"><span class="built_in">CFRelease</span>(p);</div></pre></td></tr></table></figure>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Objective-C ARC Foundation </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频编程: iOS 推流]]></title>
      <url>/2018/02/26/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E6%8E%A8%E6%B5%81/</url>
      <content type="html"><![CDATA[<p>本篇分享是基于 <a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">音视频编程: 构建 nginx 推流服务器</a> 这篇文章的, 之前是使用 ffmpeg 命令进行推流并且都是在 macos 上面进行的操作.</p>
<p>现在在 iOS 平台上使用 <a href="https://github.com/LaiFengiOS/LFLiveKit" target="_blank" rel="noopener">LFLiveKit</a> 进行推流, 然后使用 VLC 播放器播放流视频.</p>
<p><strong>该系列博文:</strong></p>
<ul>
<li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/" target="_blank" rel="noopener">音视频编程: 编译 faac/faad2</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">音视频编程: iOS 使用 faac 编码</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/" target="_blank" rel="noopener">音视频编程: iOS 使用 faad2</a> </p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">音视频编程: 构建 nginx 推流服务器</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/26/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E6%8E%A8%E6%B5%81/" target="_blank" rel="noopener">音视频编程: iOS 推流</a> (本篇)</p>
</li>
</ul>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>一般直播过程包括对音视频的采集、处理、编码、封包、推流、传输、转码、分发、解码、播放等. </p>
<p><strong>推流</strong>, 指使用推流工具把直播内容传输到服务器的过程. 本篇分享使用 LFLiveKit 工具将 iPhone 摄像头和麦克风采集的数据推流到本地流服务器.</p>
<p><strong>拉流</strong>, 指对服务器直播的内容，用指定地址进行拉取(播放)的过程, 本篇分享使用 VLC 充当拉流的角色.</p>
<h2 id="集成-LFLiveKit"><a href="#集成-LFLiveKit" class="headerlink" title="集成 LFLiveKit"></a>集成 LFLiveKit</h2><p>LFLiveKit 是一个开源的推流 SDK, 支持 H264 and AAC 的硬编码, 支持美颜(集成了 GPUImage).</p>
<p>使用 LFLiveKit 比较简单, 按照其 demo 集成即可.</p>
<p><strong>1.工程配置info.plist</strong></p>
<p>需要访问相机和麦克风权限.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Privacy - Camera Usage Description</div><div class="line"></div><div class="line">Privacy - Microphone Usage Description</div></pre></td></tr></table></figure>
<p><strong>2.请求相机和麦克风权限.</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">- (void)requestAccessForVideo &#123;</div><div class="line">    </div><div class="line">    __weak typeof(self) _self = self;</div><div class="line">    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeVideo];</div><div class="line">    </div><div class="line">    switch (status) &#123;</div><div class="line">            </div><div class="line">        case AVAuthorizationStatusNotDetermined: &#123;</div><div class="line">            </div><div class="line">            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeVideo completionHandler:^(BOOL granted) &#123;</div><div class="line">                </div><div class="line">                if (granted) &#123;</div><div class="line">                    </div><div class="line">                    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">                        [_self.session setRunning:YES];</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;];</div><div class="line">            </div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        case AVAuthorizationStatusAuthorized: &#123;</div><div class="line">            </div><div class="line">            dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">                [_self.session setRunning:YES];</div><div class="line">            &#125;);</div><div class="line">            </div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        case AVAuthorizationStatusDenied:</div><div class="line">        case AVAuthorizationStatusRestricted:</div><div class="line">            // 用户明确地拒绝授权，或者相机设备无法访问</div><div class="line">            break;</div><div class="line">            </div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)requestAccessForAudio &#123;</div><div class="line">    </div><div class="line">    AVAuthorizationStatus status = [AVCaptureDevice authorizationStatusForMediaType:AVMediaTypeAudio];</div><div class="line">    </div><div class="line">    switch (status) &#123;</div><div class="line">            </div><div class="line">        case AVAuthorizationStatusNotDetermined: &#123;</div><div class="line">            [AVCaptureDevice requestAccessForMediaType:AVMediaTypeAudio completionHandler:^(BOOL granted) &#123;</div><div class="line">            &#125;];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        case AVAuthorizationStatusAuthorized: &#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">            </div><div class="line">        case AVAuthorizationStatusDenied:</div><div class="line">        case AVAuthorizationStatusRestricted:</div><div class="line">            break;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>务必要调用 LFLiveSession 的 <code>setRunning</code> 方法.</p>
<p>完整的工程代码, 后续我会放到 Github 上面. 方便有需要的下载.</p>
<h2 id="推流播放"><a href="#推流播放" class="headerlink" title="推流播放"></a>推流播放</h2><p>上面的基本配置完成后, 可以开始推流了.</p>
<p><strong>1.启动 nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<p><strong>2.启动推流</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">- (void)startLive &#123;</div><div class="line">    </div><div class="line">    LFLiveStreamInfo *streamInfo = [LFLiveStreamInfo new];</div><div class="line">    streamInfo.url = sRTMPUrl;</div><div class="line">    [self.session startLive:streamInfo];</div><div class="line">    self.session.beautyFace = YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里的 <code>sRTMPUrl</code> 是一个常量定义:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static NSString * const sRTMPUrl = @&quot;rtmp://192.168.1.102:1935/rtmplive/channel&quot;;</div></pre></td></tr></table></figure>
<p><code>192.168.1.102</code> 是我的本机(mac) ip 地址.</p>
<p>如果一切正常的话, 你在手机上面可以看到自己的预览画面.</p>
<p><strong>3.VLC 播放</strong></p>
<p>使用 VLC 播放 rtmp 的流, 打开 VLC 播放器, 选择 File/Open Network, 输入 <code>rtmp://192.168.1.102:1935/rtmplive/channel</code> 这个地址即可实时播放了.</p>
<p>这里注意一定要使用本机的 ip 地址, 不要使用 <code>localhost:1935</code> 类似的地址, 否则无法播放和推流.</p>
<p>后续分享如何在 iOS 上面使用播放器来播放直播流.</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 音视频 rtmp nginx 推流 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频编程: 构建 nginx 推流服务器]]></title>
      <url>/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本篇分享的主要内容</p>
</blockquote>
<p>如何在 macos 中构建本地的推流服务器(nginx + rtmp-nginx-module), 并使用 ffmpeg 命令进行视频推流, 然后使用 VLC 播放器播放视频.</p>
<p><strong>该系列博文:</strong></p>
<ul>
<li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/" target="_blank" rel="noopener">音视频编程: 编译 faac/faad2</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">音视频编程: iOS 使用 faac 编码</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/" target="_blank" rel="noopener">音视频编程: iOS 使用 faad2</a> </p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">音视频编程: 构建 nginx 推流服务器</a> (本篇)</p>
</li>
</ul>
<h2 id="安装-rtmp-nginx-module"><a href="#安装-rtmp-nginx-module" class="headerlink" title="安装 rtmp-nginx-module"></a>安装 rtmp-nginx-module</h2><p>之前在测试 php 程序的时候, 我已经安装过 nginx, 但是发现这样在配置 rtmp-nginx-module 的时候, 无法成功.</p>
<p>配置文件修改完成之后, nginx 总是无法识别 <code>rtmp</code>, 报错如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[emerg] 30766#0: unknown directive &quot;rtmp&quot; in /usr/local/etc/nginx/nginx.conf:40</div></pre></td></tr></table></figure>
<p>现在需要卸载原来已经安装的 nginx, 命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall nginx</div></pre></td></tr></table></figure>
<p>再次安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx-full --with-rtmp-module</div></pre></td></tr></table></figure>
<p>耐心等待一会 ~~</p>
<p>nginx 的版本(nginx -v):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx/1.12.2</div></pre></td></tr></table></figure>
<p>rtmp-nginx-module 版本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1.1.7.11-dev_2</div></pre></td></tr></table></figure>
<h2 id="配置-rtmp"><a href="#配置-rtmp" class="headerlink" title="配置 rtmp"></a>配置 rtmp</h2><p>编辑 nginx 的配置文件, 文件位置位于:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/etc/nginx/nginx.conf</div></pre></td></tr></table></figure>
<p>在 <code>http {}</code> 后面写入如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">rtmp &#123;</div><div class="line">   server &#123;</div><div class="line">        #rtmp协议的默认端口号是 1935</div><div class="line">        listen 1935;</div><div class="line">        #直播流配置, 访问 path 是 rtmplive</div><div class="line">        application rtmplive &#123;</div><div class="line">              #开启实时</div><div class="line">              live on;</div><div class="line">              #设置 rtmp 引擎的最大连接数. 默认为off</div><div class="line">              max_connections 1024;</div><div class="line">              #不记录数据</div><div class="line">             record off;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意: <code>rtmplive</code> 是固定的.</p>
<p>具体的 nginx 配置详见后面的附录内容.</p>
<h2 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h2><p><strong>1.安装 ffmpeg 即可. </strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ffmpeg</div></pre></td></tr></table></figure>
<p>这个过程有点久, 如果你没有梯子基本安装不了 [大哭]~</p>
<p><strong>2.安装 VLC</strong></p>
<p>直接去官网下载 dmg 包, 安装即可.</p>
<p>打开 VLC 然后选择从 File/Open Network 打开文件, 如下图所示:</p>
<p><img src="/upload/images/2018/02/25/1.jpg" alt="1"></p>
<p>在弹出的框中, 写入推流地址 <code>rtmp://localhost:1935/rtmplive/channel</code>, 如图所示:</p>
<p><img src="/upload/images/2018/02/25/2.jpg" alt="1"></p>
<p>直接点击 Open.</p>
<blockquote>
<p>注意: 如果 localhost 无法播放, 请更换为你的本机 ip, 如我的本机 ip 是 <code>192.168.1.122</code>, 对应的播放地址为 <code>rtmp://192.168.1.122:1935/rtmplive/channel</code>.<br>如果还是无法成功, 请关闭 macos 的防火墙.</p>
</blockquote>
<p><strong>3.启动 nginx</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<p>可以在浏览器访问如下地址, 看看 nginx 是否启动成功.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://localhost:8080/index.html</div></pre></td></tr></table></figure>
<p><strong>4.ffmpeg 推流</strong></p>
<p>推流的命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ffmpeg -re -i ~/Desktop/launcher.mp4 -vcodec libx264 -acodec aac -strict -2 -f flv rtmp://localhost:1935/rtmplive/channel</div></pre></td></tr></table></figure>
<p>其中 <code>launcher.mp4</code> 是我自己从网络上面下载的一个视频文件, 时长大约是 5 分钟.</p>
<p>在 VLC 中, 就可以看到推流播放的视频了. [开心]~~</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="nginx-配置文件"><a href="#nginx-配置文件" class="headerlink" title="nginx 配置文件"></a>nginx 配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">worker_processes  1;</div><div class="line"> </div><div class="line">error_log  /usr/local/etc/nginx/logs/error.log debug;</div><div class="line"></div><div class="line">pid        /usr/local/var/run/nginx.pid;</div><div class="line"> </div><div class="line">events &#123;</div><div class="line">    worker_connections  256;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">http &#123;</div><div class="line">    include             mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"> </div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"> </div><div class="line">    access_log  /usr/local/etc/nginx/logs/access.log  main;</div><div class="line"> </div><div class="line">    sendfile            on;</div><div class="line"> </div><div class="line">    keepalive_timeout   65;</div><div class="line"> </div><div class="line">    index index.html index.php;</div><div class="line"> </div><div class="line">    include /usr/local/etc/nginx/sites-enabled/*; </div><div class="line">    include /usr/local/etc/nginx/conf.d/*;</div><div class="line"></div><div class="line">     server &#123;</div><div class="line">        listen       8080;</div><div class="line">        server_name  localhost;</div><div class="line"></div><div class="line">        #charset koi8-r;</div><div class="line"></div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   /Users/me/workspace/projs/phpwork/; #web的根目录</div><div class="line">            index  index.php index.html index.htm; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">rtmp &#123;</div><div class="line">   server &#123;</div><div class="line">        #rtmp协议的默认端口号是1935</div><div class="line">        listen 1935;</div><div class="line">        #直播流配置,访问路径是rtmplive</div><div class="line">        application rtmplive &#123;</div><div class="line">              #开启实时</div><div class="line">              live on;</div><div class="line">              #为rtmp引擎设置最大连接数.默认为off</div><div class="line">              max_connections 1024;</div><div class="line">              #不记录数据</div><div class="line">             record off;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="视频文件"><a href="#视频文件" class="headerlink" title="视频文件"></a>视频文件</h2><p>使用下载的 mp4 文件, 有些无法播放, 暂时估计应该是码率的问题, 大家在测试过程中, 发现视频无法播放, 最后试试其他视频文件.</p>
<p>另外, 视频文件不要太小, 尽量能让其播放时长在 3-5 分钟.</p>
<h2 id="brew-install-uninstall-报错"><a href="#brew-install-uninstall-报错" class="headerlink" title="brew install/uninstall 报错"></a>brew install/uninstall 报错</h2><p>报错信息如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Error: undefined method `patch&apos; for #&lt;Resource:0x000001040877a8&gt;</div><div class="line">/usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/gcc@4.9.rb:55:in `block in &lt;class:GccAT49&gt;&apos;</div><div class="line">/usr/local/Homebrew/Library/Homebrew/resource.rb:49:in `instance_eval&apos;</div><div class="line">/usr/local/Homebrew/Library/Homebrew/resource.rb:49:in `initialize&apos;</div><div class="line">/usr/local/Homebrew/Library/Homebrew/software_spec.rb:111:in `new&apos;</div><div class="line">/usr/local/Homebrew/Library/Homebrew/software_spec.rb:111:in `resource&apos;</div></pre></td></tr></table></figure>
<p>最终的解决方案是重新安装 Homebrew, 命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</div></pre></td></tr></table></figure>
<h2 id="检查本机的-ip"><a href="#检查本机的-ip" class="headerlink" title="检查本机的 ip"></a>检查本机的 ip</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 音视频 rtmp nginx </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NSLog 格式化输出 NSInteger/NSUInteger]]></title>
      <url>/2018/02/22/NSLog-%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA-NSInteger-NSUInteger/</url>
      <content type="html"><![CDATA[<p>在 Xcode 中 使用 NSLog 打印 NSInteger/NSUInteger 数据, 经常会遇到类似的警告. </p>
<p>如下图所示:<br><img src="/upload/images/2018/02/22/1.jpg" alt="1"></p>
<p>但是在 iphone 4s(32位)机器上就没有任何警告, 只是在64位的机型上面有这样的警告.</p>
<p>在 <code>NSObjCRuntime.h</code> 里面定义 <code>NSInteger</code> 和 <code>NSUInteger</code> 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if __LP64__ || (TARGET_OS_EMBEDDED &amp;&amp; !TARGET_OS_IPHONE) || TARGET_OS_WIN32 || NS_BUILD_32_LIKE_64</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="built_in">NSInteger</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="built_in">NSUInteger</span>;</div><div class="line"><span class="meta">#else</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="built_in">NSInteger</span>;</div><div class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="built_in">NSUInteger</span>;</div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>也就是说 64 位下是 long 类型，32 位下是 int 类型.</p>
<p>所以, 上面的代码在 32 位机型上面不会有警告.</p>
<p>按照 Xcode 的提示, Fix it: </p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"iun: %lu"</span>, (<span class="keyword">unsigned</span> <span class="keyword">long</span>)iun);</div><div class="line">    </div><div class="line"><span class="built_in">NSInteger</span> nsi = <span class="number">6</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"nsi: %ld"</span>, (<span class="keyword">long</span>)nsi);</div></pre></td></tr></table></figure>
<p>这样无论在 32 位还是在 64 位机型上面, 都没有警告了.</p>
<h2 id="Twitter-帖子"><a href="#Twitter-帖子" class="headerlink" title="Twitter 帖子"></a>Twitter 帖子</h2><p>在 <a href="https://twitter.com/gparker/status/377910611453046784" target="_blank" rel="noopener">twitter 有个帖子</a> 说了另一种解决办法, 原文如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%zd, %tu, %tx (<span class="keyword">signed</span>, <span class="keyword">unsigned</span>, hex) currently format <span class="built_in">NSInteger</span> and <span class="built_in">NSUInteger</span> with no warnings.</div></pre></td></tr></table></figure>
<blockquote>
<p>意思是使用 zd 可以格式化有符号的如 NSInteger, 使用 tu 格式化无符号的如 NSUInteger. 而 tx 可以用来格式化输出 16 进制数据.</p>
</blockquote>
<p>按照这个说法, 修改如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"iun: %zd"</span>, iun);</div><div class="line">    </div><div class="line"><span class="built_in">NSInteger</span> nsi = <span class="number">6</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"nsi: %td"</span>, nsi);</div></pre></td></tr></table></figure>
<p>或者这样修改:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSUInteger iun = 3;</div><div class="line">NSLog(@&quot;iun: %tu&quot;, iun);</div><div class="line">    </div><div class="line">NSInteger nsi = 6;</div><div class="line">NSLog(@&quot;nsi: %td&quot;, nsi);</div></pre></td></tr></table></figure>
<p>确实没有了警告的问题.</p>
<p>我在实践过程中发现一个问题: 使用 <code>zu</code> 来格式化输出 NSUInteger, 在 32 位机器上面, 仍旧会报警告.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"iun: %zu"</span>, iun);</div></pre></td></tr></table></figure>
<p>这就让我开始怀疑 z 和 t 的可靠性了.</p>
<p>下面接着了解一下它们.</p>
<h2 id="关于-z-t"><a href="#关于-z-t" class="headerlink" title="关于 z t"></a>关于 z t</h2><p>关于 <code>z</code> <code>t</code> 的说明可以参考 <a href="https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html" target="_blank" rel="noopener">String Format Specifiers</a></p>
<p><img src="/upload/images/2018/02/22/2.jpg" alt="1"></p>
<p>可以说明:</p>
<blockquote>
<p>格式化 z 可以用来代表 size_t.<br>格式化 t 可以用来代表 ptrdiff_t.</p>
</blockquote>
<p>ptrdiff_t 是C/C++标准库中定义的一个与机器相关的数据类型.<br>ptrdiff_t 类型变量通常用来保存两个指针减法操作的结果, 其定义在 C99 标准中.</p>
<p><strong>size_t 类型用于指明数组长度, 它必须是一个正数, 而 ptrdiff_t 类型则应保证足以存放同一数组中两个指针之间的差距, 它有可能是负数.</strong></p>
<p>即: size_t 是 unsigned 类型, 而 ptrdiff_t 则是 signed 整型.</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">printf(<span class="string">"size_t bytes = %d\n"</span> ,<span class="keyword">sizeof</span>(size_t));</div><div class="line">printf(<span class="string">"ptrdiff_t bytes = %d\n"</span> ,<span class="keyword">sizeof</span>(ptrdiff_t));</div></pre></td></tr></table></figure>
<p>在 32 位机型中输出结果:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">size_t bytes = <span class="number">4</span></div><div class="line">ptrdiff_t bytes = <span class="number">4</span></div></pre></td></tr></table></figure>
<p>在 64 位机型中输出结果:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">size_t bytes = <span class="number">8</span></div><div class="line">ptrdiff_t bytes = <span class="number">8</span></div></pre></td></tr></table></figure>
<p>这说明, sizet_t 和 ptrdiff_t 是和机器类型相关的跨平台的.</p>
<p>系统定义:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> __SIZE_TYPE__ size_t;</div><div class="line"><span class="keyword">typedef</span> __PTRDIFF_TYPE__ ptrdiff_t;</div></pre></td></tr></table></figure>
<p>32 位机型定义:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define __SIZE_TYPE__ long unsigned int</span></div><div class="line"><span class="meta">#define __PTRDIFF_TYPE__ int</span></div></pre></td></tr></table></figure>
<p>64 位机型定义:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define __SIZE_TYPE__ long unsigned int</span></div><div class="line"><span class="meta">#define __PTRDIFF_TYPE__ long int</span></div></pre></td></tr></table></figure>
<h2 id="终极解决方案"><a href="#终极解决方案" class="headerlink" title="终极解决方案"></a>终极解决方案</h2><p>既然在 Xcode 里面提示 Fix it 可以使用, 那么为了提高代码的健壮性和可维护性, 可以定义宏定义来解决.</p>
<p>宏定义如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if __LP64__</span></div><div class="line"><span class="meta">#define MZNSI @<span class="meta-string">"ld"</span></span></div><div class="line"><span class="meta">#define MZNSU @<span class="meta-string">"lu"</span></span></div><div class="line"><span class="meta">#else</span></div><div class="line"><span class="meta">#define MZNSI @<span class="meta-string">"d"</span></span></div><div class="line"><span class="meta">#define MZNSU @<span class="meta-string">"u"</span></span></div><div class="line"><span class="meta">#endif //__LP64__</span></div></pre></td></tr></table></figure>
<p>使用方法, 如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSInteger</span> nsi = <span class="number">6</span>;</div><div class="line"><span class="built_in">NSUInteger</span> iun = <span class="number">3</span>;</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"NSInteger nsi = %"</span>MZNSI, nsi);</div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"NSUInteger iun = %"</span>MZNSU, iun);</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>给出常用的格式化打印输出字符串中的格式符, 如下所示:</p>
<p>1）%c：对应参数是一个 <code>int</code> 类型，但实际运行时会将该 <code>int</code>类型对象转换为 <code>unsigned char</code> 类型.</p>
<p>2）%d 或者 %i：对应参数是一个 <code>int</code> 类型. 只不过, %d 一般用于十进制, %i 可以对应各种进制的数据.</p>
<blockquote>
<p>二者在打印输出上面没有什么太大的差别. 但是在接收输入(scanf)上, %d 用于十进制, %i 对应各种进制的数据. 可以参考 <a href="https://www.geeksforgeeks.org/difference-d-format-specifier-c-language/" target="_blank" rel="noopener">Difference between %d and %i format specifier in C language</a> 这篇文章.</p>
</blockquote>
<p>3）%f：对应参数是一个 <code>double</code> 类型.</p>
<p>4）%ld：对应参数是一个 <code>long int</code> 类型.</p>
<p>5）%s：对应参数是一个 <code>const char*</code> 类型，表示输出一个字符串.</p>
<p>6）%u：对应参数是一个 <code>unsigned int</code> 类型.</p>
<p>7）%zu：对应参数是一个 <code>size_t</code> 类型.</p>
<p>8）%td：对应参数是一个 <code>ptrdiff_t</code> 类型.</p>
<p>9）%x（或 %X）：对应参数是一个 <code>int</code> 类型，不过会以十六进制形式输出，其中大于 9 的数字根据字母 <code>x</code> 大小写进行转换，如果是 <code>%x</code>，则大于 9 的数用 <code>a～f</code> 表示；如果是 <code>%X</code>，则用 <code>A～F</code> 表示.</p>
<p>10）%%：输出一个 % 符号.</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><a href="https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html" target="_blank" rel="noopener">Apple：String Format Specifiers</a></p>
<hr>
<p><strong>扫码关注，期待与你的交流~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NSLog printf scanf </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频编程: iOS 使用 faad2]]></title>
      <url>/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/</url>
      <content type="html"><![CDATA[<p>本次分享使用 faad2 解码 AAC 音频文件, 将 AAC 文件转换为 WAV 文件并使用 AVAudioPlayer 进行播放.</p>
<p>在博文 <a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a> 给大家简单的分析了一下 WAV 的数据头协议, 其实也是为了这篇博文来服务的, 所以阅读本文之前, 建议先看上文.</p>
<p><strong>该系列博文:</strong></p>
<ul>
<li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/" target="_blank" rel="noopener">音视频编程: 编译 faac/faad2</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">音视频编程: iOS 使用 faac 编码</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/" target="_blank" rel="noopener">音视频编程: iOS 使用 faad2</a> (本篇)</p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">音视频编程: 构建 nginx 推流服务器</a></p>
</li>
</ul>
<h2 id="例子简介"><a href="#例子简介" class="headerlink" title="例子简介"></a>例子简介</h2><p>本文以一个实际的例子, 使用 faad2的各个函数来解码 AAC 数据.</p>
<p>主要有以下几个步骤:</p>
<ul>
<li>获取输入文件</li>
<li>获取 faad 解码器句柄</li>
<li>初始化 faad 解码器</li>
<li>根据文件解析文件帧, 并写入输出文件中</li>
<li>写入文件头将其封装为 WAV 格式的音频文件</li>
<li>关闭 faad 解码器句柄</li>
</ul>
<h2 id="工程实战"><a href="#工程实战" class="headerlink" title="工程实战"></a>工程实战</h2><h3 id="引入-faad2"><a href="#引入-faad2" class="headerlink" title="引入 faad2"></a>引入 faad2</h3><p>将编译好的 faad2 导入工程即可.</p>
<p><img src="/upload/images/2018/02/20/11.jpg" alt="1"><br>其中关键的 API 在 neaacdec.h 中有描述.</p>
<p>工程效果图:<br><img src="/upload/images/2018/02/20/22.jpg" alt="1"></p>
<h3 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h3><p>在 <a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a> 中已经定义了 WAV 的数据头.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct MZWavAudioFileHeader</div><div class="line">&#123;</div><div class="line">    char       riff[4];       // 字符串 &quot;RIFF&quot;</div><div class="line">    uint32_t   totalLength; // 文件总大小, 包括PCM 数据大小和该文件头大小</div><div class="line">    char       wave[4];     // 字符串 &quot;WAVE&quot;</div><div class="line">    char       fmt[4];      // 字符串 &quot;fmt &quot;</div><div class="line">    uint32_t   format;      // WAV 头大小, 固定为值 16</div><div class="line">    uint16_t   pcm;         // PCM 编码方式, 固定值为 1</div><div class="line">    uint16_t   channels;    // 声道数量, 为 2</div><div class="line">    uint32_t   frequency;   // 采样频率</div><div class="line">    uint32_t   bytes_per_second; // 每秒字节数(码率), 其值=采样率x通道数x位深度/8</div><div class="line">    uint16_t   bytes_by_capture; // 采样块大小</div><div class="line">    uint16_t   bits_per_sample; // 采样点大小, 这里是 16 位</div><div class="line">    char       data[4];         // 字符串 &quot;data&quot;</div><div class="line">    uint32_t   bytes_in_pcmdata;  // pcm 数据长度</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>现在实现写入数据头的方法 <code>mz_write_wav_header</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 写入 wav 头数据.</div><div class="line"> *</div><div class="line"> *  @param file  wav 文件指针.</div><div class="line"> *  @param total_samples_per_channel 每个声道的采样数.</div><div class="line"> *  @param samplerate 采样率.</div><div class="line"> *  @param channels 声道数.</div><div class="line"> */</div><div class="line">void mz_write_wav_header(FILE *file, int total_samples_per_channel, int samplerate, int channels) &#123;</div><div class="line">    </div><div class="line">    if (NULL == file) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (total_samples_per_channel &lt;= 0) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    printf(&quot;FAAD. total_samples_per_channel: %i, samplerate: %i, channels: %i\n&quot;,</div><div class="line">           total_samples_per_channel, samplerate, channels);</div><div class="line">    </div><div class="line">    struct MZWavAudioFileHeader wavHeader;</div><div class="line">    </div><div class="line">    // 写入 RIFF</div><div class="line">    strcpy(wavHeader.riff, &quot;RIFF&quot;);</div><div class="line">    </div><div class="line">    wavHeader.bits_per_sample = 16;</div><div class="line">    </div><div class="line">    wavHeader.totalLength = (total_samples_per_channel * channels * wavHeader.bits_per_sample/8) + sizeof(wavHeader) - 8;</div><div class="line">    </div><div class="line">    // 写入 WAVE 和 fmt</div><div class="line">    strcpy(wavHeader.wave, &quot;WAVE&quot;);</div><div class="line">    strcpy(wavHeader.fmt, &quot;fmt &quot;);</div><div class="line">    </div><div class="line">    wavHeader.format = 16;</div><div class="line">    wavHeader.pcm = 1;</div><div class="line">    wavHeader.channels = channels;</div><div class="line">    wavHeader.frequency = samplerate;</div><div class="line">    </div><div class="line">    // 每秒的字节数(码率)=采样率x通道数x位深度/8</div><div class="line">    wavHeader.bytes_per_second = wavHeader.channels * wavHeader.frequency * wavHeader.bits_per_sample/8;</div><div class="line">    </div><div class="line">    wavHeader.bytes_by_capture = wavHeader.channels*wavHeader.bits_per_sample/8;</div><div class="line">    </div><div class="line">    wavHeader.bytes_in_pcmdata = total_samples_per_channel * wavHeader.channels * wavHeader.bits_per_sample/8;</div><div class="line">    </div><div class="line">    // 写入 data</div><div class="line">    strcpy(wavHeader.data, &quot;data&quot;);</div><div class="line">    </div><div class="line">    fwrite(&amp;wavHeader, 1, sizeof(wavHeader), file);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解码主要用到了 FAAD2 中的 <code>NeAACDecDecode</code> 函数. 函数原型如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void* NEAACDECAPI NeAACDecDecode(NeAACDecHandle hDecoder,</div><div class="line">                                 NeAACDecFrameInfo *hInfo,</div><div class="line">                                 unsigned char *buffer,</div><div class="line">                                 unsigned long buffer_size);</div></pre></td></tr></table></figure>
<p>对应帧定义的结构体: <code>NeAACDecFrameInfo</code>, 定义如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">typedef struct NeAACDecFrameInfo</div><div class="line">&#123;</div><div class="line">    unsigned long bytesconsumed;</div><div class="line">    unsigned long samples;</div><div class="line">    unsigned char channels;</div><div class="line">    unsigned char error;</div><div class="line">    unsigned long samplerate;</div><div class="line"></div><div class="line">    /* SBR: 0: off, 1: on; upsample, 2: on; downsampled, 3: off; upsampled */</div><div class="line">    unsigned char sbr;</div><div class="line"></div><div class="line">    /* MPEG-4 ObjectType */</div><div class="line">    unsigned char object_type;</div><div class="line"></div><div class="line">    /* AAC header type; MP4 will be signalled as RAW also */</div><div class="line">    unsigned char header_type;</div><div class="line"></div><div class="line">    /* multichannel configuration */</div><div class="line">    unsigned char num_front_channels;</div><div class="line">    unsigned char num_side_channels;</div><div class="line">    unsigned char num_back_channels;</div><div class="line">    unsigned char num_lfe_channels;</div><div class="line">    unsigned char channel_position[64];</div><div class="line"></div><div class="line">    /* PS: 0: off, 1: on */</div><div class="line">    unsigned char ps;</div><div class="line">&#125; NeAACDecFrameInfo;</div></pre></td></tr></table></figure>
<p>具体的解码实现, 我放到了 Github 上面了, 大家可以去 <a href="https://github.com/veryitman/faacfaad2" target="_blank" rel="noopener">这里</a> 查看.</p>
<h2 id="麻烦"><a href="#麻烦" class="headerlink" title="麻烦"></a>麻烦</h2><blockquote>
<p>解码 aac, 解决采样频率和通道数不对的问题</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//防止采样频率加倍</div><div class="line">NeAACDecConfigurationPtr conf = NeAACDecGetCurrentConfiguration(decoder);</div><div class="line">conf-&gt;dontUpSampleImplicitSBR = 1;</div><div class="line">NeAACDecSetConfiguration(decoder, conf);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//从双声道的数据中提取单通道  </div><div class="line">for(i=0,j=0; i&lt;4096 &amp;&amp; j&lt;2048; i+=4, j+=2) &#123;</div><div class="line"></div><div class="line">    frame_mono[j]=pcm_data[i];</div><div class="line">    frame_mono[j+1]=pcm_data[i+1];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>具体可以查阅 FAAD2 的源码. 感谢 <a href="http://blog.csdn.net/machh/article/details/47153111" target="_blank" rel="noopener">使用FAAD库解码AAC实例及 及 faad解码后的通道数不正确的问题</a> 提供.</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 音视频 wav pcm faad2 aac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频编程: 简单分析 WAV 文件]]></title>
      <url>/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>这篇分享是下篇 <a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/" target="_blank" rel="noopener">音视频编程: iOS 使用 faad2</a> 的预备知识, 如果要解码 WAV 文件, 首先需要了解一下 WAV 音频文件的格式.</p>
<p>今天说的是 <code>线性 PCM</code> 对应的 WAV 格式的数据.</p>
<blockquote>
<p>PCM 的种类</p>
</blockquote>
<ul>
<li>线性化 PCM</li>
<li>A律量化的 PCM</li>
<li>U律量化的 PCM</li>
<li>AD PCM</li>
<li>GSM</li>
</ul>
<p><strong>该系列博文:</strong></p>
<ul>
<li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/" target="_blank" rel="noopener">音视频编程: 编译 faac/faad2</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">音视频编程: iOS 使用 faac 编码</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a>(本篇)</p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/" target="_blank" rel="noopener">音视频编程: iOS 使用 faad2</a> </p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">音视频编程: 构建 nginx 推流服务器</a></p>
</li>
</ul>
<h2 id="WAV-简介"><a href="#WAV-简介" class="headerlink" title="WAV 简介"></a>WAV 简介</h2><p>WAV 只是该音频文件的后缀名, 其完整名称缩写是 WAVE.</p>
<p>WAVE(Waveform Audio File Format), 采用RIFF（Resource Interchange File Format）文件格式结构.</p>
<p>WAV 格式的音频文件通常用来保存 PCM 格式的原始音频数据，通常被称之为无损音频. </p>
<p>WAV 音频文件, 粗略来说是 WAV 数据头 + PCM 数据组成的. 裸数据 PCM 外面包了一层文件头，WAV 实质为一个 <a href="http://www.cnblogs.com/wangguchangqing/p/5957531.html" target="_blank" rel="noopener">RIFF 文件</a>.</p>
<h2 id="WAV-数据头"><a href="#WAV-数据头" class="headerlink" title="WAV 数据头"></a>WAV 数据头</h2><p>关于 WAV 音频文件的数据头定义如下图所示:</p>
<p><img src="/upload/images/2018/02/20/1.jpg" alt="1"></p>
<p>最前面的4个字节用来标示是 RIFF 字符串.</p>
<p>可以看出, 一般的 WAV 文件的数据头为 44 个字节, 其后面跟的是 PCM 数据.</p>
<h2 id="分析-WAV-数据头"><a href="#分析-WAV-数据头" class="headerlink" title="分析 WAV 数据头"></a>分析 WAV 数据头</h2><p>使用 hexdump 来看一下 WAV 文件的数据头.</p>
<p>在当前路径下, 有个 wav 格式的音频文件 <code>m.wav</code>, 使用 hexdump 分析一下.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexdump -n 44 m.wav</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/02/20/2.jpg" alt="2"></p>
<p>其中, <code>-n 44</code> 表示查看前 44 个字节.</p>
<p>按字节分组的图, 如下所示:<br><img src="/upload/images/2018/02/20/3.png" alt="2"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">52 49 46 46</div></pre></td></tr></table></figure>
<p>分别是 RIFF 的 ASCII 码.</p>
<p>跟在 RIFF 后面的四个字节是文件的大小信息, 我们先使用 <code>ls</code> 命令看一下该文件的大小.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al</div></pre></td></tr></table></figure>
<p>输出文件大小为(字节数): 1080808</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">staff  1080808 Jan 25 15:44 m.wav</div></pre></td></tr></table></figure>
<p>RIFF 后面的四个字节分别是: e0 7d 10 00, 由于该存储使用了小端序(Little-Endian 存储，也就是说对其中的数据，低位字节在前，高位字节在后), 所以16进制表示为: 0x00107de0, 对应的字节大小是 <code>1080808</code>.</p>
<p>上面说到, 线性 PCM, 其实在该文件头中, 第17到第第22个字节(上图红色的5和6组合)标示了 PCM 的类型, 即:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">10 00 00 00 01 00</div></pre></td></tr></table></figure>
<p>其他类型的 PCM 类型定义为:</p>
<blockquote>
<p>A律量化的PCM: 12 00 00 0006 00<br>U律量化的PCM: 12 00 00 00 07 00<br>AD PCM: 32 00 00 00 02 00<br>GSM: 14 00 00 00 31 00</p>
</blockquote>
<p>最后4个字节表示真正 PCM 数据的文件大小, 即: 0x00107dbc, 其10进制大小为: 1080764, 用总文件大小减去 1080764, 就是文件头的大小, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1080808 - 1080764 = 44</div></pre></td></tr></table></figure>
<p>其他对应的数据, 大家可以对照表自行分析.</p>
<h2 id="定义数据头"><a href="#定义数据头" class="headerlink" title="定义数据头"></a>定义数据头</h2><blockquote>
<p>数据类型</p>
</blockquote>
<ul>
<li>char 占用 1 个字节</li>
<li>uint32_t 占用 4 个字节</li>
<li>uint16_t 占用 2 个字节</li>
</ul>
<p>这里使用结构体定义 WAV 文件头, 其定义如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">struct MZWavAudioFileHeader</div><div class="line">&#123;</div><div class="line">    char       riff[4];       // 字符串 &quot;RIFF&quot;</div><div class="line">    uint32_t   totalLength; // 文件总大小, 包括PCM 数据大小和该文件头大小</div><div class="line">    char       wave[4];     // 字符串 &quot;WAVE&quot;</div><div class="line">    char       fmt[4];      // 字符串 &quot;fmt &quot;</div><div class="line">    uint32_t   format;      // WAV 头大小, 固定为值 16</div><div class="line">    uint16_t   pcm;         // PCM 编码方式, 固定值为 1</div><div class="line">    uint16_t   channels;    // 声道数量, 为 2</div><div class="line">    uint32_t   frequency;   // 采样频率</div><div class="line">    uint32_t   bytes_per_second; // 每秒字节数(码率), 其值=采样率x通道数x位深度/8</div><div class="line">    uint16_t   bytes_by_capture; // 采样块大小</div><div class="line">    uint16_t   bits_per_sample; // 采样点大小, 这里是 16 位</div><div class="line">    char       data[4];         // 字符串 &quot;data&quot;</div><div class="line">    uint32_t   bytes_in_pcmdata;  // pcm 数据长度</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>可以使用下面代码来计算该结构体所占的字节数(结果是44):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int wav_header_size = sizeof(struct MZWavAudioFileHeader);</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 音视频 wav pcm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频编程: iOS 使用 faac 编码]]></title>
      <url>/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文分享如何将 WAV 格式的音频文件转换(编码)为 AAC 格式的音频文件并使用 AVAudioPlayer 播放编码后的文件. </p>
<p>这里的编码功能使用 faac 这个库来实现.</p>
<p><strong>该系列博文:</strong></p>
<ul>
<li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/" target="_blank" rel="noopener">音视频编程: 编译 faac/faad2</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">音视频编程: iOS 使用 faac 编码</a>(本篇)</p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/" target="_blank" rel="noopener">音视频编程: iOS 使用 faad2</a> </p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">音视频编程: 构建 nginx 推流服务器</a></p>
</li>
</ul>
<h2 id="函数介绍"><a href="#函数介绍" class="headerlink" title="函数介绍"></a>函数介绍</h2><blockquote>
<p>获取 faac 的版本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int FAACAPI faacEncGetVersion(char **faac_id_string, char **faac_copyright_string);</div></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">char *version;</div><div class="line">char *copyright;</div><div class="line">faacEncGetVersion(&amp;version, &amp;copyright);</div><div class="line">printf(&quot;FAAC version: %s, copyright: %s&quot;, version, copyright);</div></pre></td></tr></table></figure>
<p>打印结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FAAC version: 1.28, copyright: FAAC - Freeware Advanced Audio Coder (http://www.audiocoding.com/)</div><div class="line">Copyright (C) 1999,2000,2001  Menno Bakker</div><div class="line">Copyright (C) 2002,2003  Krzysztof Nikiel</div><div class="line">This software is based on the ISO MPEG-4 reference source code.</div></pre></td></tr></table></figure>
<blockquote>
<p>打开并初始化 faac 编码器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// sampleRate: 采样率</div><div class="line">// numChannels: 通道数量，1-单声道 2-立体声</div><div class="line">// inputSamples: 编码后的数据长度</div><div class="line">// maxOutputBytes: 编码后的信息最大长度</div><div class="line">faacEncHandle FAACAPI faacEncOpen(unsigned long sampleRate,</div><div class="line">                  unsigned int numChannels,</div><div class="line">                  unsigned long *inputSamples,</div><div class="line">                  unsigned long *maxOutputBytes);</div></pre></td></tr></table></figure>
<p>该函数返回一个 faac 编码器句柄. 其很多函数都需要这个句柄.</p>
<blockquote>
<p>关闭 faac 编码器</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int FAACAPI faacEncClose(faacEncHandle hEncoder);</div></pre></td></tr></table></figure>
<p>将开启 faac 编码器返回的句柄传入即可.</p>
<blockquote>
<p>获取配置和设置配置</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">faacEncConfigurationPtr FAACAPI</div><div class="line">  faacEncGetCurrentConfiguration(faacEncHandle hEncoder);</div><div class="line"></div><div class="line"></div><div class="line">int FAACAPI faacEncSetConfiguration(faacEncHandle hEncoder,</div><div class="line">                    faacEncConfigurationPtr config);</div></pre></td></tr></table></figure>
<p>faac 的配置被定义为了一个结构体 faacEncConfiguration, 大家可以看源码.</p>
<blockquote>
<p>编码(编码一帧音频数据)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">//	hEncoder: faacEncOpen 返回的编码器句柄</div><div class="line">//	inputBuffer: 输入信息缓冲区</div><div class="line">//	samplesInput: faacEncOpen编码后的数据长度，即缓冲区长度</div><div class="line">//	outputBuffer: 编码后输出信息缓冲区</div><div class="line">//	bufferSize: 输出信息长度</div><div class="line">int FAACAPI faacEncEncode(faacEncHandle hEncoder, int32_t * inputBuffer, unsigned int samplesInput,</div><div class="line">             unsigned char *outputBuffer,</div><div class="line">             unsigned int bufferSize);</div></pre></td></tr></table></figure>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>可以自己新建一个 iOS 工程.</p>
<p>准备好一个 <code>wav</code> 格式的音频文件.</p>
<p>效果如下图所示:<br><img src="/upload/images/2018/02/16/1.jpg" alt="1"></p>
<p>新建一个 C++ 文件, MZCodec.</p>
<blockquote>
<p>MZCodec.hpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#ifndef MZCodec_hpp</div><div class="line">#define MZCodec_hpp</div><div class="line"></div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">int codeWAV(const char *srcFilePath,  const char *destPath);</div><div class="line"></div><div class="line">#endif /* MZCodec_hpp */</div></pre></td></tr></table></figure>
<blockquote>
<p>MZCodec.cpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line">#include &quot;MZCodec.hpp&quot;</div><div class="line"></div><div class="line">#include &quot;faac.h&quot;</div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">int codeWAV(const char *srcFilePath,  const char *destPath) &#123;</div><div class="line">    </div><div class="line">    unsigned long nSampleRate   = 44100;//采样率</div><div class="line">    unsigned int nChannels      = 2;//声道数</div><div class="line">    unsigned int nPCMBitSize    = 16;//单样本位数</div><div class="line">    </div><div class="line">    unsigned long nInputSamples   = 0;</div><div class="line">    unsigned long nMaxOutputBytes = 0;</div><div class="line">    </div><div class="line">    int nRet;</div><div class="line">    faacEncHandle hEncoder;</div><div class="line">    faacEncConfigurationPtr pConfiguration;</div><div class="line">    </div><div class="line">    size_t nBytesRead;</div><div class="line">    unsigned long nPCMBufferSize;</div><div class="line">    unsigned char *pbPCMBuffer;</div><div class="line">    unsigned char *pbAACBuffer;</div><div class="line">    </div><div class="line">    FILE *fpIn; // WAV file for input</div><div class="line">    FILE *fpOut; // AAC file for output</div><div class="line">    </div><div class="line">    /// 获取 faac 版本信息</div><div class="line">    &#123;</div><div class="line">        char *version;</div><div class="line">        char *copyright;</div><div class="line">        faacEncGetVersion(&amp;version, &amp;copyright);</div><div class="line">        printf(&quot;FAAC version: %s, copyright: %s&quot;, version, copyright);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fpIn = fopen(srcFilePath, &quot;rb&quot;);</div><div class="line">    </div><div class="line">    if (NULL == fpIn) &#123;</div><div class="line">        return -2;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    fpOut = fopen(destPath, &quot;wb&quot;);</div><div class="line">    </div><div class="line">    /// 1. 打开 FAAC</div><div class="line">    hEncoder = faacEncOpen(nSampleRate, nChannels, &amp;nInputSamples, &amp;nMaxOutputBytes);</div><div class="line">    </div><div class="line">    if (NULL == hEncoder) &#123;</div><div class="line">        </div><div class="line">        printf(&quot;[ERROR] Failed to call faacEncOpen()\n&quot;);</div><div class="line">        return -1;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    nPCMBufferSize = nInputSamples * nPCMBitSize / 8;</div><div class="line">    pbPCMBuffer = new unsigned char[nPCMBufferSize];</div><div class="line">    pbAACBuffer = new unsigned char[nMaxOutputBytes];</div><div class="line">    </div><div class="line">    /// 2.1. 获取当前的编码器配置</div><div class="line">    pConfiguration = faacEncGetCurrentConfiguration(hEncoder);</div><div class="line">    </div><div class="line">    pConfiguration-&gt;inputFormat = FAAC_INPUT_16BIT;</div><div class="line">    // 对象类型只有为 LOW, iOS 的 AVAudioPlayer 才能播放</div><div class="line">    pConfiguration-&gt;aacObjectType = LOW;</div><div class="line">    // 0 = Raw; 1 = ADTS</div><div class="line">    pConfiguration-&gt;outputFormat = 1;</div><div class="line">    pConfiguration-&gt;mpegVersion = MPEG4;</div><div class="line">    pConfiguration-&gt;useTns = 1;</div><div class="line">    pConfiguration-&gt;bitRate = 30;</div><div class="line">    </div><div class="line">    /// 2.2. 配置编码器</div><div class="line">    nRet = faacEncSetConfiguration(hEncoder, pConfiguration);</div><div class="line">    </div><div class="line">    //是wav格式, 先读取前面的</div><div class="line">    fseek(fpIn, 58, SEEK_SET);</div><div class="line">    </div><div class="line">    do &#123;</div><div class="line">        </div><div class="line">        //读入的实际字节数，最大不会超过 nPCMBufferSize</div><div class="line">        nBytesRead = fread(pbPCMBuffer, 1, nPCMBufferSize, fpIn);</div><div class="line">        </div><div class="line">        //输入样本数，用实际读入字节数计算</div><div class="line">        //一般只有读到文件尾时才不是 nPCMBufferSize/(nPCMBitSize/8)</div><div class="line">        nInputSamples = nBytesRead / (nPCMBitSize / 8);</div><div class="line">        </div><div class="line">        /// 3. 编码</div><div class="line">        nRet = faacEncEncode(hEncoder,</div><div class="line">                             (int *)pbPCMBuffer,</div><div class="line">                             (unsigned int)nInputSamples,</div><div class="line">                             pbAACBuffer,</div><div class="line">                             (unsigned int)nMaxOutputBytes);</div><div class="line">        </div><div class="line">        fwrite(pbAACBuffer, 1, nRet, fpOut);</div><div class="line">        </div><div class="line">        printf(&quot;FaacEncEncode returns %d\n&quot;, nRet);</div><div class="line">    &#125; while (nBytesRead &gt; 0);</div><div class="line">    </div><div class="line">    /// 4. 关闭 FAAC</div><div class="line">    nRet = faacEncClose(hEncoder);</div><div class="line">    </div><div class="line">    delete[] pbPCMBuffer;</div><div class="line">    delete[] pbAACBuffer;</div><div class="line">    </div><div class="line">    fclose(fpIn);</div><div class="line">    fclose(fpOut);</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用 MZCodec 的 Controller 需要命名为 <code>.mm</code> 文件.</p>
<blockquote>
<p>ViewController.mm</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">NSBundle *bundle = [NSBundle mainBundle];</div><div class="line">NSString *resPath = [bundle pathForResource:@&quot;m&quot; ofType:@&quot;wav&quot;];</div><div class="line">NSLog(@&quot;The path of wav file: %@&quot;, resPath);</div><div class="line">    </div><div class="line">NSArray&lt;NSString *&gt; *docPath = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);</div><div class="line">NSString *destPath = [[docPath lastObject] stringByAppendingString:@&quot;/out.aac&quot;];</div><div class="line">NSLog(@&quot;The path of aac file: %@&quot;, destPath);</div><div class="line">    </div><div class="line">dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">    </div><div class="line">    codeWAV([resPath UTF8String], [destPath UTF8String]);</div><div class="line">    </div><div class="line">    dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">        //转换完成.</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>编码过程需要点时间, 如果文件很大, 时间越久. 所以, 新开线程来进行编码.</p>
<p>编码完成后, 可在对应的沙盒目录找到 <code>out.aac</code> 文件.</p>
<p>具体代码在 <a href="https://github.com/veryitman/faacfaad2/tree/master/MZAudioCodec" target="_blank" rel="noopener">Github</a> 上面, 感兴趣的可以点击 <a href="https://github.com/veryitman/faacfaad2/tree/master/MZAudioCodec" target="_blank" rel="noopener">前往</a>.</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>这个 <code>aacObjectType</code> 需要注意, 之前我在这里折腾了很久.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pConfiguration-&gt;aacObjectType = LOW;</div></pre></td></tr></table></figure>
<p>如果设置为其他三种, 编码后的 aac 文件, AVAudioPlayer 播放不了, 初始化 AVAudioPlayer 就会报错, 报错信息如下:</p>
<p><img src="/upload/images/2018/02/16/2.jpg" alt="1"></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 音视频 faac faad2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[音视频编程: 编译 faac/faad2]]></title>
      <url>/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/</url>
      <content type="html"><![CDATA[<p>本文分享如何在 MacOS 上面编译 faac 和 faad2, 编译后的库文件可以直接在 iOS 上面使用.</p>
<p>后续会分享如何编译给 Android 使用的库文件的方法以及实战.</p>
<p><strong>该系列博文:</strong></p>
<ul>
<li><p><a href="http://www.veryitman.com/2018/02/14/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%BC%96%E8%AF%91-faac-faad2/" target="_blank" rel="noopener">音视频编程: 编译 faac/faad2</a>(本篇)</p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/16/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faac-%E7%BC%96%E7%A0%81/" target="_blank" rel="noopener">音视频编程: iOS 使用 faac 编码</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90-WAV-%E6%96%87%E4%BB%B6/" target="_blank" rel="noopener">音视频编程: 简单分析 WAV 文件</a></p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/20/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-iOS-%E4%BD%BF%E7%94%A8-faad2/" target="_blank" rel="noopener">音视频编程: iOS 使用 faad2</a> </p>
</li>
<li><p><a href="http://www.veryitman.com/2018/02/25/%E9%9F%B3%E8%A7%86%E9%A2%91%E7%BC%96%E7%A8%8B-%E6%9E%84%E5%BB%BA-nginx-%E6%8E%A8%E6%B5%81%E6%9C%8D%E5%8A%A1%E5%99%A8/" target="_blank" rel="noopener">音视频编程: 构建 nginx 推流服务器</a></p>
</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>faad</code> 是 AAC 格式文件的音频解码库. 相对于 FFmpeg 来说比较轻量和简单. 编译出来全平台静态库文件较小, API 也比较简单, 缺点是功能单一, 只能处理 AAC 格式的音频文件.</p>
<p><code>faac</code> 是与之对应的 AAC 音频编码库. 支持 MPEG-4 和 MPEG-2 的AAC 编码，其特性包括：可移植性好，快速，支持LC/Main/LTP，通过 Dream 支持 DRM.</p>
<p>这两个库虽然很久没有更新了, 但是其功能已经满足很多业务场景了, 并且很好用.</p>
<h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>点击 <a href="http://www.audiocoding.com/downloads.html" target="_blank" rel="noopener">源码链接</a> 即可下载源码.</p>
<p><img src="/upload/images/2018/02/14/1.jpg" alt="1"></p>
<h2 id="编译-faac"><a href="#编译-faac" class="headerlink" title="编译 faac"></a>编译 faac</h2><p>下载完成后, 解压, 将 <code>faac-1.28</code> 放到新建目录  <code>src</code> 下面即可, 目录结构如下:<br><img src="/upload/images/2018/02/14/2.jpg" alt="1"></p>
<p>修改 <code>build_faac.sh</code> 权限:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x build_faac.sh</div></pre></td></tr></table></figure>
<p>编辑 <code>build_faac.sh</code> 内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh  </div><div class="line">  </div><div class="line"># http://www.linuxfromscratch.org/blfs/view/svn/multimedia/faac.html  </div><div class="line"># ftp://mirror.ovh.net/gentoo-distfiles/distfiles/  </div><div class="line">  </div><div class="line">major=1  </div><div class="line">minor=28  </div><div class="line">micro=  </div><div class="line"></div><div class="line">XCD_ROOT=&quot;/Applications/Xcode.app/Contents/Developer&quot;  </div><div class="line">TOL_ROOT=&quot;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain&quot;  </div><div class="line">#修改为最新的 sdk 版本</div><div class="line">SDK_ROOT=&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS11.2.sdk&quot;  </div><div class="line">SDK_SML_ROOT=&quot;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator11.2.sdk&quot;  </div><div class="line"></div><div class="line">export PATH=$TOL_ROOT/usr/bin:$PATH  </div><div class="line">  </div><div class="line">work=`pwd`  </div><div class="line">srcs=$work/src  </div><div class="line">buid=$work/build  </div><div class="line">insl=$buid/install  </div><div class="line">name=faac-$&#123;major&#125;.$&#123;minor&#125;  </div><div class="line">pakt=$&#123;name&#125;.tar.gz  </div><div class="line">dest=$work/faac-iOS-$&#123;major&#125;.$&#123;minor&#125;.$&#123;micro&#125;.tgz  </div><div class="line">  </div><div class="line">rm -rf $srcs $buid $dest &amp;&amp; mkdir -p $srcs $buid  </div><div class="line"></div><div class="line"> </div><div class="line">archs=&quot;i386 x86_64 armv7 armv7s arm64&quot;  </div><div class="line">  </div><div class="line">for a in $archs; do  </div><div class="line">  case $a in  </div><div class="line">    arm*)  </div><div class="line">      sys_root=$&#123;SDK_ROOT&#125;  </div><div class="line">      host=arm-apple-darwin</div><div class="line">      ;;  </div><div class="line">    i386|x86_64)  </div><div class="line">      sys_root=$&#123;SDK_SML_ROOT&#125;  </div><div class="line">      host=$a-apple-darwin</div><div class="line">      ;;  </div><div class="line">  esac  </div><div class="line">  prefix=$insl/$a &amp;&amp; rm -rf $prefix &amp;&amp; mkdir -p $prefix  </div><div class="line">  rm -rf $srcs &amp;&amp; mkdir -p $srcs &amp;&amp; cd $work &amp;&amp; tar xvzf $pakt -C $srcs &amp;&amp; cd $srcs/$name  </div><div class="line"></div><div class="line">  </div><div class="line">  export CC=&quot;$TOL_ROOT/usr/bin/clang -arch $a -isysroot $sys_root&quot;</div><div class="line">  export CXX=&quot;$TOL_ROOT/usr/bin/clang++ -arch $a -isysroot $sys_root&quot;</div><div class="line">  export CXXFLAGS=&quot;-arch $a -isysroot $sys_root&quot;</div><div class="line">  export CFLAGS=&quot;-arch $a -isysroot $sys_root&quot;</div><div class="line">  export LDFLAGS=&quot;-isysroot $sys_root&quot;</div><div class="line">  export LIBS=&quot;-L$&#123;sys_root&#125;/usr/lib&quot;</div><div class="line"></div><div class="line">  chmod +x bootstrap  </div><div class="line">  ./bootstrap \</div><div class="line">    &amp;&amp;./configure \</div><div class="line">    --host=$host \</div><div class="line">    --with-sysroot=$sys_root \</div><div class="line">    --prefix=$prefix \</div><div class="line">    --disable-shared \</div><div class="line">    --enable-static \</div><div class="line">    --disable-faac \</div><div class="line">    --with-mp4v2 \</div><div class="line">    &amp;&amp;make &amp;&amp; make install</div><div class="line">  lipo_archs=&quot;$lipo_archs $prefix/lib/libfaac.a&quot;</div><div class="line"></div><div class="line">  echo &apos;continue any key pressed..&apos;</div><div class="line">  read -n 1</div><div class="line">done</div><div class="line">  </div><div class="line">univ=$insl/universal &amp;&amp; mkdir -p $univ/lib  </div><div class="line">cp -r $prefix/include $univ/  </div><div class="line">lipo $lipo_archs -create -output $univ/lib/libfaac.a  </div><div class="line">ranlib $univ/lib/libfaac.a  </div><div class="line">strip -S $univ/lib/libfaac.a  </div><div class="line">  </div><div class="line">cd $univ &amp;&amp; tar cvzf $dest *</div></pre></td></tr></table></figure>
<p>执行 <code>./build_faac.sh</code>, 开始编译.</p>
<p>编译成功后, 生成 build 目录.<br><img src="/upload/images/2018/02/14/3.jpg" alt="1"></p>
<p>其中, universal 生成的库是通用库.</p>
<h2 id="编译-faad2"><a href="#编译-faad2" class="headerlink" title="编译 faad2"></a>编译 faad2</h2><p>解压后, 将 <code>faad2-2.7</code> 改名为 <code>faad</code>.</p>
<p>编写编译的脚本文件, 这里取名为 <code>build_fadd2.sh</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch build_fadd2.sh</div></pre></td></tr></table></figure>
<p>编辑 <code>build_fadd2.sh</code> 文件.</p>
<p>写入如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line"></div><div class="line">CONFIGURE_FLAGS=&quot;--enable-static --with-pic&quot;</div><div class="line"></div><div class="line">ARCHS=&quot;arm64 armv7s armv7 x86_64 i386&quot;</div><div class="line"></div><div class="line"># directories</div><div class="line">SOURCE=&quot;faad&quot;</div><div class="line">FAT=&quot;fat-faad&quot;</div><div class="line"></div><div class="line">SCRATCH=&quot;scratch-faad&quot;</div><div class="line"># must be an absolute path</div><div class="line">THIN=`pwd`/&quot;thin-faad&quot;</div><div class="line"></div><div class="line">COMPILE=&quot;y&quot;</div><div class="line">LIPO=&quot;y&quot;</div><div class="line"></div><div class="line">if [ &quot;$*&quot; ]</div><div class="line">then</div><div class="line">if [ &quot;$*&quot; = &quot;lipo&quot; ]</div><div class="line">then</div><div class="line"># skip compile</div><div class="line">COMPILE=</div><div class="line">else</div><div class="line">ARCHS=&quot;$*&quot;</div><div class="line">if [ $# -eq 1 ]</div><div class="line">then</div><div class="line"># skip lipo</div><div class="line">LIPO=</div><div class="line">fi</div><div class="line">fi</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$COMPILE&quot; ]</div><div class="line">then</div><div class="line">CWD=`pwd`</div><div class="line">for ARCH in $ARCHS</div><div class="line">do</div><div class="line">echo &quot;building $ARCH...&quot;</div><div class="line">mkdir -p &quot;$SCRATCH/$ARCH&quot;</div><div class="line">cd &quot;$SCRATCH/$ARCH&quot;</div><div class="line"></div><div class="line">if [ &quot;$ARCH&quot; = &quot;i386&quot; -o &quot;$ARCH&quot; = &quot;x86_64&quot; ]</div><div class="line">then</div><div class="line">PLATFORM=&quot;iPhoneSimulator&quot;</div><div class="line">CPU=</div><div class="line">if [ &quot;$ARCH&quot; = &quot;x86_64&quot; ]</div><div class="line">then</div><div class="line">SIMULATOR=&quot;-mios-simulator-version-min=7.0&quot;</div><div class="line">HOST=&quot;--host=x86_64-apple-darwin&quot;</div><div class="line">else</div><div class="line">SIMULATOR=&quot;-mios-simulator-version-min=5.0&quot;</div><div class="line">HOST=&quot;--host=i386-apple-darwin&quot;</div><div class="line">fi</div><div class="line">else</div><div class="line">PLATFORM=&quot;iPhoneOS&quot;</div><div class="line">if [ $ARCH = &quot;armv7s&quot; ]</div><div class="line">then</div><div class="line">CPU=&quot;--cpu=swift&quot;</div><div class="line">else</div><div class="line">CPU=</div><div class="line">fi</div><div class="line">SIMULATOR=</div><div class="line">HOST=&quot;--host=arm-apple-darwin&quot;</div><div class="line">fi</div><div class="line"></div><div class="line">XCRUN_SDK=`echo $PLATFORM | tr &apos;[:upper:]&apos; &apos;[:lower:]&apos;`</div><div class="line">CC=&quot;xcrun -sdk $XCRUN_SDK clang -Wno-error=unused-command-line-argument-hard-error-in-future&quot;</div><div class="line">AS=&quot;$CWD/$SOURCE/extras/gas-preprocessor.pl $CC&quot;</div><div class="line">CFLAGS=&quot;-arch $ARCH $SIMULATOR&quot;</div><div class="line">CXXFLAGS=&quot;$CFLAGS&quot;</div><div class="line">LDFLAGS=&quot;$CFLAGS&quot;</div><div class="line"></div><div class="line">CC=$CC CFLAGS=$CXXFLAGS LDFLAGS=$LDFLAGS CPPFLAGS=$CXXFLAGS CXX=$CC CXXFLAGS=$CXXFLAGS  $CWD/$SOURCE/configure \</div><div class="line">$CONFIGURE_FLAGS \</div><div class="line">$HOST \</div><div class="line">--prefix=&quot;$THIN/$ARCH&quot; \</div><div class="line">--disable-shared \</div><div class="line">--without-mp4v2</div><div class="line"></div><div class="line">make clean &amp;&amp; make &amp;&amp; make install-strip</div><div class="line">cd $CWD</div><div class="line">done</div><div class="line">fi</div><div class="line"></div><div class="line">if [ &quot;$LIPO&quot; ]</div><div class="line">then</div><div class="line">echo &quot;building fat binaries...&quot;</div><div class="line">mkdir -p $FAT/lib</div><div class="line">set - $ARCHS</div><div class="line">CWD=`pwd`</div><div class="line">cd $THIN/$1/lib</div><div class="line">for LIB in *.a</div><div class="line">do</div><div class="line">cd $CWD</div><div class="line">lipo -create `find $THIN -name $LIB` -output $FAT/lib/$LIB</div><div class="line">done</div><div class="line"></div><div class="line">cd $CWD</div><div class="line">cp -rf $THIN/$1/include $FAT</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>给予执行权限:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod +x build_fadd2.sh</div></pre></td></tr></table></figure>
<p>此时目录结构如下:<br><img src="/upload/images/2018/02/14/4.jpg" alt="1"></p>
<p>执行编译脚本, 在当前目录生成 <code>scratch-faad</code> 和 <code>fat-faad</code> 以及 <code>thin-faad</code> 目录, 如下:<br><img src="/upload/images/2018/02/14/5.jpg" alt="1"></p>
<p>使用 <code>fat-faad</code> 里面的库和文件即可.</p>
<p>可以使用下面的命令查看对应的 <code>.a</code> 文件所支持的架构:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lipo -info libfaad.a</div></pre></td></tr></table></figure>
<p>会得到对应的输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Architectures in the fat file: libfaad.a are: i386 armv7 armv7s arm64</div></pre></td></tr></table></figure>
<p>同样可以查看 <code>libfaac.a</code>.</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>编译好的文件, 已经放到 github 上面了, 有需要的可以下载使用, 点击 <a href="https://github.com/veryitman/faacfaad2" target="_blank" rel="noopener">下载链接</a> 进入.</p>
<p>感谢 <a href="https://github.com/fflydev/faac-ios-build" target="_blank" rel="noopener">fflydev/faac-ios-build</a> 提供编译 <code>faac</code> 的 shell, 只需要将里面对应的 SDK 改为本机最新的 SDK 即可.</p>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><p><a href="http://www.voidcn.com/article/p-ftajkybd-p.html" target="_blank" rel="noopener">faac 1.28的交叉编译与问题解决</a></p>
</li>
<li><p><a href="http://blog.csdn.net/coloriy/article/details/52053144" target="_blank" rel="noopener">使用FAAD库解码AAC实例</a></p>
</li>
<li><p><a href="https://magiclen.org/linux-fdk-aac-2/" target="_blank" rel="noopener">在Linux上使用FDK AAC將音樂轉成M4A(AAC、HE-AAC、HE-AACv2)格式</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/45928cdafde0" target="_blank" rel="noopener">aac文件转码为wav文件</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 音视频 faac faad2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 多线程: 初步认识]]></title>
      <url>/2018/02/12/iOS-%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</url>
      <content type="html"><![CDATA[<p>几乎每个编程语言或者平台都会遇到多线程的问题, 说明多线程是一个非常重要且开发者必须了解和掌握的.</p>
<p>多线程也是面试官比较喜欢问的问题, 例如:</p>
<ul>
<li>进程和线程的区别, Android 是否支持多进程?</li>
<li>线程池如何实现的?</li>
<li>锁机制?</li>
<li>多线程之间如何通信?</li>
</ul>
<p>谈及 iOS 中的多线程，一般说的是 pthread，NSthread，GCD，NSOperation 这四种, 用的最多也最方便的就是 GCD 了. 关于这四者, 后续会为大家一一分享.</p>
<p>phtread 是跨平台的, C/C++ 中都有它的声影, GCD 和 NSOperation 都是常用的，NSOperation 是基于 GCD 的. GCD 的核心概念是将一个任务添加到队列，指定任务执行的方法，然后执行, NSOperation 则是直接将一个操作添加到队列中.</p>
<p>该系列文章来跟大家分享关于 iOS 中的多线程.</p>
<ul>
<li>iOS 多线程: 初步认识(本篇)</li>
</ul>
<h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程和线程的定义, 大家可以自行到维基百科上面去查.</p>
<p>这里只说二者的区别.</p>
<ul>
<li><p>一个程序至少有一个进程, 一个进程至少有一个线程如主线程.</p>
</li>
<li><p>多线程程序的并发性高.</p>
</li>
<li><p>进程在执行过程中拥有独立的内存单元，而多线程是共享内存的，从而极大地提高了程序的运行效率.</p>
</li>
<li><p>每个独立的线程有一个程序运行的入口、顺序执行序列和程序的出口. 线程不能够独立执行，必须依存在应用程序中，由应用程序提供多个线程执行控制.</p>
</li>
<li><p>操作系统并没有将多个线程看做多个独立的应用, 多线程的意义在于一个应用程序中，有多个执行部分可以同时执行, 从而实现了进程的调度和管理以及资源分配.</p>
</li>
</ul>
<h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>iOS 中, 队列主要分为:</p>
<ul>
<li>全局队列</li>
<li>主队列.</li>
<li>串行队列.</li>
<li>并发队列.</li>
</ul>
<blockquote>
<ul>
<li><p>Concurrent:<br>tasks are dequeued in FIFO order, but run concurrently and can finish in any order.</p>
</li>
<li><p>Serial: .<br>tasks execute one at a time in FIFO order</p>
</li>
</ul>
</blockquote>
<p>并发: 任务以 FIFO 从序列中移除，然后并发运行，可以按照任何顺序完成.</p>
<p>串行: 任务以FIFO从序列中一个一个执行. 一次只调度一个任务.</p>
<p>在 iOS 中, 并发不一定会开启多个线程, 串行也不一定只开启一个线程. 因为这里会牵扯到是异步还是同步执行.</p>
<p>主队列, 即 mainQueue.</p>
<blockquote>
<p>Returns the default queue that is bound to the main thread.</p>
</blockquote>
<p>会关联主线程.</p>
<p>全局队列, 即 globalQueue.</p>
<blockquote>
<p>The well-known global concurrent queues may not be modified.</p>
</blockquote>
<p>全局队列中执行不一定会开启新线程.</p>
<h2 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h2><p>在 iOS 的 GCD 中, 还有同步和异步执行的区别.</p>
<blockquote>
<p>同步</p>
</blockquote>
<p>同步执行代码块, 诸如 dispatch_async 中执行的.</p>
<blockquote>
<p>异步</p>
</blockquote>
<p>异步执行代码块, 诸如 dispatch_sync 中执行的.</p>
<h2 id="创建队列的方法"><a href="#创建队列的方法" class="headerlink" title="创建队列的方法"></a>创建队列的方法</h2><p><strong>创建主队列</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t dispatch_get_main_queue(void);</div></pre></td></tr></table></figure>
<p><strong>创建全局队列</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t dispatch_get_global_queue(long identifier, unsigned long flags);</div></pre></td></tr></table></figure>
<p>参数 identifier 用来表示优先级. 对应的优先级为:</p>
<ul>
<li>DISPATCH_QUEUE_PRIORITY_HIG</li>
<li>DISPATCH_QUEUE_PRIORITY_DEFAULT</li>
<li>DISPATCH_QUEUE_PRIORITY_LOW</li>
<li>DISPATCH_QUEUE_PRIORITY_BACKGROUND</li>
</ul>
<p>如果传入 0 标示 DISPATCH_QUEUE_PRIORITY_DEFAULT.</p>
<p>参数 flags 是一个保留参数, API 文档要求传入 0, 非0值可能会导致返回结果为 NULL.</p>
<p><strong>自定义队列</strong></p>
<p>dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr);</p>
<p>参数 label 是一个字符串.</p>
<p>参数 attr 用来标示是串行还是并行队列. 可以从 DISPATCH_QUEUE_SERIAL, DISPATCH_QUEUE_CONCURRENT 二者中取值.</p>
<p>如果该参数传入 NULL, 默认是 DISPATCH_QUEUE_SERIAL 串行队列.</p>
<h2 id="串行队列中的线程"><a href="#串行队列中的线程" class="headerlink" title="串行队列中的线程"></a>串行队列中的线程</h2><p>串行队列到底是开了一个线程, 还是开了多个线程, 我们一探究竟.</p>
<p>先看例子1</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.veryitman&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">for (int i=0; i&lt;10; i++) &#123;</div><div class="line">    </div><div class="line">    dispatch_async(serialQueue, ^&#123;</div><div class="line">        NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/02/12/1.jpg" alt="1"></p>
<p>可以看出, 只开启一个新线程.</p>
<p>再看例子2</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.veryitman&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">dispatch_async(serialQueue, ^&#123;</div><div class="line">    NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</div><div class="line">    sleep(2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_async(serialQueue, ^&#123;</div><div class="line">    NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/02/12/2.jpg" alt="1"></p>
<p>可以看出, 也只开启一个新线程.</p>
<p>改造一下例子2, 将其中的一个异步改为同步</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">dispatch_queue_t serialQueue = dispatch_queue_create(&quot;com.veryitman&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">    </div><div class="line">dispatch_async(serialQueue, ^&#123;</div><div class="line">    NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</div><div class="line">    sleep(2);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">dispatch_sync(serialQueue, ^&#123;</div><div class="line">    NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_SERIAL CurrentThread: %@&quot;, [NSThread currentThread]);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/02/12/3.jpg" alt="1"></p>
<p>可以看出, 同步的执行在主线程, 二者并不是在一个线程中执行.</p>
<p>所以, 串行队列中执行的代码, 不一定都在子线程中, 如果是异步都是同一个线程中执行.如果是同步的话, 会在主线程中执行.</p>
<p><strong>同理, 并行队列中的异步执行会开启多个线程来执行.</strong></p>
<h2 id="执行方式和队列"><a href="#执行方式和队列" class="headerlink" title="执行方式和队列"></a>执行方式和队列</h2><p>这里的执行方式指的是同步或者异步执行.</p>
<p>先看异步执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/// 异步全局队列和主队列</div><div class="line">    &#123;</div><div class="line">        dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">            // 1</div><div class="line">            NSLog(@&quot;dispatch_async. mainQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        dispatch_async(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">            // 0</div><div class="line">            NSLog(@&quot;dispatch_async. globalQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /// 异步串行和并行队列</div><div class="line">    &#123;</div><div class="line">        dispatch_async(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</div><div class="line">            // 0</div><div class="line">            NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_SERIAL. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        dispatch_async(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_CONCURRENT), ^&#123;</div><div class="line">            // 0</div><div class="line">            NSLog(@&quot;dispatch_async. DISPATCH_QUEUE_CONCURRENT. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/02/12/4.jpg" alt="1"></p>
<p>再看同步执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">/// 同步全局队列和主队列</div><div class="line">    &#123;</div><div class="line"></div><div class="line">    #if 0</div><div class="line">        // 会死锁</div><div class="line">        dispatch_sync(dispatch_get_main_queue(), ^&#123;</div><div class="line">            NSLog(@&quot;dispatch_sync. mainQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line">    #endif</div><div class="line"></div><div class="line">        dispatch_sync(dispatch_get_global_queue(0, 0), ^&#123;</div><div class="line">            // 1</div><div class="line">            NSLog(@&quot;dispatch_sync. globalQueue. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /// 同步串行和并行队列</div><div class="line">    &#123;</div><div class="line">        dispatch_sync(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_SERIAL), ^&#123;</div><div class="line">            // 1</div><div class="line">            NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_SERIAL. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        dispatch_sync(dispatch_queue_create(&quot;&quot;, DISPATCH_QUEUE_CONCURRENT), ^&#123;</div><div class="line">            // 1</div><div class="line">            NSLog(@&quot;dispatch_sync. DISPATCH_QUEUE_CONCURRENT. isMainThread: %i&quot;, [NSThread isMainThread]);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2018/02/12/5.jpg" alt="1"></p>
<blockquote>
<p>得出结论</p>
</blockquote>
<ul>
<li>任何队列的同步执行, 都没有开启新线程, 在主线程中执行.</li>
<li>主队列的同步执行会造成死锁.</li>
<li>主队列的异步执行, 没有开启新线程. 在主线程中执行.</li>
<li>串行和并行以及全局队列的异步执行, 都会开启新线程.</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><p><a href="http://blog.csdn.net/robbyo/article/details/8549904" target="_blank" rel="noopener">进程和线程的区别</a></p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="noopener">进程与线程的一个简单解释</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS 多线程 进程 GCD </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C/C++: 如何相互调用]]></title>
      <url>/2018/02/12/C-C-%E5%A6%82%E4%BD%95%E7%9B%B8%E4%BA%92%E8%B0%83%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>C++ 中调用 C 比较简单. 但是 C 调用 C++ 稍微复杂一些.</p>
<p>C 调用 C++ 分为可以调用 C++ 类中的函数和普通 cpp 中的函数. 无论是哪种函数, 我们都可以使用封装了 C++ 的文件作为适配供给 C 来使用.</p>
<p>下面看具体的例子.</p>
<h2 id="C-调用-C"><a href="#C-调用-C" class="headerlink" title="C++ 调用 C"></a>C++ 调用 C</h2><p>首先创建 CFile.h 和 CFile.c 文件.</p>
<blockquote>
<p>CFile.h</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#ifndef CFile_h</div><div class="line">#define CFile_h</div><div class="line"></div><div class="line">#include &lt;stdio.h&gt;</div><div class="line"></div><div class="line">extern void start_c(int cmd);</div><div class="line"></div><div class="line">#endif /* CFile_h */</div></pre></td></tr></table></figure>
<blockquote>
<p>CFile.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#include &quot;CFile.h&quot;</div><div class="line"></div><div class="line">void start_c(int cmd) &#123;</div><div class="line">    </div><div class="line">    printf(&quot;start_c by cmd: %i\n&quot;, cmd);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 C++ 文件中调用 C 代码, 示例如下:</p>
<blockquote>
<p>main.cpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#include &quot;CFile.h&quot;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    </div><div class="line">    start_c(1);</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里可以看到导入 C 文件的方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#include &quot;CFile.h&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果直接导入, 如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &quot;CFile.h&quot;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    </div><div class="line">    start_c(1);</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译报错:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Undefined symbols for architecture x86_64:</div><div class="line">  &quot;start_c(int)&quot;, referenced from:</div><div class="line">      _main in main.o</div><div class="line">ld: symbol(s) not found for architecture x86_64</div></pre></td></tr></table></figure>
<p>这里的 <code>extern &quot;C&quot;</code> 告诉编译器, 要按照 C 的链接约定，而不是 C++ 的链接约定.</p>
<p>C 编译器不支持 <code>extern &quot;C&quot;</code>.</p>
<h2 id="C-调用普通-C-的函数"><a href="#C-调用普通-C-的函数" class="headerlink" title="C 调用普通 C++ 的函数"></a>C 调用普通 C++ 的函数</h2><p>C 调用 C++ 有点曲折.</p>
<blockquote>
<p>CPPFile.hpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#ifndef CPPFile_hpp</div><div class="line">#define CPPFile_hpp</div><div class="line"></div><div class="line">void start_cpp(int cmd);</div><div class="line"></div><div class="line">#endif /* CPPFile_hpp */</div></pre></td></tr></table></figure>
<blockquote>
<p>CPPFile.cpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#include &quot;CPPFile.hpp&quot;</div><div class="line">#include &lt;iostream&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void start_cpp(int cmd) &#123;</div><div class="line">    </div><div class="line">    cout &lt;&lt; &quot;start_cpp by cmd: &quot; &lt;&lt; cmd &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要写一个中间的 cpp(CPPAdapter.cpp)文件, 提供方法给 C 来使用.</p>
<p>注意: 这里没有 <code>CPPAdapter.hpp</code> 头文件.</p>
<blockquote>
<p>CPPAdapter.cpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">#include &quot;CPPFile.hpp&quot;</div><div class="line"></div><div class="line">#ifdef __cplusplus</div><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#endif</div><div class="line">    </div><div class="line">    void adapter_start_cpp(int cmd) &#123;</div><div class="line">        </div><div class="line">        //调用 CPPFile 中的方法</div><div class="line">        start_cpp(cmd);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>然后在 C 中调用 C++ 的代码:</p>
<blockquote>
<p>CFile.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#include &quot;CFile.h&quot;</div><div class="line"></div><div class="line">//声明函数</div><div class="line">extern void adapter_start_cpp(int cmd);</div><div class="line"></div><div class="line">void start_c(int cmd) &#123;</div><div class="line">        </div><div class="line">    //调用 c++ 代码</div><div class="line">    adapter_start_cpp(5);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="C-调用-C-类中的方法"><a href="#C-调用-C-类中的方法" class="headerlink" title="C 调用 C++ 类中的方法"></a>C 调用 C++ 类中的方法</h2><p>和上面例子的原理一样的.</p>
<blockquote>
<p>CPPClassFile.hpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#ifndef CPPClassFile_hpp</div><div class="line">#define CPPClassFile_hpp</div><div class="line"></div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;string&gt;</div><div class="line"></div><div class="line">using namespace std;</div><div class="line"></div><div class="line">class Person &#123;</div><div class="line">private:</div><div class="line">    string name;</div><div class="line">    </div><div class="line">public:</div><div class="line">    Person();</div><div class="line">    ~Person();</div><div class="line">    </div><div class="line">    int setName(string name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">#endif /* CPPClassFile_hpp */</div></pre></td></tr></table></figure>
<blockquote>
<p>CPPClassFile.cpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">#include &quot;CPPClassFile.hpp&quot;</div><div class="line"></div><div class="line">Person::Person() &#123;</div><div class="line">    </div><div class="line">    cout &lt;&lt; &quot;Person()&quot; &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Person::~Person() &#123;</div><div class="line">    </div><div class="line">    cout &lt;&lt; &quot;~Person()&quot; &lt;&lt; endl;</div><div class="line">&#125;</div><div class="line"></div><div class="line">int Person::setName(string name) &#123;</div><div class="line">    </div><div class="line">    this-&gt;name = name;</div><div class="line">    </div><div class="line">    cout &lt;&lt; &quot;Set name: &quot; &lt;&lt; name &lt;&lt; endl;</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>CPPAdapter.cpp</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">#include &quot;CPPFile.hpp&quot;</div><div class="line">#include &quot;CPPClassFile.hpp&quot;</div><div class="line"></div><div class="line">#ifdef __cplusplus</div><div class="line">extern &quot;C&quot; &#123;</div><div class="line">#endif</div><div class="line">    </div><div class="line">    void adapter_start_cpp(int cmd) &#123;</div><div class="line">        </div><div class="line">        //调用 CPPFile 中的方法</div><div class="line">        start_cpp(cmd);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    int adapter_set_name(const char *cName) &#123;</div><div class="line">        </div><div class="line">        Person *person = new Person();</div><div class="line">        int ret = person-&gt;setName(cName);</div><div class="line">        delete person;</div><div class="line">        </div><div class="line">        return ret;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>在 C 中可以调用了, 如下代码:</p>
<blockquote>
<p>CFile.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">#include &quot;CFile.h&quot;</div><div class="line"></div><div class="line">///声明 CPPFile 中的方法</div><div class="line">extern void adapter_start_cpp(int cmd);</div><div class="line"></div><div class="line">///声明 CPPClassFile 中的方法</div><div class="line">extern int adapter_set_name(const char *cName);</div><div class="line"></div><div class="line">void start_c(int cmd) &#123;</div><div class="line">    </div><div class="line">    printf(&quot;start_c by cmd: %i\n&quot;, cmd);</div><div class="line">    </div><div class="line">    //调用 CPPFile 中的方法</div><div class="line">    adapter_start_cpp(5);</div><div class="line">    </div><div class="line">    //调用 CPPClassFile 中的方法</div><div class="line">    adapter_set_name(&quot;www.veryitman.com&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="extern-“C”"><a href="#extern-“C”" class="headerlink" title="extern “C”"></a>extern “C”</h2><p><code>extern &quot;C&quot;</code> 中的 “C” 并不表示 C 语言，”C” 表示的是一种链接约定.</p>
<p><code>extern &quot;C&quot;</code> 指令描述的是一种链接约定，它并不影响调用函数的定义，即使做了该声明，对函数类型的检查和参数转换仍要遵循 C++ 的标准，而不是 C 的标准.</p>
<p>不同的编程语言(编译型)链接特性是不同的，这也决定了它们编译后的链接符号的不同.</p>
<p>如函数 <code>void function(int d)</code>，C 语言会把它编译成类似 <code>_function</code> 这样的符号，C 链接器只要找到该函数符号就可以链接成功.</p>
<p>C++ 会把这个函数编译成类似 <code>_function_int</code> 或 <code>_xxx_functionIntxxx</code> 这样的符号，即在符号上增加了类型信息，这也解释了为什么 C++ 可以实现函数重载了.</p>
<p>那么，对于用 C 编译器编译成的库，用 C++ 直接链接势必会出现不能识别符号的问题，用 <code>extern &quot;C&quot;</code> 就可以解决, 正如上面的例子.</p>
<p>简单来说, <code>extern &quot;C&quot;</code> 的作用就是让编译器知道要以 C 语言的方式编译和链接函数.</p>
<h2 id="cplusplus-宏"><a href="#cplusplus-宏" class="headerlink" title="__cplusplus 宏"></a>__cplusplus 宏</h2><p><code>__cplusplus</code> 宏是 C++ 编译器默认定义的.</p>
<p>类似如下的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#ifdef __cplusplus</div><div class="line">extern &quot;C&quot;&#123;</div><div class="line">#endif</div><div class="line"></div><div class="line">void fun(int, size_t);</div><div class="line"></div><div class="line">#ifdef __cplusplus</div><div class="line">&#125;</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>在 C++ 中, 编译器将 fun 按照 C 的链接约定来编译, 而如果是 C 编译器, 直接按照 C 的链接约定来编译即可.</p>
<p><code>__cplusplus</code> 是在 C++ 编译器中默认定义的,Ｃ语言不支持 <code>extern &quot;Ｃ&quot;</code>.</p>
<p>上面的代码很实用, 也是一种编程技巧.</p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C C++ 编程语言 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS APNs: Background Fetch]]></title>
      <url>/2018/02/08/iOS-APNs-Background-Fetch/</url>
      <content type="html"><![CDATA[<p>在前面的几篇文章中, 给大家介绍了跟推送相关的内容.</p>
<p>今天跟大家聊一聊 iOS7 新加入的 <code>Background Fetch</code> 功能.</p>
<p>该系列博客:</p>
<blockquote>
<p><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 远程推送</a><br><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 本地推送</a><br><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/" target="_blank" rel="noopener">iOS APNs: 处理数据</a><br><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 静默推送</a><br>iOS APNs: Background Fetch(本篇)</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>从 <code>Background Fetch</code> 字面上来看, 大致意思是可在后台获取数据.</p>
<p>在 iOS7 中，Apple 为开发者提供了可以在后台更新应用程序界面和内容的 API, 即 <code>Background Fetch</code>.</p>
<p>该特性允许开发者在一个周期间隔后进行特定的动作，如获取网络内容, 更新 UI 操作等.</p>
<p>同时在 iOS7 中, 也加入了另一个特性, 就是博文 <a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 静默推送</a> 里面说的静默推送.</p>
<p>这些都是对 iOS 后台多任务的补充和完善, Apple 一直在优化系统从而增强用户体验.</p>
<h2 id="开启-Background-Fetch"><a href="#开启-Background-Fetch" class="headerlink" title="开启 Background Fetch"></a>开启 Background Fetch</h2><p><strong>1.需要 APP 支持</strong></p>
<p>如下图所示, 勾选即可.</p>
<p><img src="/upload/images/2018/02/08/1.png" alt="1"></p>
<p><strong>2.设置 fetch 时间间隔</strong></p>
<p>在 AppDelegate 中设置.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; </div><div class="line"></div><div class="line">    // 设置 fetch 时间间隔</div><div class="line">    [application setMinimumBackgroundFetchInterval:UIApplicationBackgroundFetchIntervalMinimum];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>UIApplicationBackgroundFetchIntervalMinimum</code> 是系统自定义的时间. 如果不设置, 默认是 <code>UIApplicationBackgroundFetchIntervalNever</code>, 这样就不会让 <code>Background Fetch</code> 生效了.</p>
<p>可以查看对 UIApplicationBackgroundFetchIntervalNever 的官方解释.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">UIApplicationBackgroundFetchIntervalNever</div><div class="line"></div><div class="line">A fetch interval large enough to prevent fetch operations from occurring.</div></pre></td></tr></table></figure>
<p>当然, 你也可以设置自己定义的时间的间隔, 但是基本没有什么作用, 因为这个时间间隔完全由系统来决定, 系统会根据你的电量以及使用频率来决定.</p>
<p>所以, 可以理解为 <code>setMinimumBackgroundFetchInterval</code> 方法只是开启了 <code>Background Fetch</code> 功能.</p>
<p><strong>3.开启了系统后台更新功能</strong></p>
<p>在 iOS 系统中, 设置/通用/后台应用刷新中一定要开启对应 APP 的功能.</p>
<p>判断是否已经开启该功能的示例代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">if ([[UIApplication sharedApplication] backgroundRefreshStatus] != UIBackgroundRefreshStatusAvailable) &#123;</div><div class="line"></div><div class="line">    //不可用提示用户</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="处理回调"><a href="#处理回调" class="headerlink" title="处理回调"></a>处理回调</h2><p>在实际的应用环中，<code>Background Fetch</code> 事件是由系统管理的，我们开发者是无法预先知道 Fetch 事件达到的时机的. </p>
<p>网上很多说可以使用 Xcode 模拟这个事件, 估计也是之前的系统和 Xcode 版本, 现在的 Xcode9 貌似不行了.</p>
<p>但是, 你的手机在后台等几分钟, 有时候会被系统触发该事件, 触发后, 对应的系统回调(在 AppDelegate 中)会被调用.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// Background fetch 回调</div><div class="line">- (void)application:(UIApplication *)application</div><div class="line">performFetchWithCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;AppDelegate. Background fetch.&quot;);</div><div class="line">    </div><div class="line">    //可进行对应的耗时操作, 如下载等.</div><div class="line">    </div><div class="line">    completionHandler(UIBackgroundFetchResultNoData);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Background Fetch</code> 会为我们的 App 争取更多的后台时间, 但是一般是几十秒左右, 不会太多. 所以, 不要在回调中做太多耗时的操作.</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> APNs 远程推送 BackgroundFetch </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS APNs: 静默推送]]></title>
      <url>/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/</url>
      <content type="html"><![CDATA[<p>今天跟大家介绍一下 ios 的静默推送功能.</p>
<p>静默推送, 简单来说就是通过推送实现用户无感知的消息通知.</p>
<p>该系列博文:</p>
<blockquote>
<p><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 远程推送</a><br><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 本地推送</a><br><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/" target="_blank" rel="noopener">iOS APNs: 处理数据</a><br>iOS APNs: 静默推送(本篇)</p>
</blockquote>
<h2 id="普通推送"><a href="#普通推送" class="headerlink" title="普通推送"></a>普通推送</h2><p>例如微信, 好友给你发送了一条消息, 你的微信APP 在后台, 此时会收到带声音的一个消息提示.</p>
<p>这条推送机油有文字又有声音, 点开这个推送可以直接打开 APP.</p>
<p>从程序的角度来讲, 进入 App 后会调用下面的方法:</p>
<p>iOS10.0.x 和其之前的系统调用下面的方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo</div></pre></td></tr></table></figure>
<p>iOS10.0.x 之后的系统, 会调用如下的方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application</div><div class="line">                    didReceiveRemoteNotification:(NSDictionary *)userInfo</div><div class="line">                    fetchCompletionHandler:(void (^)(UIBackgroundFetchResult result))completionHandler</div></pre></td></tr></table></figure>
<h2 id="静默推送的异同"><a href="#静默推送的异同" class="headerlink" title="静默推送的异同"></a>静默推送的异同</h2><p><strong>1.没有弹出框</strong></p>
<p>没有推送的弹框出现, 用户毫无感知的接收到了这个推送消息. 有 <code>润物细无声</code> 的感觉.</p>
<p>该推送既没有文字又没有声音.</p>
<p><strong>2.需要用户授权允许推送</strong></p>
<p>这个跟普通推送一样, 都需要用户授权才可以推送.</p>
<p><strong>3.会执行代理方法</strong></p>
<p>静默推送来的时候, 也能执行上面的回调方法. 执行上面方法的场景如下::</p>
<blockquote>
<p>1.App 在前台.<br>2.App 在后台, 但是没有被 kill 掉.</p>
</blockquote>
<p><strong>4.iOS7 以后才有的</strong></p>
<p>对于 iOS 之前是没有静默推送的.</p>
<p><strong>5.可以延长后台时间</strong></p>
<p>收到静默推送后, 在应用程序挂起之前有 30 秒左右可以执行相关的操作.</p>
<p>6.推送频率的控制</p>
<p>静默的推送是苹果推送服务器控制推送频率的.</p>
<p>苹果推送服务根据后台推送任务的能耗(用电量,接收情况)来控制后台推送的推送频率和延迟时间.</p>
<hr>
<p><strong>总之</strong>, 静默推送是普通推送的一种变种而已. </p>
<p>无论是静默推送还是普通推送, 开发者证书里面必须开通 push 相关的功能, 并且也需要用户开启允许推送的授权.</p>
<p>这个在 <a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 远程推送</a> 里面已经介绍过, 不在这里赘述.</p>
<h2 id="推送的格式"><a href="#推送的格式" class="headerlink" title="推送的格式"></a>推送的格式</h2><p>普通推送的格式, 大致是这个样子:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;aps&quot;:</div><div class="line">        &#123;</div><div class="line">            &quot;alert&quot;:&quot;Testing.. (15),</div><div class="line">            &quot;badge&quot;:1,</div><div class="line">            &quot;sound&quot;:&quot;default&quot;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>静默推送是不允许带 <code>alert</code> <code>badge</code>  <code>sound</code> 等字段的. 但是必须包含 <code>&quot;content-available&quot;:1</code>.</p>
<p>例如下面的形式都可以:</p>
<blockquote>
<p>形式1</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;aps&quot;:</div><div class="line">        &#123;</div><div class="line">            &quot;content-available&quot;:1</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>形式2</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;aps&quot;:</div><div class="line">        &#123;</div><div class="line">            &quot;custom&quot;:&quot;open_profile_page&quot;</div><div class="line">            &quot;content-available&quot;:1</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中, custom 是自己定义的, 大家根据需求自行扩展即可.</p>
<blockquote>
<p>形式3</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;aps&quot; : &#123;</div><div class="line">        &quot;content-available&quot; : 1</div><div class="line">    &#125;,</div><div class="line">    &quot;acme1&quot; : &quot;bar&quot;,</div><div class="line">    &quot;acme2&quot; : 42</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个来自苹果开发者 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html" target="_blank" rel="noopener">文档</a>.</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>具体的使用场景, 需要结合本身的业务和功能特点来说.</p>
<p>静默推送的前提是 APP 没有被杀死, 可以通过回调函数来执行相关的代码.</p>
<p>另外, 静默推送不会打扰用户, 比如用户正在游戏中战斗, 你频繁的使用普通推送给他, 估计他都要疯了. </p>
<p>我个人使用静默推送的场景大致是这样的, APP 将要挂起的时候, 请求服务器去发一条静默推送, 然后使用本地通知的方式唤起用户来打开 APP, 从而保证 APP 处于保活的状态, 至少静默推送可以增加后台挂起的时间.</p>
<p>关于本地通知的内容, 可以参考之前的文章 <a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 本地推送</a>.</p>
<p>更多的使用场景等大家在业务中去挖掘.</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> APNs 推送 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hi 2018, 我又来了]]></title>
      <url>/2018/02/02/Hi-2018-%E6%88%91%E5%8F%88%E6%9D%A5%E4%BA%86/</url>
      <content type="html"><![CDATA[<p>好久没有更新自己的博客了, 以前坚持一周至少两三篇博文的我, 从 2017 年 10 月份到现在居然停止了. </p>
<p>其实, 这是有原因的…</p>
<h2 id="数据丢了"><a href="#数据丢了" class="headerlink" title="数据丢了"></a>数据丢了</h2><p>2017 年 10 月 15 日晚, 我亲手把自己的之前写的文章(原数据)给弄丢了. 我自己搭建的博客系统是使用 GitHub + Hexo 部署和发布的.</p>
<p>事情大致经过是这样的…</p>
<p>Mac 操作系统提示, 有更新的系统可以使用了, 问是否立即安装, 在公司的时候, 我心想, 更新后, 自己安装的一些库, 估计也要重新安装, 嫌麻烦就直接跳过了.</p>
<p>过了几天, 我晚上下班回家, 系统又提示我更新. 当时, 我就没有忍住, 直接更新了, 毕竟早晚都要更新的, 再说了 MacOS 还是比较让人放心的.</p>
<p>趁电脑更新系统的时候, 我就去洗了澡, 回来发现系统更新已经完成了. </p>
<p>心中想正好可以把之前没有完成的博客去完善一下, 谁知道…天不遂我愿呀! 再去使用 Hexo 的时候, 提示我失败, 居然无法使用了. 这可把我急的够呛, 一气之下(脑子估计当时进水了), 直接删了 Hexo 目录, 是那种程序员式的毫不留情的删除.</p>
<pre><code>rm -fr ./hexo
</code></pre><p>潇洒的操作后, 重新安装 Hexo, 又折腾了两个晚上, 最终也是安装好了, 可以写东东了.</p>
<p>但是发现从 Github 上面 clone 后的文件, 无法还原成自己当初的 MarkDown 文件了.</p>
<p>雪花那个飘啊飘, 北风那个萧呀萧…</p>
<p>一切都晚了! ^^</p>
<p>唯一值得庆幸的是, 原来自己的网站博文还在那里.</p>
<h2 id="还原数据"><a href="#还原数据" class="headerlink" title="还原数据"></a>还原数据</h2><p>从哪里跌倒, 就从哪里爬起来, 我决定把之前的数据使用 <code>人工智能</code> 的方式还原回来.</p>
<p>😆我就是那个 <code>人工</code>, 手动的将 HTML 转换为 MarkDown 文档, 压根没有什么 <code>智能</code>.</p>
<p>好歹那也是自己熬过多少个日夜的成果呀, 没有功劳也有苦劳, 我不忍心就这样让它丢掉, 含着泪也要把它们给找回来!</p>
<p>自己下半年也比较忙, 周末都在加班, 只能每天晚上回家抽些时间还原一点, 有时候太困, 就推迟到下个晚上. 大概用了 3 个月左右的时间, 基本还原回来了. </p>
<p>每篇文章基本都有配图, 都有跳转链接, 恢复起来, 还是需要一点时间和毅力的, 中途我也放弃过, 但是想想它们就要这样的被我抹杀了, 实在太可怜了, 就坚持下来了.</p>
<h2 id="反思和总结"><a href="#反思和总结" class="headerlink" title="反思和总结"></a>反思和总结</h2><p>还原之前的数据, 比写新文章还累, 主要是心累.</p>
<p>刚开始的时候, 我每篇都想一步到位的还原, 发现坚持几个晚上, 效率很低, 很容易放弃.</p>
<p>最后, 我调节了一下心态, 分 <code>迭代</code> 去做.</p>
<p><strong>第一个阶段</strong>, 把 HTML 文章拷贝到 MarkDown 工具中, 不做任何的修饰和修改.</p>
<p><strong>第二个阶段</strong>, 梳理 MarkDown 文档, 把缺失的图片补上去.</p>
<p><strong>第三个阶段</strong>, 把文章中的链接尽量补全.</p>
<p>经过这三个阶段后, 文章基本已经复原了, 只是格式上看起来有点糟糕. </p>
<p><strong>第四个阶段</strong>, 整理文章的排版, 对比已经发布的文章, 查漏补缺.</p>
<p>第四个阶段结束后, 文章基本都复活了, 接下来就是部署和发布了.</p>
<p><strong>第五个阶段</strong>, 整理 Hexo, 配置相关的主题.</p>
<p><strong>第六个阶段</strong>, 本地预览和再次校验文章, 统一发布.</p>
<p>每个阶段, 我都给自己一个小目标, 不断的去完善, 最后将各个阶段的成果串联起来, 就完成了. 当自己遇到困难的时候, 不妨分解一下任务, 不断的去完成每个小任务, 每个完成的小任务都是对自己最大的奖励.</p>
<p>整个还原的过程, 又让我重新梳理了一下之前的文章, 包括目录规划和文章中的措辞, 也对图片进行了压缩和处理. 收获颇多.</p>
<p>如果当初自己不那么冲动, 如果当初自己备份了文件, 应该就不会有这么一个艰辛的历程了.</p>
<blockquote>
<p>数据备份很重要, 冲动是要付出代价的.</p>
</blockquote>
<p>现在我把原数据保存在云盘中, 本地也保留一份, 定期更新到云盘中. 这样就可以防止数据丢失了.</p>
<p>祝大家在 2018 发发发, 身体健康, 幸福安康!</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>推荐给 Mac 用户一个图片压缩工具 <a href="https://imageoptim.com/mac" target="_blank" rel="noopener">imageoptim</a>.</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 生活 反思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCC: 静态库]]></title>
      <url>/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>如果你对 GCC 的编译 C语言的流程不清楚, 建议在阅读本文之前先去看一下 <a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">GCC: 编译C语言的流程</a> 这篇文章, 篇幅短小精悍, 阅读后, 至少可以扫扫盲😜.</p>
<p>本篇博文用到的一些基础知识点:</p>
<p><strong>1.GCC</strong></p>
<p>gcc -c 选项含义:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Only run preprocess, compile, and assemble steps</div></pre></td></tr></table></figure>
<p>是 <code>-c</code> 选项只是进行了预处理, 编译, 汇编的阶段, 不会进行链接的操作.</p>
<p><strong>2.静态库</strong></p>
<p>Linux 上的静态库，本质是一些目标文件的归档文件.</p>
<p><strong>3.静态库和共享库区别</strong></p>
<p>[1].使用共享库可以节省内存.</p>
<blockquote>
<p>比如 libc，系统中几乎所有的进程都映射 libc 到自己的进程地址空间，而 libc 的只读部分在物理内存中只需要存在一份，就可以被所有进程共享，这就是“共享库”这个名称的由来了.</p>
</blockquote>
<p>[2].使用共享库可以很方便地升级库文件而不需要重新编译应用程序.</p>
<p>[3].共享库占用更少的体积.</p>
<blockquote>
<p>在运行时做动态链接.而在链接静态库时, 链接器会把静态库中的目标文件取出来和可执行文件真正链接在一起.</p>
</blockquote>
<h2 id="创建步骤"><a href="#创建步骤" class="headerlink" title="创建步骤"></a>创建步骤</h2><p>创建静态库的步骤如下:</p>
<p>[1]. 写源文件.<br>[2]. 通过 gcc -c x.c 生成目标文件.<br>[2]. 归档. 用 ar 归档目标文件，生成静态库.<br>[3]. 写头文件, 便于使用者知道怎么使用该静态库.</p>
<p>使用静态库时，在源码中包含对应的头文件，链接时记得链接自己的库.</p>
<p>下面结合具体例子, 展开讲.</p>
<h2 id="写源文件"><a href="#写源文件" class="headerlink" title="写源文件"></a>写源文件</h2><p>目录结构<br><img src="/upload/images/2017/10/08/1.jpg" alt="1"></p>
<p>示例文件都是很简单的代码, 附录可以查看完整示例.</p>
<h2 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h2><p>将 libs 目录下面的(c)源文件进行预处理, 编译和汇编.<br>注意这里没有进行链接.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -c libs/person.c libs/eat.c libs/play.c libs/sleep.c</div></pre></td></tr></table></figure>
<p>执行城后, 会生成对应的 .o 文件.</p>
<h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><p><code>libperson.a</code> 是要生成的库文件.</p>
<p>库文件都以 lib 开头, 静态库以. a 为后缀. 所以一般是 lib+ 名字.a</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ar rs libperson.a person.o sleep.o play.o eat.o</div></pre></td></tr></table></figure>
<p>ar: 类似于 tar, 用来对文件进行库打包.</p>
<p>r 选项: 将其后面的文件列表添加到文件包(libperson.a)中, 如果 libperson.a 不存在就创建它, 如果 libperson.a 已经存在且里面有同名的目标文件就进行替换操作.</p>
<p>s 选项: 为静态库创建索引.这个索引会被链接器使用.</p>
<blockquote>
<p>ranlib 命令也可以为静态库创建索引. 所以上面的命令可以等效为下面的两个命令.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ar r libperson.a person.o sleep.o play.o eat.o</div><div class="line">ranlib libperson.a</div></pre></td></tr></table></figure>
<h2 id="写头文件"><a href="#写头文件" class="headerlink" title="写头文件"></a>写头文件</h2><p>写一个 person.h 文件, 便于调用者查看库如何使用.</p>
<p>person.h</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ifndef _PERSON_H</div><div class="line">#define _PERSON_H</div><div class="line">extern void init(int pUid);</div><div class="line">extern void eat();</div><div class="line">extern void play();</div><div class="line">extern void sleep();</div><div class="line">#endif</div></pre></td></tr></table></figure>
<p>使用静态库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc main.c -L. -lperson -Ilibs -o main</div></pre></td></tr></table></figure>
<p>-L 选项: 告诉编译器去哪里找库文件, 这里的 _L. 表示在当前目录.<br>如果不用 -L 选项, 即使库文件在当前目录, 编译器也不会去找, 所以该选项不能少.</p>
<p>报错信息如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ld: library not found for -lperson</div><div class="line">clang: error: linker command failed with exit code 1 (use -v to see invocation)</div></pre></td></tr></table></figure>
<p>-lperson: 告诉编译器要链接 libperson.a 库.</p>
<p>-I: 告诉编译器到哪里找头文件.<br>如果不指定头文件的查找目录, 也会报错:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">main.c:2:10: fatal error: &apos;person.h&apos; file not found</div><div class="line">#include &quot;person.h&quot;</div><div class="line">         ^~~~~~~~~~</div><div class="line">1 error generated.</div></pre></td></tr></table></figure>
<p>此时的目录结构:<br><img src="/upload/images/2017/10/08/2.jpg" alt="1"></p>
<p>链接成功后, 可以执行生成的 main (可执行)文件.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./main</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">uid: 101 eating</div><div class="line">uid: 101 playing</div><div class="line">uid: 101 has sleep</div></pre></td></tr></table></figure>
<h2 id="有趣的实验"><a href="#有趣的实验" class="headerlink" title="有趣的实验"></a>有趣的实验</h2><p>猜想一下如果有两个库一个是共享库, 一个是静态库, 而且二者除了后缀不一样, 名字都一样如 libperson.a 和 libperson.so, 那么调用方如何来选择对应的库文件呢?</p>
<p>我们把 GCC: 共享库 里面生成的共享库 libperson.so 放到当前的目录, 重新编译链接 main.c 文件.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc main.c -L. -lperson -Ilibs -o main</div></pre></td></tr></table></figure>
<p>再次执行 ./main, 得到结果是这样的:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">From sharedlib.uid: 101 eating</div><div class="line">From sharedlib.uid: 101 playing</div><div class="line">From sharedlib.uid: 101 has sleep</div></pre></td></tr></table></figure>
<p>以上的结果, 说明链接器会优先选择共享库其次才是静态库.</p>
<blockquote>
<p>Linux(MacOS 也一样) 的 GCC 默认链接动态库，只有当动态库不存在时，才去链接静态库.<br>若是需要强制指定静态库需要指定选项 -static.但是在 MacOS 上面不支持该选项.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -static main.c -L. -lperson -Ilibs -o main</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>示例完整代码</p>
<blockquote>
<p>main.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &quot;person.h&quot;</div><div class="line">int main() &#123;</div><div class="line">    init(101);</div><div class="line">    eat();</div><div class="line">    play();</div><div class="line">    sleep();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>person.h</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ifndef _PERSON_H</div><div class="line">#define _PERSON_H</div><div class="line">extern void init(int pUid);</div><div class="line">extern void eat();</div><div class="line">extern void play();</div><div class="line">extern void sleep();</div><div class="line">#endif</div></pre></td></tr></table></figure>
<blockquote>
<p>person.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int uid;</div><div class="line">void init(int pUid) &#123;</div><div class="line">    uid = pUid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>eat.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">extern int uid;</div><div class="line">void eat() &#123;</div><div class="line">    printf(&quot;uid: %i eating\n&quot;, uid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>play.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">extern int uid;</div><div class="line">void play() &#123;</div><div class="line">    printf(&quot;uid: %i playing\n&quot;, uid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>sleep.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">extern int uid;</div><div class="line">void sleep() &#123;</div><div class="line">    printf(&quot;uid: %i has sleep\n&quot;, uid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">GCC: 编译 C 语言的流程</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/" target="_blank" rel="noopener">GCC: Homebrew 安装 GCC 和 Binutils</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/" target="_blank" rel="noopener">GCC: 共享库</a></p>
<p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/" target="_blank" rel="noopener">GCC: 静态库</a></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GCC 编译器 静态库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCC: 共享库]]></title>
      <url>/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/</url>
      <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>共享库: 在程序执行期间需要调用到共享库的时候才加载到内存里面，可以被多个程序共享使用.</p>
<p>在 MacOS 上面创建和使用共享库要比在 Linux 上面简单.<br>在 Linux 上面还会牵扯到共享库路径问题, 在 Mac 上面就没有这样的问题.</p>
<p>在 MacOS 上面使用的 GCC 其本质是 LLVM. 你可以在命令行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -v</div></pre></td></tr></table></figure>
<p>可以看到对应的输出结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/c++/4.2.1</div><div class="line">Apple LLVM version 9.0.0 (clang-900.0.37)</div><div class="line">Target: x86_64-apple-darwin16.7.0</div><div class="line">Thread model: posix</div><div class="line">InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</div></pre></td></tr></table></figure>
<h2 id="创建共享库步骤"><a href="#创建共享库步骤" class="headerlink" title="创建共享库步骤"></a>创建共享库步骤</h2><p>[1].写源文件.这里以 C文件为基础.<br>[2].将源文件生成目标文件.<br>[3].创建共享库.<br>[4].写头文件, 供调用方使用.</p>
<p>下面结合实例来分享一下如何在 Mac 上面创建共享库.</p>
<h2 id="写源文件"><a href="#写源文件" class="headerlink" title="写源文件"></a>写源文件</h2><p>目录结构:<br><img src="/upload/images/2017/10/07/1.jpg" alt="1"></p>
<p>对应的完整代码可以看文末的附录.</p>
<h2 id="生成目标文件"><a href="#生成目标文件" class="headerlink" title="生成目标文件"></a>生成目标文件</h2><p>执行如下命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -Wall -c -fPIC libs/eat.c libs/play.c libs/sleep.c libs/person.c</div></pre></td></tr></table></figure>
<p>注意: <code>-fPIC</code> 选项一定要加.</p>
<blockquote>
<p>PIC(position independent code), 产生位置无关码</p>
</blockquote>
<h2 id="生成共享库"><a href="#生成共享库" class="headerlink" title="生成共享库"></a>生成共享库</h2><p>这里把共享库暂且称之为 <code>libperson.so</code>.</p>
<p>执行下面命令创建:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc -shared -fPIC eat.o play.o sleep.o person.o -o libperson.so</div></pre></td></tr></table></figure>
<h2 id="写头文件"><a href="#写头文件" class="headerlink" title="写头文件"></a>写头文件</h2><p>这里头文件主要是 <code>person.h</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ifndef _PERSON_H</div><div class="line">#define _PERSON_H</div><div class="line">extern void init(int pUid);</div><div class="line">extern void eat();</div><div class="line">extern void play();</div><div class="line">extern void sleep();</div><div class="line">#endif</div></pre></td></tr></table></figure>
<h2 id="使用共享库"><a href="#使用共享库" class="headerlink" title="使用共享库"></a>使用共享库</h2><p>main.c 是使用方, 编译链接即可.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc main.c -L. -lperson -Ilibs -o main</div></pre></td></tr></table></figure>
<p>生成可执行文件 main, 执行结果:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">From sharedlib.uid: 101 eating</div><div class="line">From sharedlib.uid: 101 playing</div><div class="line">From sharedlib.uid: 101 has sleep</div></pre></td></tr></table></figure>
<p><strong>注意:</strong><br>-L 选项, 告诉编译器去哪里找库文件, 这里的 _L. 表示在当前目录.</p>
<p>-lperson, 表示 libperson.so 库.</p>
<p>-Ilibs 告诉编译器头文件所在的目录.</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>示例完整代码</p>
<blockquote>
<p>main.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &quot;person.h&quot;</div><div class="line">int main() &#123;</div><div class="line">    init(101);</div><div class="line">    eat();</div><div class="line">    play();</div><div class="line">    sleep();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>person.h</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#ifndef _PERSON_H</div><div class="line">#define _PERSON_H</div><div class="line">extern void init(int pUid);</div><div class="line">extern void eat();</div><div class="line">extern void play();</div><div class="line">extern void sleep();</div><div class="line">#endif</div></pre></td></tr></table></figure>
<blockquote>
<p>person.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">int uid;</div><div class="line">void init(int pUid) &#123;</div><div class="line">    uid = pUid;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>eat.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">extern int uid;</div><div class="line">void eat() &#123;</div><div class="line">    printf(&quot;From sharedlib.uid: %i eating\n&quot;, uid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>play.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">extern int uid;</div><div class="line">void play() &#123;</div><div class="line">    printf(&quot;From sharedlib.uid: %i playing\n&quot;, uid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>sleep.c</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">extern int uid;</div><div class="line">void sleep() &#123;</div><div class="line">    printf(&quot;From sharedlib.uid: %i has sleep\n&quot;, uid);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">GCC: 编译 C 语言的流程</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/" target="_blank" rel="noopener">GCC: Homebrew 安装 GCC 和 Binutils</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/" target="_blank" rel="noopener">GCC: 共享库</a></p>
<p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/" target="_blank" rel="noopener">GCC: 静态库</a></p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GCC 编译器 共享库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCC: Homebrew 安装 GCC 和 Binutils]]></title>
      <url>/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/</url>
      <content type="html"><![CDATA[<h2 id="文章背景"><a href="#文章背景" class="headerlink" title="文章背景"></a>文章背景</h2><p>前段时间，有个博客上面的小伙伴给我发来邮件，问我关于 GCC 相关的知识，对于 GCC 我也只是凭着之前的了解，回复他了。书到用时方恨少呀！</p>
<p>这位小伙伴还在读大学，自学能力比较强，自己出了完成课时之外，还会在网上找资料自学。</p>
<p>我记得自己在大学的时候，对 GCC 一窍不通，只知道 Turbo-C 和那些被强制记住的关键字。</p>
<p>最后告诉他, 我会坚持把自己以前学习过相关 GCC 的知识，以博客的形式输出。于是。就有了 <a href="http://www.veryitman.com/categories/C-C/" target="_blank" rel="noopener">GCC 系列</a> 的文章，希望能够帮到大家。</p>
<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>这篇博客主要分享 macOS 下安装 GCC 和 Binutils 工具。</p>
<p>macOS 终端下输入 <code>gcc -v</code>, 其实是链接指向了 LLVM 编译器, 不是 GNU 的 GCC.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/c++/4.2.1</div><div class="line">Apple LLVM version 9.0.0 (clang-900.0.37)</div><div class="line">Target: x86_64-apple-darwin16.7.0</div><div class="line">Thread model: posix</div><div class="line">InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</div></pre></td></tr></table></figure>
<h2 id="安装-GCC"><a href="#安装-GCC" class="headerlink" title="安装 GCC"></a>安装 GCC</h2><p>关于 GCC, 可以参考 <a href="https://zh.wikipedia.org/wiki/GCC" target="_blank" rel="noopener">维基百科</a>.</p>
<p>执行下面命令, 即可开始安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew tap homebrew/versions</div></pre></td></tr></table></figure>
<p>然后搜索 <code>gcc</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew search gcc</div></pre></td></tr></table></figure>
<p>搜索结果中会显示 gcc 的版本，可以选择安装一个，建议安装最新版。</p>
<p>这里以安装 gcc49 为例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install gcc49</div></pre></td></tr></table></figure>
<p>brew 会自动为你安装相关依赖，如 gmp4、mpfr2、libmpc08、isl011、cloog018.</p>
<p>这里安装需要等待一段时间…</p>
<p>看到下面的内容, 表示安装完毕.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Pouring gcc49-4.9.2_1.yosemite.bottle.1.tar.gz</div><div class="line"></div><div class="line">/usr/local/Cellar/gcc49/4.9.2_1: 1138 files, 164M</div></pre></td></tr></table></figure>
<p>安装成功后, 安装目录在:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/Cellar/gcc49/4.9.2_1</div></pre></td></tr></table></figure>
<p>你在终端直接输入 <code>gcc -v</code>，其实还是 LLVM，那么如何使用我们 刚安装的 gcc?</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/Cellar/gcc49/4.9.2_1/bin</div><div class="line"></div><div class="line">ls -l</div></pre></td></tr></table></figure>
<p>可以看到:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">c++-4.9</div><div class="line">cpp-4.9</div><div class="line">g++-4.9</div><div class="line">gcc-4.9</div><div class="line">gcc-ar-4.9</div><div class="line">gcc-nm-4.9</div><div class="line">gcc-ranlib-4.9</div><div class="line">gcov-4.9</div><div class="line">x86_64-apple-darwin14.3.0-c++-4.9</div><div class="line">x86_64-apple-darwin14.3.0-g++-4.9</div><div class="line">x86_64-apple-darwin14.3.0-gcc-4.9</div><div class="line">x86_64-apple-darwin14.3.0-gcc-4.9.2</div><div class="line">x86_64-apple-darwin14.3.0-gcc-ar-4.9</div><div class="line">x86_64-apple-darwin14.3.0-gcc-nm-4.9</div><div class="line">x86_64-apple-darwin14.3.0-gcc-ranlib-4.9</div></pre></td></tr></table></figure>
<p>Ok，你应该明白了, 在命令行输入 <code>gcc-4.9 -v</code> 就可以使用我们刚安装的 GCC 了，包括 g++ 等工具.</p>
<p>以后使用 GNU 的 GCC 输入 <code>gcc-4.9</code> 就好了。</p>
<h2 id="安装-Binutils"><a href="#安装-Binutils" class="headerlink" title="安装 Binutils"></a>安装 Binutils</h2><p>关于 Binutils 可以参考 <a href="https://zh.wikipedia.org/zh-cn/GNU_Binutils" target="_blank" rel="noopener">维基百科</a>.</p>
<p>执行下面命令, 直接安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install binutils</div></pre></td></tr></table></figure>
<p>同理:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/Cellar/binutils/2.25/bin</div></pre></td></tr></table></figure>
<p>可以看到你需要的工具:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">gaddr2line</div><div class="line">gar</div><div class="line">gc++filt</div><div class="line">gcoffdump</div><div class="line">gdlltool</div><div class="line">gdllwrap</div><div class="line">gelfedit</div><div class="line">gnlmconv</div><div class="line">gnm</div><div class="line">gobjcopy</div><div class="line">gobjdump</div><div class="line">granlib</div><div class="line">greadelf</div><div class="line">gsize</div><div class="line">gsrconv</div><div class="line">gstrings</div><div class="line">gstrip</div><div class="line">gsysdump</div><div class="line">gwindmc</div><div class="line">gwindres</div></pre></td></tr></table></figure>
<h2 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h2><p>在 macOS 上面，即使安装了 GNU 的 GCC，也没有在 Linux 上面用的那么爽，很多 GCC 的命令选项在 macOS 上面无法使用，但不得不承认 LLVM 是比较优秀的编译器。</p>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>gcc-4.9 编译代码报错，报错内容如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">main.c:<span class="number">9</span>:<span class="number">19</span>: fatal error: stdio.h: No such file <span class="keyword">or</span> directory</div><div class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line">                   ^</div><div class="line">compilation terminated.</div></pre></td></tr></table></figure>
<p>卸载 <code>gcc</code> 重新安装最新版本的 <code>gcc</code> 即可，如果你不知道最新的 <code>gcc</code> 版本是哪个，可以 search 一下。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew search gcc</div></pre></td></tr></table></figure>
<p>显示结果大致如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gcc        </div><div class="line">gcc@5                 </div><div class="line">gcc@7</div><div class="line">gcc@4.9                  </div><div class="line">gcc@6            </div><div class="line">i386-elf-gcc</div></pre></td></tr></table></figure>
<p>这里以安装 <code>gcc@7</code> 为例，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 卸载原来的</div><div class="line">brew uninstall gcc</div><div class="line"></div><div class="line">// 安装最新版本</div><div class="line">brew install gcc@7</div></pre></td></tr></table></figure>
<h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">GCC: 编译 C 语言的流程</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/" target="_blank" rel="noopener">GCC: Homebrew 安装 GCC 和 Binutils</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/" target="_blank" rel="noopener">GCC: 共享库</a></p>
<p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/" target="_blank" rel="noopener">GCC: 静态库</a></p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> brew GCC C 编译器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCC: 编译C语言的流程]]></title>
      <url>/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>再看下文之前，先普及一下 Linux 和 gcc 的历史，下面的这段内容来自于网络。</p>
<blockquote>
<p>早在 20 世纪 70 年代，UNIX 系统是开源而且免费的。但是在 1979 年时，AT&amp;T 公司宣布了对 UNIX 系统的商业化计划，随之开源软件业转变成了版权式软件产业，源代码被当作商业机密，成为专利产品，人们再也不能自由地享受科技成果。</p>
<p>于是在 1984 年，Richard Stallman 面对于如此封闭的软件创作环境，发起了 GNU 源代码开放计划并制定了著名的 GPL 许可协议。</p>
<p>1987 年时，GNU 计划获得了一项重大突破—gcc编译器发布，这使得程序员可以基于该编译器编写出属于自己的开源软件。</p>
<p>随之，在 1991 年10 月，芬兰赫尔辛基大学的在校生 Linus Torvalds 编写了一款名为 Linux 的操作系统。该系统因其较高的代码质量且基于 GNU GPL 许可协议的开放源代码特性，迅速得到了 GNU 计划和一大批黑客程序员的支持。</p>
<p>随后 Linux 系统便进入了如火如荼的发展阶段。</p>
<p>1994 年 1 月，Bob Young 在 Linux 系统内核的基础之上，集成了众多的源代码和程序软件，发布了红帽系统并开始出售技术服务，这进一步推动了 Linux 系统的普及。</p>
<p>1998 年以后，随着 GNU 源代码开放计划和 Linux 系统的继续火热，以 IBM 和 Intel 为首的多家 IT 企业巨头开始大力推动开放源代码软件的发展。</p>
<p>到了 2017 年年底，Linux 内核已经发展到了 4.13 版本，并且 Linux 系统版本也有数百个之多，但它们依然都使用 Linus Torvalds 开发、维护的Linux 系统内核。RedHat 公司也成为了开源行业及 Linux 系统的带头公司。</p>
</blockquote>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>这篇博文 <a href="http://blog.csdn.net/veryitman/article/details/7340668" target="_blank" rel="noopener">makefile: gcc 工作流程</a> 早期被我放在 CSDN 上面过.时隔多年, 仍不能忘怀, 现乔迁至此.</p>
<p>本文比较简单, 比较适合初学者.<br>我只是试图以实例的方式给大家讲解一下 GCC 编译链接 C语言程序的流程, 并没有高深的知识.</p>
<h2 id="编译流程"><a href="#编译流程" class="headerlink" title="编译流程"></a>编译流程</h2><p>C 语言经过预处理、编译、连接最后生成可执行文件.</p>
<p>在 Linux 的 GCC 下面，看看其工作流程. 流程图如下：</p>
<p><img src="/upload/images/2017/10/03/1.jpg" alt="1"></p>
<p>预处理，将包含的 <em>.h 文件或者一些预处理语句（如 #define）处理一下，然后将 </em>.c 文件生成 *.i 的中间文件.</p>
<blockquote>
<p>注意了 GCC 不会自动生成这样一个文件，如果需要，自己加 -E 参数即可.</p>
</blockquote>
<p>编译、汇编阶段生成 *.o 目标文件，最后经过链接生成可执行文件.</p>
<blockquote>
<p>注意：可执行文件不一定是 exe 文件.</p>
</blockquote>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>下面以一个实例 hello.c，说明这个过程.</p>
<p><img src="/upload/images/2017/10/03/2.jpg" alt="1"></p>
<p>源文件很简单，这里只是为了说明问题.</p>
<p>在命令行，执行下面命令完成预处理：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc  -E  hello.c  -o  hello.i</div></pre></td></tr></table></figure>
<p>执行之后，你可以打开 hello.i 文件，可以看到很多 extern 以及将 MAX 解释为 20：<br><img src="/upload/images/2017/10/03/3.jpg" alt="1"></p>
<p>在命令行，执行下面命令, 完成编译阶段:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc  -S  hello.i  -o hello.s</div></pre></td></tr></table></figure>
<p>这时可以生成 *.s 文件，其实就是一些汇编语句，如下所示：<br><img src="/upload/images/2017/10/03/4.jpg" alt="1"></p>
<p>那麽，我们就可以进入汇编阶段了，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc  -c  hello.s  -o hello.o</div></pre></td></tr></table></figure>
<p>打开这个 hello.o 文件，都是一些机器码.</p>
<p>最后一个连接生成可执行文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc hello.o -o hello</div></pre></td></tr></table></figure>
<p>在当前目录就可以生成 hello 这个可执行文件.</p>
<p>执行 ./hello，就会输出：<br><img src="/upload/images/2017/10/03/5.jpg" alt="1"></p>
<p>到此，GCC 编译连接生成可执行文件完毕！</p>
<p>当前目录下面的文件：<br><img src="/upload/images/2017/10/03/6.jpg" alt="1"></p>
<p>以上的步骤，其实一句命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gcc  hello.c  -o  hello</div></pre></td></tr></table></figure>
<p>此时目录内容如下：<br><img src="/upload/images/2017/10/03/7.jpg" alt="1"></p>
<p>自己动手感受一下，你会收获更多！</p>
<h2 id="GCC-系列博文"><a href="#GCC-系列博文" class="headerlink" title="GCC 系列博文"></a>GCC 系列博文</h2><p><a href="http://www.veryitman.com/2017/10/03/GCC-%E7%BC%96%E8%AF%91C%E8%AF%AD%E8%A8%80%E7%9A%84%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">GCC: 编译 C 语言的流程</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-Homebrew-%E5%AE%89%E8%A3%85-GCC-%E5%92%8C-Binutils/" target="_blank" rel="noopener">GCC: Homebrew 安装 GCC 和 Binutils</a></p>
<p><a href="http://www.veryitman.com/2017/10/07/GCC-%E5%85%B1%E4%BA%AB%E5%BA%93/" target="_blank" rel="noopener">GCC: 共享库</a></p>
<p><a href="http://www.veryitman.com/2017/10/08/GCC-%E9%9D%99%E6%80%81%E5%BA%93/" target="_blank" rel="noopener">GCC: 静态库</a></p>
]]></content>
      
        <categories>
            
            <category> C/C++ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> GCC C 编译器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS APNs: 处理数据]]></title>
      <url>/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>博文: <a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS 细说推送: 远程推送</a> 和 <a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/" target="_blank" rel="noopener">iOS 细说推送: 本地推送</a><br>分别介绍了 iOS 的两种典型推送, iOS 还有很多类型的推送, 如静默推送, VOIP 推送(iOS8)等, 后面会慢慢介绍给大家.</p>
<p>今天跟大家聊聊关于如何处理推送的数据(payload).</p>
<p>该系列博客:</p>
<blockquote>
<p><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 远程推送</a><br><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 本地推送</a><br>iOS APNs: 处理数据(本篇)<br><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 静默推送</a><br><a href="http://www.veryitman.com/2018/02/08/iOS-APNs-Background-Fetch/" target="_blank" rel="noopener">iOS APNs: Background Fetch</a></p>
</blockquote>
<h2 id="推送的代理回调时机"><a href="#推送的代理回调时机" class="headerlink" title="推送的代理回调时机"></a>推送的代理回调时机</h2><p>还记得 AppDelegate 里面关于推送的几个代理方法吧.<br>~ 估计你也忘记了, 没关系, 我们再一起整理一下.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;markApp push. RemotePush userInfo: %@&quot;, userInfo);</div><div class="line">    </div><div class="line">    // 可以根据推送内容决定下一步的行为</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法在接收到 RemotePush 的时候, 调用时机:</p>
<p>1.APP 在前台运行的, RemotePush 被推送过来了.<br>2.APP 在后台运行, 无论是否被挂起只要没有被杀死, 点击推送内容.</p>
<p>以上两种情况均可以进入 didReceiveRemoteNotification 方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App push. LocalPush notification: %@&quot;, notification);</div><div class="line">    </div><div class="line">    // 可以根据推送内容决定下一步的行为</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该方法接收到 LocalPush 的时候, 调用时机:</p>
<p>1.APP 在前台运行的, LocalPush 被推送过来了.<br>2.APP 在后台运行, 无论是否被挂起只要没有被杀死, 点击推送内容.</p>
<p>以上两种情况均可以进入 didReceiveLocalNotification 方法.</p>
<p>这两个回调方法, 分别接收 RemotePush 和 LocalPush 的推送消息.</p>
<p>有些人会问了, 假如这个时候我的应用在后台, 被系统杀死了或者被用户双击 Home 键杀死了, 此时远程推送过来了, 或者状态栏里面有本地推送的消息, 我点击推送消息, 这两个方法会被调用吗?</p>
<p>类似这种效果, 上面是 RemotePush, 下面是 LocalPush.</p>
<p><img src="/upload/images/2017/08/07/1.jpg" alt="1"></p>
<p>我肯定的告诉大家, 应用被杀死的情况下, 点击推送内容, didReceiveRemoteNotification 和 didReceiveLocalNotification 都不会被调用.</p>
<p>这个时候, AppDelegate 中的另一个方法上场了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application </div><div class="line">    didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div></pre></td></tr></table></figure>
<p>看一下 didFinishLaunchingWithOptions 的具体实现, 示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">    </div><div class="line">    /// 将应用图标的 badge 清零</div><div class="line">    &#123;</div><div class="line">        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:1];</div><div class="line">        [[UIApplication sharedApplication] setApplicationIconBadgeNumber:0];</div><div class="line">        [[UIApplication sharedApplication] cancelAllLocalNotifications];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (nil != launchOptions) &#123;</div><div class="line">        /// 处理 LocalPush</div><div class="line">        &#123;</div><div class="line">            // 这里可以得到 UILocalNotification 对象</div><div class="line">            id localPushNotify = [launchOptions objectForKey:UIApplicationLaunchOptionsLocalNotificationKey];</div><div class="line">            </div><div class="line">            MZLOG(@&quot;AppDelegate localPush: %@&quot;, localPushNotify);</div><div class="line">            </div><div class="line">            if (nil != localPushNotify) &#123;</div><div class="line">                if ([localPushNotify isKindOfClass:[UILocalNotification class]]) &#123;</div><div class="line">                    // 获取 userinfo 数据</div><div class="line">                    NSDictionary *userInfo = [(UILocalNotification *)localPushNotify userInfo];</div><div class="line">                    MZLOG(@&quot;AppDelegate localPush of UILocalNotification: %@&quot;, userInfo);</div><div class="line">                    </div><div class="line">                    // 根据 userInfo 的内容处理如页面跳转等</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        /// 处理 RemotePush</div><div class="line">        &#123;</div><div class="line">            NSDictionary *remotePushNotify = [launchOptions objectForKey:UIApplicationLaunchOptionsRemoteNotificationKey];</div><div class="line">            MZLOG(@&quot;AppDelegate remotePush: %@&quot;, remotePushNotify);</div><div class="line">            </div><div class="line">            if (nil != remotePushNotify) &#123;</div><div class="line">                NSDictionary *remoteAps = [remotePushNotify objectForKey:@&quot;aps&quot;];</div><div class="line">                MZLOG(@&quot;AppDelegate remotePush. The aps&apos; info, alert: %@, badge: %@, sound: %@&quot;,</div><div class="line">                      [remoteAps objectForKey:@&quot;alert&quot;],</div><div class="line">                      [remoteAps objectForKey:@&quot;badge&quot;], [remoteAps objectForKey:@&quot;sound&quot;]);</div><div class="line">                // 根据推送的内容处理如页面跳转等</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;AppDelegate. launchOptions: %@&quot;, launchOptions);</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的打印输出内容, 如下</p>
<p>本地推送的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> AppDelegate localPush of UILocalNotification: &#123;</div><div class="line">    &quot;user_info_key&quot; = &quot;user_info_value_json_str&quot;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>远程推送的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">aps = &#123;</div><div class="line">            alert = &quot;Testing.. (2)&quot;;</div><div class="line">            badge = 1;</div><div class="line">            sound = default;</div><div class="line">      &#125;;</div><div class="line">            </div><div class="line">The aps&apos; info, alert: Testing.. (19), badge: 1, sound: default</div></pre></td></tr></table></figure>
<h2 id="自定义推送内容"><a href="#自定义推送内容" class="headerlink" title="自定义推送内容"></a>自定义推送内容</h2><blockquote>
<p>对于推送的数据格式, 是苹果规定的格式, 我们可以在其基础上添加我们需要的数据.</p>
</blockquote>
<p>在介绍下面内容之前, 先了解一下什么是 payload.</p>
<blockquote>
<p>payload 是推送通知的一部分，每一条推送通知都包含一个 Payload.<br>它包含了系统提醒用户通知到达的方式，还可以添加自定义的数据, 即通知主要传递的数据为 payload.</p>
<p>Payload 本身为 JSON 格式的字符串，它内部必须要包含一个键为 aps 的字典.也就是说 payload 是整个字符串.</p>
</blockquote>
<p>关于 payload 的限制</p>
<p>在早期的推送中, payload 不能超过 256bytes, 中间还经历过推送的 payload 最大为 2KB.<br>现在苹果支持最大为5KB(VOIP 推送), 官方文档有说, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">For regular remote notifications, the maximum size is 4KB (4096 bytes)</div><div class="line">For Voice over Internet Protocol (VoIP) notifications, the maximum size is 5KB (5120 bytes)</div><div class="line">NOTE</div><div class="line">If you are using the legacy APNs binary interface to send notifications instead of an HTTP/2 request, the maximum payload size is 2KB (2048 bytes)</div></pre></td></tr></table></figure>
<p>上面是 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1" target="_blank" rel="noopener">官方文档</a> 的原文, 大概意思是:</p>
<blockquote>
<p>现在 APNs 支持 payload 为 4KB, 如果是 VoIP 推送的话, 支持 5KB. 但是, 如果你使用传统的 APNs 而不是使用 HTTP/2 的话, 最大支持 2KB. 也就是说, 推送的 payload 大小和 iOS 系统无关, 而是和协议有关.</p>
</blockquote>
<p>可以使用下面代码, 查看 payload 长度</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">payload.getBytes().length</div></pre></td></tr></table></figure>
<p>我们正常的推送内容是这样的, 正常格式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;aps&quot;:&#123;&quot;alert&quot;:&quot;Testing.. (21)&quot;,&quot;badge&quot;:1,&quot;sound&quot;:&quot;default&quot;&#125;&#125;</div></pre></td></tr></table></figure>
<p>如果想对推送内容做自定义, 可以自己添加额外的数据, 如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&quot;aps&quot;:&#123;&quot;alert&quot;:&quot;Testing.. (21)&quot;,&quot;badge&quot;:1,&quot;sound&quot;:&quot;default&quot;&#125;, &quot;ext&quot;:&#123;&quot;key&quot;:&quot;value&quot;&#125;&#125;</div></pre></td></tr></table></figure>
<p>其中, ext 就是额外添加的数据模型.</p>
<p>在 APP 收到这样的数据模型时, 可以对应不同的行为.</p>
<p>大家可以根据自己的业务需求, 自行定义数据格式.</p>
<p>自定义的数据格式, 注意内容的长度, 在不同的 iOS 系统上面, 对于推送的内容是有长度限制的.</p>
<h2 id="再唠叨几句"><a href="#再唠叨几句" class="headerlink" title="再唠叨几句"></a>再唠叨几句</h2><p>关于 iOS7 以后添加的方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application </div><div class="line">    didReceiveRemoteNotification:(NSDictionary *)userInfo </div><div class="line">    fetchCompletionHandler:(void (^)(UIBackgroundFetchResult))completionHandler</div></pre></td></tr></table></figure>
<p>这个方法也是在 AppDelegate 中实现的.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application </div><div class="line">    didReceiveRemoteNotification:(NSDictionary *)userInfo</div></pre></td></tr></table></figure>
<p>这个方法在 iOS3 就已经有了, 可谓是历史悠久.我姑且称之为该方法为 FatherMethod, 上面那个新加入的称之为 SonMethod.</p>
<p><strong>注意事项:</strong></p>
<p>[1]. 实现了 FatherMethod, 即使你实现了 SonMethod, SonMethod 也不会被调用.<br>[2]. SonMethod 比 FatherMethod 多了一个参数 completionHandler, 这个在后面会说到.主要用于 Background Mode 中的 Background Fetch.<br>[3]. 推送被调用的时机, 除了 FatherMethod 的时机外, 还多了一种时机, 就是在 APP 被杀死后, 点击推送内容打开 APP, 此时 APP 再次回到前台的时候, 该方法也会被调用(didFinishLaunchingWithOptions也会调用), 所以在处理远程推送内容的时候, 要注意这一点.</p>
<p>针对注意事项[3], 目前我能给出的有两种解决方案:</p>
<p>第一, 判断是否是第一次启动 APP, 如果是第一次启动 APP, 统一在didFinishLaunchingWithOptions 中处理, 不在 SonMethod 中处理.</p>
<p>第二, 远程推送统一在 SonMethod 中处理, didFinishLaunchingWithOptions 中只处理在 APP 被杀死的情况下, 用户点击推送本地的内容.</p>
<p>我个人采用的是第二中方案.</p>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><p>在推送工具 NWPusher 和 Xcode 的 Window/Devices/Console 帮助下, 才得以完善博文.</p>
<p>NWPusher 用来发送推送内容.</p>
<p>Window/Devices/Console 用于查看输出日志.</p>
<h2 id="必看文档"><a href="#必看文档" class="headerlink" title="必看文档"></a>必看文档</h2><p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CreatingtheNotificationPayload.html#//apple_ref/doc/uid/TP40008194-CH10-SW1" target="_blank" rel="noopener">Creating the Remote Notification Payload</a></p>
<p><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html#//apple_ref/doc/uid/TP40008194-CH17-SW1" target="_blank" rel="noopener">Payload Key Reference</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> APNs 推送 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS APNs: 本地推送]]></title>
      <url>/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/</url>
      <content type="html"><![CDATA[<h2 id="概括"><a href="#概括" class="headerlink" title="概括"></a>概括</h2><p><code>iOS APNs: 远程推送</code> 说过远程推送(RemotePush).</p>
<p>今天说说本地推送, 本地推送也就是平时所说的 LocalPush.</p>
<p>该系列博客:</p>
<blockquote>
<ul>
<li><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 远程推送</a></li>
<li>iOS APNs: 本地推送(本篇)</li>
<li><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/" target="_blank" rel="noopener">iOS APNs: 处理数据</a></li>
<li><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 静默推送</a></li>
<li><a href="http://www.veryitman.com/2018/02/08/iOS-APNs-Background-Fetch/" target="_blank" rel="noopener">iOS APNs: Background Fetch</a></li>
</ul>
</blockquote>
<h2 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h2><p>在具体实现之前, 先说一下业务场景.</p>
<p>假如你的 APP 具有 IM(即时通讯) 功能, 这个时候, 你可以根据连接来判断用户是否在线, 如果不在线, 可以使用远程推送将推送内容告知用户.如果在线, 可以通过 IM 把内容告诉 APP, APP 收到这个消息后, 可以使用本地推送告知给用户.</p>
<p>据说 APNs 每天要处理的推送在亿级别, 所以如果可以使用 LocalPush 完成的业务, 我建议大家还是不要使用远程推送, 况且苹果并不一定保证远程推送一定成功, 如果网络或者 APNs 压力大, 推送也会延时.</p>
<p>给苹果减少点压力吧, 哈哈!</p>
<p>再说一个业务场景, 你的 APP 在后台运行时间快到要被系统挂起的时候了, 你可以发送一个 LocalPush 来提示用户或者刺激用户, 再次将 APP 拉回前台运行. 这样可以保证 APP 可以正常运行了.</p>
<p>上面说的第二个业务场景, 是今天例子的基础, 你也可以根据自己的实际业务场景来使用 LocalPush 功能.</p>
<h2 id="LocalPush-简介"><a href="#LocalPush-简介" class="headerlink" title="LocalPush 简介"></a>LocalPush 简介</h2><p>LocalPush 允许 APP 向用户发送通知, 对于用户来说, 就跟远程推送是一样的, 基本没有感知, 开发者也不希望用户有感知.</p>
<p>推送效果图:</p>
<p><img src="/upload/images/2017/08/06/1.png" alt="1"></p>
<blockquote>
<p>注意: 如果你的 APP 在前台, 发送 LocalPush 是不会要上述效果的.<br>如果在前台, 可以使用自定义的弹框来提示用户.</p>
</blockquote>
<p>LocalPush 同样需要用户授权推送的权限, 否则也无法发送成功.这个跟远程推送是一样的.</p>
<p>另外, LocalPush 需要 APP 在后台没有被挂起的情况下, 才能发送, 否则无法启用.</p>
<p>发送 LocalPush 的一个好处是不需要用户连接网络, 这个是区别于远程推送的, 因为远程推送必须要求用户连接网络的.很多单机游戏或者弱联网的游戏, 发送的推送都是 LocalPush, 而非远程推送.</p>
<p>在阅读下面内容之前, 建议大家先看看 iOS 后台模式 这篇文章.本篇也是基于这个为基础的.</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>这个示例, 实现的场景如下:</p>
<p>用户打开 APP, 授权了推送的权限, 用户试玩一会之后, 将 APP 退到了后台, APP 监听退到后台之后, 延时一定时间发送 LocalPush 给用户.</p>
<p>AppDelegate.m 中使用后台模式</p>
<p>关于 MZBackgroundTask 的实现, 附录给出.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)applicationDidEnterBackground:(UIApplication *)application &#123;</div><div class="line">    </div><div class="line">    [[MZBackgroundTask sharedTask] startTask];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>ViewController.m</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</div><div class="line">                                             selector:@selector(onDidEnterBackground:)</div><div class="line">                                                 name:UIApplicationDidEnterBackgroundNotification</div><div class="line">                                               object:nil];</div><div class="line">&#125;</div><div class="line">- (void)onDidEnterBackground:(NSNotification *)notification &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App Background. Enter onDidEnterBackground.&quot;);</div><div class="line">    </div><div class="line">    // 等待 6s 后, 这个时间可以根据具体情况去修改, 这里只是模拟</div><div class="line">    int delta = 6;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delta * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;App Background. Enter onDidEnterBackground diapatch.&quot;);</div><div class="line">        </div><div class="line">        if (UIApplicationStateBackground == [UIApplication sharedApplication].applicationState) &#123;</div><div class="line">            UILocalNotification *notification = [UILocalNotification new];</div><div class="line">            notification.alertBody = @&quot;走, 去high吧!&quot;;</div><div class="line">            notification.soundName = UILocalNotificationDefaultSoundName;</div><div class="line">            // 应用图标上面显示的数字</div><div class="line">            notification.applicationIconBadgeNumber = notification.applicationIconBadgeNumber + 1;</div><div class="line">            // 可以自定义数据</div><div class="line">            notification.userInfo = @&#123;@&quot;user_info_key&quot;: @&quot;user_info_value_json_str&quot;&#125;;</div><div class="line">            </div><div class="line">            [[UIApplication sharedApplication] scheduleLocalNotification:notification];</div><div class="line">        &#125;</div><div class="line">        else &#123;</div><div class="line">        	// 显示自定义弹框等</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将 APP 点击 Home 键退到后台, 6s 后可以看到推送的效果.</p>
<p>点击推送的提示框, 再次打开了 APP, 会执行 AppDelegate 中的方法, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App push. notification: %@&quot;, notification);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>打印出来的 notification, 如下图所示:</p>
<p><img src="/upload/images/2017/08/06/2.jpg" alt="1"></p>
<p>其中, user_info 是我们自定义的数据部分.</p>
<p>附录</p>
<blockquote>
<p>MZBackgroundTask 实现</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line">#import &quot;MZBackgroundTask.h&quot;</div><div class="line"></div><div class="line">@implementation MZBackgroundTask</div><div class="line"></div><div class="line">+ (instancetype)sharedTask &#123;</div><div class="line">    </div><div class="line">    static MZBackgroundTask *_task;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _task = [[self alloc] init];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return _task;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)startTask &#123;</div><div class="line">    </div><div class="line">    if (![self _checkSupportBackgroundTask]) &#123;</div><div class="line">        MZLOG(@&quot;BackgroundTask. Current device don&apos;t support backgroundTask.&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    UIApplication *application = [UIApplication sharedApplication];</div><div class="line">    </div><div class="line">    __block UIBackgroundTaskIdentifier taskId;</div><div class="line">    </div><div class="line">    /// 申请后台执行</div><div class="line">    /// 注意: 在iOS7和该版本前，后台可以用下面的的方式在后台存活5-10分钟，在iOS8及后，最多存活3分钟</div><div class="line">    &#123;</div><div class="line">        taskId = [application beginBackgroundTaskWithName:NSStringFromClass([self class]) expirationHandler:^&#123;</div><div class="line">            </div><div class="line">            MZLOG(@&quot;BackgroundTask. BackgroundTask is Over. The remained time: %f&quot;, application.backgroundTimeRemaining);</div><div class="line">            </div><div class="line">            [application endBackgroundTask:taskId];</div><div class="line">            </div><div class="line">            taskId = UIBackgroundTaskInvalid;</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (UIBackgroundTaskInvalid == taskId) &#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;BackgroundTask. Apply backgroundTask failed.&quot;);</div><div class="line">        </div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /// 可以监控后台任务剩余的时间, 针对业务可以去处理</div><div class="line">    &#123;</div><div class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">            </div><div class="line">            while (true) &#123;</div><div class="line">                // 剩余可以后台执行的时间</div><div class="line">                NSTimeInterval remainedTime = application.backgroundTimeRemaining;</div><div class="line">                MZLOG(@&quot;BackgroundTask. The remained time: %f&quot;, remainedTime);</div><div class="line">                </div><div class="line">                if (remainedTime &lt; 2) &#123;</div><div class="line">                    // 可以告诉其他业务, 后台任务即将结束了</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                // 睡眠(延时)1s</div><div class="line">                [NSThread sleepForTimeInterval:1.f];</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            /// 这里可以做一些清除工作</div><div class="line">            &#123;</div><div class="line">                // clean up</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            [application endBackgroundTask:taskId];</div><div class="line">            </div><div class="line">            taskId = UIBackgroundTaskInvalid;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - Private.</div><div class="line"></div><div class="line">/**</div><div class="line"> *  当前设备是否支持后台任务.</div><div class="line"> *</div><div class="line"> *  @return YES, 支持后台任务. 否则, 不支持后台任务.</div><div class="line"> */</div><div class="line">- (BOOL)_checkSupportBackgroundTask &#123;</div><div class="line">    </div><div class="line">    SEL sel = @selector(isMultitaskingSupported);</div><div class="line">    BOOL supportBTask = [[UIDevice currentDevice] respondsToSelector:sel];</div><div class="line">    </div><div class="line">    return supportBTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> APNs 远程推送 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS APNs: 远程推送]]></title>
      <url>/2017/08/06/iOS-APNs-%E8%BF%9C%E7%A8%8B%E6%8E%A8%E9%80%81/</url>
      <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>本篇博文, 你首先需要知道的内容:</p>
<blockquote>
<p>1.了解过 Push.<br>2.阅读过 [iOS 后台模式] 这篇文章.<br>3.申请过苹果证书或者知道如何申请和制作证书.<br>4.iOS 开发基本知识.</p>
</blockquote>
<p>你在这篇博文将会学到:</p>
<blockquote>
<p>1.Push 的发展历程.<br>2.开源推送工具 NWPusher 的使用.<br>3.Push 的基本原理.</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>APNs, 苹果推送通知服务. 全称是: Apple Push Notification Service.</p>
<p>推送指的是由 APNs 服务器、ProviderService、iOS 系统、App 构成的通讯系统，也是移动互联网与传统的 Web 最明显不同的.</p>
<p>官方有比较详细的文档介绍, 可以戳这里 <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html#//apple_ref/doc/uid/TP40008194-CH8-SW1" target="_blank" rel="noopener">官方文档</a> 查看.</p>
<p>苹果的文档写的确实好, 但是作为程序员, 最重要的还是要结合理论去实践.</p>
<p>本篇结合自己的实践和对推送的理解, 跟大家分享一下推送相关的知识.</p>
<h2 id="Push-发展历程"><a href="#Push-发展历程" class="headerlink" title="Push 发展历程"></a>Push 发展历程</h2><p>iOS 历经很多版本, 一直在优化或者说是进化推送相关的内容, 无论是从实用性和技术上来看, 推送是至关重要的.</p>
<p>看一下 push 发展历程</p>
<ul>
<li><p>iOS 3 - 引入推送通知 UIApplication 的 registerForRemoteNotificationTypes 与 UIApplicationDelegate 的 application(:didRegisterForRemoteNotificationsWithDeviceToken:)，application(:didReceiveRemoteNotification:)</p>
</li>
<li><p>iOS 4 - 引入本地通知 scheduleLocalNotification，presentLocalNotificationNow:， application(_:didReceive:)</p>
</li>
<li><p>iOS 5 - 加入通知中心页面</p>
</li>
<li><p>iOS 6 - 通知中心页面与 iCloud 同步</p>
</li>
<li><p>iOS 7 - 后台静默推送 application(_:didReceiveRemoteNotification:fetchCompletionHandle:)</p>
</li>
<li><p>iOS 8 - 重新设计 notification 权限请求，Actionable 通知 registerUserNotificationSettings(:)，UIUserNotificationAction 与 UIUserNotificationCategory，application(:handleActionWithIdentifier:forRemoteNotification:completionHandler:) 等</p>
</li>
<li><p>iOS 9 - Text Input action，基于 HTTP/2 的推送请求 UIUserNotificationActionBehavior，全新的 Provider API 等</p>
</li>
<li><p>iOS 10- 支持Images, GIFs, Audio and Video类型, 并且有 Notification Service Extension 与 Notification Content Extension，可以实现推送数据在展示前进行下载更新、定制通知 UI, 并且统一了通知类型，具有时间间隔通知、地理位置通知和日历通知.</p>
</li>
</ul>
<p>该系列博客共分为几个部分:</p>
<ul>
<li>iOS APNs: 远程推送(本篇)</li>
<li><a href="http://www.veryitman.com/2017/08/06/iOS-APNs-%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 本地推送</a></li>
<li><a href="http://www.veryitman.com/2017/08/07/iOS-APNs-%E5%A4%84%E7%90%86%E6%95%B0%E6%8D%AE/" target="_blank" rel="noopener">iOS APNs: 处理数据</a></li>
<li><a href="http://www.veryitman.com/2018/02/06/iOS-APNs-%E9%9D%99%E9%BB%98%E6%8E%A8%E9%80%81/" target="_blank" rel="noopener">iOS APNs: 静默推送</a></li>
<li><a href="http://www.veryitman.com/2018/02/08/iOS-APNs-Background-Fetch/" target="_blank" rel="noopener">iOS APNs: Background Fetch</a></li>
</ul>
<p>如果需要完整源码的, 可以通过邮件联系我(veritman@126.com), 后续完成后会上传到 github.</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>先看官方的流程图, 如下所示:</p>
<p><img src="/upload/images/2017/08/05/1.jpg" alt="1"></p>
<p>该流程图, 主要说明的是自己 业务服务器(Provider) 推送消息到用户(Client APP) 的流程.</p>
<p>注意: 这里说的以及本文后面说的 业务服务器, 统一指的是可以向 APNs 发送推送消息的服务器.</p>
<p>下面这张图是比较完整的一张流程图, 自己画的, 凑合看吧!</p>
<p><img src="/upload/images/2017/08/05/2.jpg" alt="1"></p>
<p>大概流程, 我详细说一下.</p>
<p>1.iOS 设备启动后连接网络, 会与苹果服务器建立一个安全的长连接.<br>这个是系统维护的, 这也是推送的关键.<br>2.用户打开 app, 授权了推送通知的权限.<br>3.授权成功后, APNs 会将 deviceToken 返回给 iOS 终端.<br>4.终端将该 deviceToken 返回给指定的 APP.<br>5.APP 拿到 deviceToken 上传给我们自己的业务服务器.<br>6.业务服务器向 APNs 发送推送请求, 带上 deviceToken.<br>7.APNs 推送内容到指定的 iOS 终端.<br>8.iOS 终端将内容推送给用户.</p>
<p>关于 deviceToken 后面会讲.</p>
<h2 id="关于-deviceToken"><a href="#关于-deviceToken" class="headerlink" title="关于 deviceToken"></a>关于 deviceToken</h2><p>这里简单介绍一下 deviceToken.</p>
<blockquote>
<p>deviceToken 是 NSData 类型的数据, 是苹果服务器根据 设备,证书等信息和一定算法生成的.<br>需要将这个 deviceToken 传送给我们的服务器端, 这样一个用户对象就绑定了一个 deviceToken.<br>当需要给用户推送消息, 通过自己的业务服务器, 找用户对应的 deviceToken 和要发送的推送内容, 发送到苹果的 APNs, 然后 APNs 将消息推送到该 deviceToken 对应的手机上.</p>
</blockquote>
<p>关于 deviceToken 是否可变的问题</p>
<p>网上有些人说, deviceToken 是可变的, 有些人说, deviceToken 是不可变的, 我也不知道他们到底有没有实践过, 今天我要告诉大家的是, deviceToken 是可变的.</p>
<p>如卸载重装 app, deviceToken 会变. 我的设备 iphone6, iOS10.3.</p>
<p>下面是我实验的数据:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">第一次安装运行得到的 deviceToken</div><div class="line"></div><div class="line">&lt;4e0f2928 5be0700c=&quot;&quot; 296bf7f1=&quot;&quot; 3b0837e4=&quot;&quot; bc9da6d1=&quot;&quot; 9fdb672e=&quot;&quot; f87446be=&quot;&quot; 1c098431=&quot;&quot;&gt;</div><div class="line">卸载后, 第一次安装运行得到的 deviceToken</div></pre></td></tr></table></figure>
<p>这说明, deviceToken 是可变的.</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>上面基本都是一些理论知识, 下面结合代码, 具体实现.</p>
<h3 id="工程配置"><a href="#工程配置" class="headerlink" title="工程配置"></a>工程配置</h3><p>在写代码之前, 需要配置一下工程.关于如何创建带有 push 功能的苹果证书的操作, 大家自行去网上学习, 这里不赘述.</p>
<p>不过这里要提醒一点, 创建的证书一定要和自己项目的 appid 保持一致, 否则无法推送.</p>
<p>这个 Demo 工程的名字是 MZPush.</p>
<p>安装好证书, 打开工程, 并能让工程识别到.</p>
<p>切换到 Target, 点击 Capabilities 选项.</p>
<p>步骤1: 配置 Push, 打开开关即可.</p>
<p><img src="/upload/images/2017/08/05/3.jpg" alt="1"></p>
<p>配置后台模式, 打开开关, 选中Remote notifications.</p>
<p><img src="/upload/images/2017/08/05/4.jpg" alt="1"></p>
<p>不过这一步, 不是必须的, 如果你不配置, 工程会有警告.我建议是选上, 在后面的博文中, 再仔细说说这个东西的好处.</p>
<p>警告信息如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">You&apos;ve implemented -[&lt;UIApplicationDelegate&gt; application:didReceiveRemoteNotification:fetchCompletionHandler:], </div><div class="line">but you still need to add &quot;remote-notification&quot; to the list of your supported UIBackgroundModes in your Info.plist.</div></pre></td></tr></table></figure>
<p>步骤2: 配置完这一步后,在 Info.plist 中可以看到多了一项内容:</p>
<p><img src="/upload/images/2017/08/05/5.jpg" alt="1"></p>
<p>步骤3: 配置工程最小兼容版本</p>
<p><img src="/upload/images/2017/08/05/6.jpg" alt="1"></p>
<p>因为我要兼容 iOS7, 所以在 Xcode8 中, 自己手动改为了 7.0.</p>
<p>步骤4: 关闭 Bitcode(可选操作)</p>
<p><img src="/upload/images/2017/08/05/7.jpg" alt="1"></p>
<p>步骤5: 配置支持 HTTP(可选操作)</p>
<p>在 Info.plist 中, 添加如下:</p>
<p><img src="/upload/images/2017/08/05/8.jpg" alt="1"></p>
<h3 id="用户授权"><a href="#用户授权" class="headerlink" title="用户授权"></a>用户授权</h3><p>询问用户授权的实现</p>
<p>该实现兼容了 iOS7.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (void)applyPushPermission &#123;</div><div class="line">    </div><div class="line">    UIApplication *application = [UIApplication sharedApplication];</div><div class="line">    </div><div class="line">    if (MZSysVersion &lt;= 7.0) &#123;</div><div class="line">        UIRemoteNotificationType nType = UIRemoteNotificationTypeAlert|UIRemoteNotificationTypeBadge|UIRemoteNotificationTypeSound;</div><div class="line">        [application registerForRemoteNotificationTypes:nType];</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        UIUserNotificationType nType =  UIUserNotificationTypeBadge|UIUserNotificationTypeSound|UIUserNotificationTypeAlert;</div><div class="line">        UIUserNotificationSettings *nSettings = [UIUserNotificationSettings settingsForTypes:nType categories:nil];</div><div class="line">        [application registerUserNotificationSettings:nSettings];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于用户授权, 分几种情况来看待.</p>
<p>情景一. 用户不允许 APP 推送, 即不授权.</p>
<p>Appdelegate 代理调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App push. notificationSettings: %@&quot;, notificationSettings);</div><div class="line">    </div><div class="line">    [application registerForRemoteNotifications];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error</div></pre></td></tr></table></figure>
<p>error 信息大概如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error Domain=NSCocoaErrorDomain Code=3000 &quot;未找到应用程序的“aps-environment”的授权字符串&quot;</div><div class="line">UserInfo=&#123;NSLocalizedDescription=未找到应用程序的“aps-environment”的授权字符串&#125;</div></pre></td></tr></table></figure>
<p>情景二. 用户允许授权了, 又分为两种情况</p>
<p>1.使用具有 push 功能的证书</p>
<p>一定要有带有 push 功能的证书.</p>
<p>代理调用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App push. notificationSettings: %@&quot;, notificationSettings);</div><div class="line">    </div><div class="line">    [application registerForRemoteNotifications];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个方法大概在上面回调 1s 后才会调用.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App push. deviceToken: %@&quot;, deviceToken);</div><div class="line">    </div><div class="line">    // 格式化该数据</div><div class="line">    NSString *deviceTokenStr = [NSString stringWithFormat:@&quot;%@&quot;, deviceToken];</div><div class="line">    deviceTokenStr = [deviceTokenStr stringByReplacingOccurrencesOfString:@&quot;&lt;&quot; withString:@&quot;&quot;];</div><div class="line">    deviceTokenStr = [deviceTokenStr stringByReplacingOccurrencesOfString:@&quot;&gt;&quot; withString:@&quot;&quot;];</div><div class="line">    deviceTokenStr = [deviceTokenStr stringByReplacingOccurrencesOfString:@&quot; &quot; withString:@&quot;&quot;];</div><div class="line">    MZLOG(@&quot;App push. deviceToken string: %@&quot;, deviceTokenStr);</div><div class="line">    </div><div class="line">    // 可以上传该 token 到自己的业务服务器</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 didRegisterForRemoteNotificationsWithDeviceToken 方法中可以得到 deviceToken 信息:</p>
<p><img src="/upload/images/2017/08/05/9.jpg" alt="1"></p>
<p>注意: 代码中将 NSData 的 deviceToken 转换为了 NSString 类型的数据类型.</p>
<p>2.使用一般的证书, 没有 push 功能的证书</p>
<p>这种情况和 <code>情景一</code> 一样.</p>
<h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>万事俱备, 只欠东风了.</p>
<p>今天没有准备搭建一个自己的业务服务器去推送, 可以使用推送工具来替代.</p>
<p>安装 <a href="https://github.com/noodlewerk/NWPusher" target="_blank" rel="noopener">NWPusher</a> 这个工具, 可以进行推送测试.</p>
<p>安装成功后, 打开这个 Mac APP, 填写相关信息.</p>
<p>点击 push 即可推送.</p>
<p><img src="/upload/images/2017/08/05/10.jpg" alt="1"></p>
<p>在 Appdelegate 中的代理回调中, 可以打印推送内容.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App push. userInfo: %@&quot;, userInfo);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>推送的内容, 如下图所示.</p>
<p><img src="/upload/images/2017/08/05/11.jpg" alt="1"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    aps =     &#123;</div><div class="line">        alert = &quot;Testing.. (6)&quot;;</div><div class="line">        badge = 1;</div><div class="line">        sound = default;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>1.<a href="https://onevcat.com/2016/08/notification/" target="_blank" rel="noopener">活久见的重构 - iOS 10 UserNotifications 框架解析
</a></p>
<p>2.<a href="http://www.jianshu.com/p/ace1b422bad4" target="_blank" rel="noopener">国内 90%以上的 iOS 开发者，对 APNs 的认识都是错的
</a></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 推送 APNs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 后台模式]]></title>
      <url>/2017/07/30/iOS-%E5%90%8E%E5%8F%B0%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="应用状态"><a href="#应用状态" class="headerlink" title="应用状态"></a>应用状态</h2><p>来自苹果开发者文档 The App Life Cycle 的图.</p>
<p><img src="/upload/images/2017/07/30/Background1.jpg" alt="1"></p>
<p>下面这张图说明了应用程序的状态, 如下所示:</p>
<p><img src="/upload/images/2017/07/30/Background2.jpg" alt="1"></p>
<p>具体的说一下这5中状态:</p>
<p>1.Not running</p>
<blockquote>
<p>未运行, 程序没启动或者被系统被用户杀死</p>
</blockquote>
<p>2.Inactive</p>
<blockquote>
<p>未激活, 程序在前台运行，不过没有接收到事件.<br>在没有事件处理情况下程序通常停留在这个状态.</p>
</blockquote>
<p>3.Active</p>
<blockquote>
<p>激活, 程序在前台运行而且接收到了事件.<br>这也是前台的一个正常的模式</p>
</blockquote>
<p>4.Backgroud</p>
<blockquote>
<p>后台, 程序在后台而且能执行代码，大多数程序进入这个状态后会在在这个状态上停留一会.<br>时间到之后会进入挂起状态(Suspended). 有的程序经过特殊的请求后可以长期处于 Backgroud 状态.</p>
</blockquote>
<p>5.Suspended</p>
<blockquote>
<p>挂起, 程序在后台不能执行代码.<br>系统会自动把程序变成这个状态而且不会发出通知.<br>当挂起时, 程序还是停留在内存中的, 当系统内存低时, 系统就把挂起的程序清除掉, 为前台程序提供更多的内存.</p>
</blockquote>
<p>关于 Backgroud 状态, 是我们今天要说的重点部分.</p>
<h2 id="多任务介绍"><a href="#多任务介绍" class="headerlink" title="多任务介绍"></a>多任务介绍</h2><p>iOS 的多任务是在 iOS4 的时候被引入的，在此之前 iOS 的 APP 都是按下 Home 键就被干掉了.<br>iOS4 虽然引入了后台和多任务，但是实际上是伪多任务，一般的 APP 后台并不能执行自己的代码，只有少数几类服务在通过注册后可以真正在后台运行，并且在提交到 AppStore 的时候也会被严格审核是否有越权行为，这种限制主要是出于对于设备的续航和安全两方面进行的考虑.之后经过iOS5 和 iOS6 的逐渐发展，后台能运行的服务的种类虽然出现了增加，但是 iOS 后台的本质并没有变化.<br>在iOS7之前，系统所接受的应用多任务可以大致分为几种：</p>
<ul>
<li>后台完成某些花费时间的特定任务.</li>
<li>后台播放音乐等.</li>
<li>位置服务.</li>
<li>IP电话(VOIP).</li>
<li>Newsstand.</li>
</ul>
<p>iOS7 后台任务申请的最长时间 10分钟.<br>iOS8+ 后台任务申请最长时间 3分钟.</p>
<h2 id="示例-APP-退到后台会被挂起"><a href="#示例-APP-退到后台会被挂起" class="headerlink" title="示例: APP 退到后台会被挂起"></a>示例: APP 退到后台会被挂起</h2><p>今天跟大家分享的是一般应用如何在后台延长生命周期的知识, 关于其他特殊的 App 如上面提到的5中情况, 不是今天讨论的重点.</p>
<p>我们先看一个例子, 例子很简单.</p>
<blockquote>
<p>这里要说明一下概念, 直接锁屏和点击 Home 键, 都会导致应用处于后台模式, 这里为了说明问题, 统一点<br>击 Home 作为代名词.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [super viewDidLoad];    </div><div class="line">    </div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</div><div class="line">                                             selector:@selector(onDidEnterBackground:)</div><div class="line">                                                 name:UIApplicationDidEnterBackgroundNotification</div><div class="line">                                               object:nil];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)onDidEnterBackground:(NSNotification *)notification &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App Background. Enter onDidEnterBackground.&quot;);</div><div class="line">    </div><div class="line">    int delta = 1;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delta * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;App Background. Enter onDidEnterBackground diapatch.&quot;);</div><div class="line">        </div><div class="line">        UILocalNotification *notification = [UILocalNotification new];</div><div class="line">        notification.fireDate = [NSDate dateWithTimeIntervalSinceNow:3];</div><div class="line">        notification.alertBody = @&quot;走, 去high吧!&quot;;</div><div class="line">        notification.soundName = UILocalNotificationDefaultSoundName;</div><div class="line">        // 可以自定义数据</div><div class="line">        notification.userInfo = @&#123;@&quot;user_info_key&quot;: @&quot;user_info_value_json_str&quot;&#125;;</div><div class="line">        </div><div class="line">        [[UIApplication sharedApplication] scheduleLocalNotification:notification];</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>UIApplicationDidEnterBackgroundNotification</code> 可以监听到用户将 APP 退到后台.</p>
<p>当 APP 退到后台, 会调用 onDidEnterBackground 这个方法.</p>
<p>在 onDidEnterBackground 这个方法中, 我故意延时执行代码, 这里使用的是 dispatch_after.</p>
<p>编译运行这个工程, 运行成功后, 可以点击 Home 键将应用退到后台.</p>
<p>可以在 Xcode 的控制台看到 App Background. Enter onDidEnterBackground. 的打印信息, 但是迟迟不见 dispatch_after 里面的代码执行.</p>
<p>这里说明, APP 退到后台后被系统挂起了.</p>
<p>另外一个例子就是使用 NSTimer, 在 APP 退到后台后, 也会被终止.</p>
<p>完整例子, 一会在文章后台附录给出.</p>
<h2 id="通过后台模式延长-APP-运行"><a href="#通过后台模式延长-APP-运行" class="headerlink" title="通过后台模式延长 APP 运行"></a>通过后台模式延长 APP 运行</h2><p>上面的例子充分说明了, 在我们没有做任何处理的情况下, iOS 系统在 APP 退到后台的情况下, 会被系统挂起, 从而终止 APP 的代码行为.</p>
<p>下面通过实例, 来开启后台任务, 让 APP 尽可能的延长声明周期.</p>
<p>在工程的基础上, 新建一个文件 <code>MZBackgroundTask</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@interface MZBackgroundTask : NSObject</div><div class="line">+ (instancetype)sharedTask;</div><div class="line">- (void)startTask;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>具体实现, 只给出关键代码.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">- (void)startTask &#123;</div><div class="line">    </div><div class="line">    if (![self _checkSupportBackgroundTask]) &#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;BackgroundTask. Current device don&apos;t support backgroundTask.&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    UIApplication *application = [UIApplication sharedApplication];</div><div class="line">    </div><div class="line">    __block UIBackgroundTaskIdentifier taskId;</div><div class="line">    </div><div class="line">    /// 申请后台执行</div><div class="line">    /// 注意: 在iOS7和该版本前，后台可以用下面的的方式在后台存活5-10分钟，在iOS8及后，最多存活3分钟</div><div class="line">    &#123;</div><div class="line">        taskId = [application beginBackgroundTaskWithName:NSStringFromClass([self class]) expirationHandler:^&#123;</div><div class="line">            </div><div class="line">            MZLOG(@&quot;BackgroundTask. BackgroundTask is Over. The remained time: %f&quot;, application.backgroundTimeRemaining);</div><div class="line">            </div><div class="line">            [application endBackgroundTask:taskId];</div><div class="line">            </div><div class="line">            taskId = UIBackgroundTaskInvalid;</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (UIBackgroundTaskInvalid == taskId) &#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;BackgroundTask. Apply backgroundTask failed.&quot;);</div><div class="line">        </div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /// 可以监控后台任务剩余的时间, 针对业务可以去处理</div><div class="line">    &#123;</div><div class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">            </div><div class="line">            __block NSTimeInterval remainedTime;</div><div class="line">            </div><div class="line">            while (true) &#123;</div><div class="line">                </div><div class="line">                // 剩余可以后台执行的时间</div><div class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    </div><div class="line">                    // application.backgroundTimeRemaining 必须在主线程获取</div><div class="line">                    remainedTime = application.backgroundTimeRemaining;</div><div class="line">                    </div><div class="line">                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">                       </div><div class="line">                        MZLOG(@&quot;BackgroundTask. The remained time: %f&quot;, remainedTime);</div><div class="line">                        </div><div class="line">                        if (remainedTime &lt; 10) &#123;</div><div class="line">                            </div><div class="line">                            // 可以告诉其他业务, 后台申请的时间即将结束了</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        if (remainedTime &lt; 2) &#123;</div><div class="line">                            </div><div class="line">                            /// 这里可以做一些清除工作</div><div class="line">                            &#123;</div><div class="line">                                // clean up</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            [application endBackgroundTask:taskId];</div><div class="line">                            </div><div class="line">                            taskId = UIBackgroundTaskInvalid;</div><div class="line">                            </div><div class="line">                            return;</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        // 睡眠(延时)1s</div><div class="line">                        [NSThread sleepForTimeInterval:1.f];</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>startTask 开启后台任务.</p>
<p>在 AppDelegate 中, 调用这个方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)applicationDidEnterBackground:(UIApplication *)application &#123;</div><div class="line">    </div><div class="line">    [[MZBackgroundTask sharedTask] startTask];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再次运行工程, 可以根据日志看出, 之前的 dispatch_after 和 timer 可以运行了, 并且可以运行3分钟(180s).</p>
<p>根据 backgroundTimeRemaining 这个属性, 可以看出具体的后台可执行的剩余时间.</p>
<p><img src="/upload/images/2017/07/30/Background3.jpg" alt="1"></p>
<p>注意: 我测试的时候使用的是 iOS10 设备.</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>除了苹果规定的几种类型(如定位, 录音, VOIP 等)的应用外, 其他 APP 想申请更多的后台驻留时间, 就需要一些 <code>旁门左道</code> 的方法了.</p>
<p>苹果对后台操作做了这么多限制, 也是从用户的角度出发, 如安全, 省电, 省流量等.</p>
<p>比如, 在后台播放没有声音的音乐.</p>
<p>再比如, 申请定位服务的权限, 这样也可以保持 APP 在后台不被挂起.<br>但是, 依照苹果一贯的审核做法来看，如果声明了需要某项后台权限，你却没有相关实现的话，会直接被拒掉的.</p>
<p>这些是技术上的实现, 我没有推荐大家这么干, 现在苹果审核比以前还要严格, 大家还是悠着点干吧.如果你的 APP 不需要上架到 AppStore 的话, 就尽情的放纵吧…</p>
<h2 id="推荐博文"><a href="#推荐博文" class="headerlink" title="推荐博文"></a>推荐博文</h2><p>1.<a href="http://www.jianshu.com/p/50ff7a3a0fcd" target="_blank" rel="noopener">iOS实现无限后台background的方法</a></p>
<p>2.<a href="https://onevcat.com/2013/08/ios7-background-multitask/" target="_blank" rel="noopener">WWDC 2013 Session笔记 - iOS7中的多任务</a></p>
<p>iOS 在后台的时候如果不使用后台模式, socket 也会被系统关闭连接, 比如我们使用的 IM 功能.<br>使用后台模式后, 向系统申请的时间(3分钟内), socket 还是没有被关闭的, 除非断网或者被路由器给断开了, 在申请的这段时间内, socekt 还是可以使用的, 如果想持续的保持 socket 连接, 就需要去了解一下 VOIP Socket 相关的知识了, 实践过后, 分享给大家.</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>下面是具体的实现代码.</p>
<blockquote>
<p>ViewController.m</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property (nonatomic, strong) NSTimer *timer;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    </div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    [[NSNotificationCenter defaultCenter] addObserver:self</div><div class="line">                                             selector:@selector(onDidEnterBackground:)</div><div class="line">                                                 name:UIApplicationDidEnterBackgroundNotification</div><div class="line">                                               object:nil];</div><div class="line">    </div><div class="line">    // 每隔一秒执行一次</div><div class="line">    _timer = [NSTimer scheduledTimerWithTimeInterval:1</div><div class="line">                                              target:self</div><div class="line">                                            selector:@selector(onTimerDidRun:)</div><div class="line">                                            userInfo:nil repeats:YES];</div><div class="line">    </div><div class="line">    [[NSRunLoop currentRunLoop] addTimer:self.timer forMode:NSRunLoopCommonModes];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - Callback.</div><div class="line"></div><div class="line">- (void)onTimerDidRun:(id)sender &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App Background. Timer Running.&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)onDidEnterBackground:(NSNotification *)notification &#123;</div><div class="line">    </div><div class="line">    MZLOG(@&quot;App Background. Enter onDidEnterBackground.&quot;);</div><div class="line">    </div><div class="line">    int delta = 1;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delta * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;App Background. Enter onDidEnterBackground diapatch.&quot;);</div><div class="line">        </div><div class="line">        UILocalNotification *notification = [UILocalNotification new];</div><div class="line">        notification.fireDate = [NSDate dateWithTimeIntervalSinceNow:3];</div><div class="line">        notification.alertBody = @&quot;走, 去high吧!&quot;;</div><div class="line">        notification.soundName = UILocalNotificationDefaultSoundName;</div><div class="line">        // 可以自定义数据</div><div class="line">        notification.userInfo = @&#123;@&quot;user_info_key&quot;: @&quot;user_info_value_json_str&quot;&#125;;</div><div class="line">        </div><div class="line">        [[UIApplication sharedApplication] scheduleLocalNotification:notification];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - SetupViews.</div><div class="line"></div><div class="line">- (void)_setupViews &#123;</div><div class="line">    </div><div class="line">    self.view.backgroundColor = [UIColor purpleColor];</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>MZBackgroundTask.m</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line">#import &quot;MZBackgroundTask.h&quot;</div><div class="line"></div><div class="line">@implementation MZBackgroundTask</div><div class="line"></div><div class="line">+ (instancetype)sharedTask &#123;</div><div class="line">    </div><div class="line">    static MZBackgroundTask *_task;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        _task = [[self alloc] init];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    return _task;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)startTask &#123;</div><div class="line">    </div><div class="line">    if (![self _checkSupportBackgroundTask]) &#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;BackgroundTask. Current device don&apos;t support backgroundTask.&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    UIApplication *application = [UIApplication sharedApplication];</div><div class="line">    </div><div class="line">    __block UIBackgroundTaskIdentifier taskId;</div><div class="line">    </div><div class="line">    /// 申请后台执行</div><div class="line">    /// 注意: 在iOS7和该版本前，后台可以用下面的的方式在后台存活5-10分钟，在iOS8及后，最多存活3分钟</div><div class="line">    &#123;</div><div class="line">        taskId = [application beginBackgroundTaskWithName:NSStringFromClass([self class]) expirationHandler:^&#123;</div><div class="line">            </div><div class="line">            MZLOG(@&quot;BackgroundTask. BackgroundTask is Over. The remained time: %f&quot;, application.backgroundTimeRemaining);</div><div class="line">            </div><div class="line">            [application endBackgroundTask:taskId];</div><div class="line">            </div><div class="line">            taskId = UIBackgroundTaskInvalid;</div><div class="line">        &#125;];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    if (UIBackgroundTaskInvalid == taskId) &#123;</div><div class="line">        </div><div class="line">        MZLOG(@&quot;BackgroundTask. Apply backgroundTask failed.&quot;);</div><div class="line">        </div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /// 可以监控后台任务剩余的时间, 针对业务可以去处理</div><div class="line">    &#123;</div><div class="line">        dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">            </div><div class="line">            __block NSTimeInterval remainedTime;</div><div class="line">            </div><div class="line">            while (true) &#123;</div><div class="line">                </div><div class="line">                // 剩余可以后台执行的时间</div><div class="line">                dispatch_async(dispatch_get_main_queue(), ^&#123;</div><div class="line">                    </div><div class="line">                    // application.backgroundTimeRemaining 必须在主线程获取</div><div class="line">                    remainedTime = application.backgroundTimeRemaining;</div><div class="line">                    </div><div class="line">                    dispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0), ^&#123;</div><div class="line">                       </div><div class="line">                        MZLOG(@&quot;BackgroundTask. The remained time: %f&quot;, remainedTime);</div><div class="line">                        </div><div class="line">                        if (remainedTime &lt; 10) &#123;</div><div class="line">                            </div><div class="line">                            // 可以告诉其他业务, 后台申请的时间即将结束了</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        if (remainedTime &lt; 2) &#123;</div><div class="line">                            </div><div class="line">                            /// 这里可以做一些清除工作</div><div class="line">                            &#123;</div><div class="line">                                // clean up</div><div class="line">                            &#125;</div><div class="line">                            </div><div class="line">                            [application endBackgroundTask:taskId];</div><div class="line">                            </div><div class="line">                            taskId = UIBackgroundTaskInvalid;</div><div class="line">                            </div><div class="line">                            return;</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        // 睡眠(延时)1s</div><div class="line">                        [NSThread sleepForTimeInterval:1.f];</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark - Private.</div><div class="line"></div><div class="line">/**</div><div class="line"> *  当前设备是否支持后台任务.</div><div class="line"> *</div><div class="line"> *  @return YES, 支持后台任务. 否则, 不支持后台任务.</div><div class="line"> */</div><div class="line">- (BOOL)_checkSupportBackgroundTask &#123;</div><div class="line">    </div><div class="line">    SEL sel = @selector(isMultitaskingSupported);</div><div class="line">    BOOL supportBTask = [[UIDevice currentDevice] respondsToSelector:sel];</div><div class="line">    </div><div class="line">    return supportBTask;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 后台模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[使用 Charles]]></title>
      <url>/2017/07/23/%E4%BD%BF%E7%94%A8-Charles/</url>
      <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>Charles 是 Mac 上面比较好用的抓包工具.</p>
<p>在使用微信登录 SDK 的时候, 我想看看微信请求的内容, 以及其授权过程, 发现只要连接 Charles, 跳转到微信之后无法打开微信的授权登录页面, 提示网络不可用.</p>
<p>经过研究, 是需要使用 Charles 配置 HTTPS, 配置完成后, 就可以随心所欲了.</p>
<p>所以, 今天跟大家分享一下 Charles 使用的两个点:</p>
<ul>
<li>Charles 的 HTTPS 配置.</li>
<li>使用 Charles 模拟(慢)网络.</li>
</ul>
<h2 id="工具和系统"><a href="#工具和系统" class="headerlink" title="工具和系统"></a>工具和系统</h2><ul>
<li>iPhone: iOS 10.3.</li>
<li>Mac OS: 10.12.5.</li>
<li>Charles: 4.0.2.</li>
</ul>
<h2 id="抓取-HTTPS-请求"><a href="#抓取-HTTPS-请求" class="headerlink" title="抓取 HTTPS 请求"></a>抓取 HTTPS 请求</h2><p><strong>1.Mac 安装证书</strong></p>
<blockquote>
<p>打开 Charles, 在 Help 选项中选择 SSL Proxying, 如下图所示:</p>
</blockquote>
<p><img src="/upload/images/2017/07/23/1.jpg" alt="1"></p>
<p><strong>2.Mac 信任证书</strong></p>
<blockquote>
<p>打开 Keychain Access (钥匙串), 找到刚才安装的证书, 信任证书, 如图:</p>
</blockquote>
<p><img src="/upload/images/2017/07/23/2.jpg" alt="1"></p>
<p><strong>3.给 iPhone 安装证书</strong></p>
<blockquote>
<p>打开 Charles, 在 Help 选项中选择 SSL Proxying, 操作如图:</p>
</blockquote>
<p><img src="/upload/images/2017/07/23/3.jpg" alt="1"></p>
<p>在弹出的对话框中, 可以看到 <code>chls.pro/ssl</code></p>
<p><img src="/upload/images/2017/07/23/4.jpg" alt="1"></p>
<p>手机设置代理, 连接 Charles</p>
<blockquote>
<p>一定要记住: 手机一定要设置代理, 否则安装证书会失败.</p>
</blockquote>
<p>打开手机的 Safari 浏览器, 输入 <code>chls.pro/ssl</code> 这个地址.</p>
<p><img src="/upload/images/2017/07/23/5.jpg" alt="1"></p>
<p>设置信任证书, 如下图:</p>
<p><img src="/upload/images/2017/07/23/6.jpg" alt="1"></p>
<p><img src="/upload/images/2017/07/23/7.jpg" alt="1"></p>
<h2 id="模拟任意网络"><a href="#模拟任意网络" class="headerlink" title="模拟任意网络"></a>模拟任意网络</h2><p>Charles 给我们提供了可以模拟任何网速的网络环境的条件.</p>
<p><img src="/upload/images/2017/07/23/8.jpg" alt="1"></p>
<p>打开 Throttle Settings, 然后 Enable Throttling</p>
<p><img src="/upload/images/2017/07/23/9.jpg" alt="1"></p>
<p>可以看到很多类型的网络供你选择.</p>
<p>Add Preset 可以自己自定义一个网络环境.</p>
<p>这个功能非常实用, 可以让我们模拟慢网络环境, 更好地调试自己的程序.</p>
<h2 id="遇到麻烦"><a href="#遇到麻烦" class="headerlink" title="遇到麻烦"></a>遇到麻烦</h2><p>1.抓取 HTTPS 的请求出现错误</p>
<p>错误日志如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">SSLHandshake: Received fatal alert: unknown_ca</div><div class="line">Charles Proxy will even offer a helpful suggestion:</div><div class="line">You may need to configure your browser or application to trust the Charles Root Certificate. See SSL Proxying in the Help menu.</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2017/07/23/10.jpg" alt="1"></p>
<p>这种错误一般是出现在 iOS10 上面.</p>
<p>请在关于本机里面再设置一次 证书信任设置, 即可.</p>
<p><img src="/upload/images/2017/07/23/11.jpg" alt="1"></p>
<p>2.系统升级后, 设置的 HTTPS 抓包失效</p>
<p>按照上述方法, 重新设置一次即可.</p>
]]></content>
      
        <categories>
            
            <category> Tools </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Charles MacOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocos2d-js: 在 iOS 上运行]]></title>
      <url>/2017/07/23/Cocos2d-js-%E5%9C%A8-iOS-%E4%B8%8A%E8%BF%90%E8%A1%8C/</url>
      <content type="html"><![CDATA[<p>在我的博文 <a href="http://www.veryitman.com/2017/05/14/2017-05-14-Cocos2d-js-%E9%A6%96%E6%AC%A1%E5%9C%A8-Mac-%E4%B8%8A%E9%9D%A2%E8%BF%90%E8%A1%8C/" target="_blank" rel="noopener">Cocos2d-js: 首次在 Mac 上面运行</a> 这篇文章中, 介绍了 Cocos2d 相关的知识, 并且使用Cocos2dx 创建了一个 JS 的简单游戏项目.</p>
<p>今天跟大家分享一下, 如何在 ios 设备上面运行一个 JS 游戏项目.</p>
<p>该游戏项目(贪吃蛇)来自网络资源, 只供演示使用, 不提供任何关于游戏的资源.</p>
<h2 id="当初的想当然"><a href="#当初的想当然" class="headerlink" title="当初的想当然"></a>当初的想当然</h2><p>在 Mac 上面 so easy 的编译并运行了 JS 游戏, 我想在 iOS 设备上应该也很简单的就可以运行起来, 但是我发现我简单不加思考的想法, 是行不通的.</p>
<p>博文 <a href="http://www.veryitman.com/2017/05/14/2017-05-14-Cocos2d-js-%E9%A6%96%E6%AC%A1%E5%9C%A8-Mac-%E4%B8%8A%E9%9D%A2%E8%BF%90%E8%A1%8C/" target="_blank" rel="noopener">Cocos2d-js: 首次在 Mac 上面运行</a> 在 FireFox 浏览器上面可以直接运行 <code>index.html</code>, 但是在 Chrome 浏览器上面就没那么顺利.</p>
<p>想到这里, 我就受到了启发, 莫非 iOS 设备上面需要自己搭建一套 Web Server?</p>
<h2 id="搭建-Web-Server"><a href="#搭建-Web-Server" class="headerlink" title="搭建 Web Server"></a>搭建 Web Server</h2><p>既然想到了这一步, 接下来就是找方案实施了.</p>
<p><a href="https://github.com/robbiehanson/CocoaHTTPServer" target="_blank" rel="noopener">CocoaHTTPServer</a> 这个可以满足我的需求, 于是, 我就直接拿来使用了.</p>
<p>项目中, 我使用了 Cocoapods 来管理第三方库.在 podfile 中直接添加下面的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;CocoaHTTPServer&apos;, &apos;~&gt; 2.3&apos;</div></pre></td></tr></table></figure>
<p>然后 pod install 即可.</p>
<p>1.在 ViewController 中导入头文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#import &lt;HTTPServer.h&gt;</div><div class="line">ViewController 声明部分</div><div class="line"></div><div class="line">@interface ViewController () &lt;WKNavigationDelegate&gt;</div><div class="line">@property (nonatomic, strong) WKWebView *webView;</div><div class="line">@property (nonatomic, strong) HTTPServer *localHttpServer;</div><div class="line">@property (nonatomic, strong) WKWebViewConfiguration *wbConfig;</div><div class="line">//用于调试的 UILabel</div><div class="line">@property (nonatomic, strong) IBOutlet UILabel *loadingLb;</div><div class="line">@property (nonatomic, assign) BOOL startServerSuccess;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>2.配置 Web Server</p>
<p>核心实现如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"> - (void)_configLocalHttpServer</div><div class="line">&#123;</div><div class="line">    NSString *webPath = [[NSBundle mainBundle] pathForResource:@&quot;crazySnake&quot; ofType:nil];</div><div class="line">    _localHttpServer = [[HTTPServer alloc] init];</div><div class="line">    [_localHttpServer setType:@&quot;_http.tcp&quot;];</div><div class="line">    </div><div class="line">    NSFileManager *fileManager = [[NSFileManager alloc] init];</div><div class="line">    NSLog(@&quot;%@&quot;, webPath);</div><div class="line">    </div><div class="line">    if (![fileManager fileExistsAtPath:webPath]) &#123;</div><div class="line">        NSLog(@&quot;File path error!&quot;);</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSString *webLocalPath = webPath;</div><div class="line">        [_localHttpServer setDocumentRoot:webLocalPath];</div><div class="line">        NSLog(@&quot;webLocalPath:%@&quot;, webLocalPath);</div><div class="line">        [self _startWebServer];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (void)_startWebServer</div><div class="line">&#123;</div><div class="line">    self.loadingLb.hidden = NO;</div><div class="line">    </div><div class="line">    NSError *error;</div><div class="line">    if ([_localHttpServer start:&amp;error]) &#123;</div><div class="line">        NSLog(@&quot;Started HTTP Server on port %hu&quot;, [_localHttpServer listeningPort]);</div><div class="line">        self.port = [NSString stringWithFormat:@&quot;%d&quot;, [_localHttpServer listeningPort]];</div><div class="line">        </div><div class="line">        self.loadingLb.text = @&quot;Start Server Successfully.&quot;;</div><div class="line">        </div><div class="line">        _startServerSuccess = YES;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        NSLog(@&quot;Error starting HTTP Server: %@&quot;, error);</div><div class="line">        </div><div class="line">        self.loadingLb.text = @&quot;Start Server failed.&quot;;</div><div class="line">        </div><div class="line">        _startServerSuccess = NO;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>_configLocalHttpServer</code> 是配置 HTTPServer 的方法, <code>_startWebServer</code> 是开启 Web Server 的方法.</p>
<p>这样调用 <code>_configLocalHttpServer</code> 就可以开启在设备上面开启一个 Web Server 了.</p>
<h2 id="Xcode-导入-JS-游戏项目"><a href="#Xcode-导入-JS-游戏项目" class="headerlink" title="Xcode 导入 JS 游戏项目"></a>Xcode 导入 JS 游戏项目</h2><p>首先看一下我的工程和资源目录结构, 如图:</p>
<p><img src="/upload/images/2017/07/23/2_1.jpg" alt="1"></p>
<p>仔细看一下, <code>crazySnake</code> 这个文件夹是蓝色的, 不是黄色的.</p>
<p>这里特别注意, 导入这个 crazySnake 文件夹的时候, Options 一定要选择 <code>Create folder reference</code>.</p>
<p>为什么要这么做?</p>
<p>细心的朋友可以发现, 使用 <code>Create folder reference</code>导入的文件夹, 在项目打包生成的 archive 的文件中(自己可以解压看)是可以看到 crazySnake 这个文件夹的, 如果不是这种方式, 而是使用 Create groups 方式(在 Xcode 中显示黄色), 在 archive 中是看不到 crazySnake 这个文件夹的, 而是将里面的文件打散放在 archive 的根目录下面了.</p>
<blockquote>
<p>总之, 一句话, <code>Create folder reference</code> 方式导入的文件夹在打包后还是原来的文件夹, 不会将文件夹里面的文件打散.</p>
</blockquote>
<p>试想一下, 如果多加入几个这样的目录, 都打散在根目录下面, 我们就不好管理这个文件夹里面的文件了.</p>
<h2 id="配置-WKWebView"><a href="#配置-WKWebView" class="headerlink" title="配置 WKWebView"></a>配置 WKWebView</h2><blockquote>
<p>这里我使用了 WKWebView 而不是 UIWebView 作为加载 HTML 的容器.<br>当然, 你也可以使用 UIWebView.</p>
</blockquote>
<p>主要的核心代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    self.navigationController.navigationBarHidden = YES;</div><div class="line">    </div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(0.5 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        self.loadingLb.text = @&quot;Config server...&quot;;</div><div class="line">        [self _configLocalHttpServer];</div><div class="line">    &#125;);</div><div class="line">    </div><div class="line">    /// 增加的调式方法: 可以重新启动 web server.</div><div class="line">    &#123;</div><div class="line">        SEL sel = @selector(_configLocalHttpServer);</div><div class="line">        UITapGestureRecognizer *gesture = [[UITapGestureRecognizer alloc] initWithTarget:self</div><div class="line">                                                                                  action:sel];</div><div class="line">        [self.loadingLb addGestureRecognizer:gesture];</div><div class="line">        self.loadingLb.userInteractionEnabled = YES;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">- (void)viewDidAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewDidAppear:animated];</div><div class="line">    </div><div class="line">    // 配置 WKWebView</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        </div><div class="line">        _wbConfig = [[WKWebViewConfiguration alloc] init];</div><div class="line">        self.wbConfig.userContentController = [[WKUserContentController alloc] init];</div><div class="line">        </div><div class="line">        _webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:self.wbConfig];</div><div class="line">        </div><div class="line">        _webView.frame = self.view.bounds;</div><div class="line">        _webView.scrollView.showsHorizontalScrollIndicator = NO;</div><div class="line">        _webView.scrollView.showsVerticalScrollIndicator   = NO;</div><div class="line">        </div><div class="line">        [self.view addSubview:self.webView];</div><div class="line">        self.webView.frame = self.view.bounds;</div><div class="line">        self.webView.navigationDelegate = self;</div><div class="line">        </div><div class="line">        if (self.startServerSuccess) &#123;</div><div class="line">            self.loadingLb.hidden = YES;</div><div class="line">            </div><div class="line">            NSString *gameUrl = [[NSBundle mainBundle] pathForResource:@&quot;index&quot;</div><div class="line">                                                                ofType:@&quot;html&quot;</div><div class="line">                                                           inDirectory:@&quot;crazySnake&quot;];</div><div class="line">            NSURL *url = [NSURL fileURLWithPath:gameUrl];</div><div class="line">            </div><div class="line">            url = [NSURL URLWithString:[NSString stringWithFormat:@&quot;http://127.0.0.1:%@/index.html&quot;, self.port]];</div><div class="line">            [self.webView loadRequest:[NSURLRequest requestWithURL:url]];</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很简单, 就是使用 WKWebView 加载一个 HTML 文件并启动 Web Server.</p>
<h2 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h2><p>接下来, 就是见证奇迹的时刻了…</p>
<p>上面配置了 Web Server 和 加载 html 的 WKWebView, 现在可以直接运行项目看效果了.</p>
<p>无论你是在模拟器还是在真机上面都可以运行这个 JS 游戏项目了.</p>
<p><img src="/upload/images/2017/07/23/2_2.jpg" alt="1"></p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>上面的例子本人亲自实践过的, 给大家提供了一个实现思路, 算是抛砖引玉.</p>
<p>如果想做好这个模式, 还需要很多工作要做, 这里列出来给大家分享一下.</p>
<blockquote>
<p>1.游戏资源包管理和下载.<br>2.游戏中需要和 Native 的交互逻辑.<br>3.数据加密.<br>4.移动端游戏本身的加载优化.</p>
</blockquote>
<p>如果你有更好的方案和想法, 我很乐意邮件 (veryitman@126.com) 与你沟通, 非常感谢!</p>
<p>代码示例我放在了 GitHub, 点击 <a href="https://github.com/veryitman/MZMWPlay" target="_blank" rel="noopener">MZMWPlay</a> 前往下载体验.</p>
]]></content>
      
        <categories>
            
            <category> Game </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cocos Cocos2d-js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android: Chrome 调试 WEB 页面]]></title>
      <url>/2017/06/01/Android-Chrome-%E8%B0%83%E8%AF%95-WEB-%E9%A1%B5%E9%9D%A2/</url>
      <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在 Mac OS 上面通过 Safari 调试 iOS 设备或者模拟器的 WEB 页面, 比较方便.</p>
<p>关于具体如何使用 Safari 来调试 iOS 设备, 可以参考 [Safari 的开发者模式] 这篇文章.</p>
<p>自从踏上开发的道路, 电脑上就安装了 Chrome 浏览器, 并且一直保持着更新, Chrome 以其简单设计和高效的用法吸引了大批开发者.</p>
<p>使用 Chrome 调试 Android 设备的 WEB 页面, 易如反掌.</p>
<h2 id="Chrome-调试条件"><a href="#Chrome-调试条件" class="headerlink" title="Chrome 调试条件"></a>Chrome 调试条件</h2><p>使用这项技能的条件如下:</p>
<blockquote>
<p>1.Android 设备系统最低为4.4, 也就是 android-19</p>
<p>2.Chrome 最好使用最新版本的, 以前的版本不支持, 最低兼容版本目前尚不清楚.</p>
<p>3.配置 Android WebView, 使其支持 Debug 和使能 JavaScript 功能.</p>
<p>4.设备和 PC 通过 USB 连接正常, 且支持 USB 调试的.</p>
</blockquote>
<p>我目前使用的设备和 Chrome 版本信息如下:</p>
<blockquote>
<p>Android 设备: 5.1.1版本<br>Chrome: Version 58.0.3029.110 (64-bit)</p>
</blockquote>
<p>我们在地址栏中输入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chrome://inspect</div></pre></td></tr></table></figure>
<p>就可以打开设备列表界面.<br><img src="/upload/images/2017/06/01/14962450324558.jpg" alt="1"></p>
<p>可以看到我的 Android 设备已经显示出来了.</p>
<p>下面举个例子说明该调试工具的使用.</p>
<h2 id="简单的-Android-工程示例"><a href="#简单的-Android-工程示例" class="headerlink" title="简单的 Android 工程示例"></a>简单的 Android 工程示例</h2><p>该工程只有一个 Activity, 使用 WebView 加载本地 HTML 文件.</p>
<h4 id="1-创建-assets-目录"><a href="#1-创建-assets-目录" class="headerlink" title="1. 创建 assets 目录"></a>1. 创建 assets 目录</h4><p>工程切换到 Project Files 视图<br><img src="/upload/images/2017/06/01/14962453176556.jpg" alt="1"></p>
<p>这样就可以在 src/main 目录下新建了 assets 文件夹了.</p>
<h4 id="2-创建-HTML-文件"><a href="#2-创建-HTML-文件" class="headerlink" title="2. 创建 HTML 文件"></a>2. 创建 HTML 文件</h4><blockquote>
<p>该 HTML 文件, 命名为 local.html, 放在 assets 目录下面.</p>
</blockquote>
<p>local.html 源文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;Click me&lt;/button&gt;</div><div class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;A function is triggered when the button is clicked.&lt;/p&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    function myFunction() &#123;</div><div class="line">        console.log(&apos;js console.&apos;);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h4 id="3-在-Activity-中配置-WebView"><a href="#3-在-Activity-中配置-WebView" class="headerlink" title="3.在 Activity 中配置 WebView."></a>3.在 Activity 中配置 WebView.</h4><p>Activity.java 源文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class MZWebPage extends AppCompatActivity &#123;</div><div class="line">    private WebView webView;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_mzweb_page);</div><div class="line">        webView = (WebView) this.findViewById(R.id.ui_web_view);</div><div class="line">        // 设置 WebView 的 Debug 为可用状态</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            WebView.setWebContentsDebuggingEnabled(true);</div><div class="line">        &#125;</div><div class="line">        WebSettings settings = webView.getSettings();</div><div class="line">        </div><div class="line">        // 设置 JavaScript 可以使用, 否则在 HTML 中无法调用 JavaScript 代码</div><div class="line">        settings.setJavaScriptEnabled(true);</div><div class="line">        // 本地文件</div><div class="line">        String url = &quot;file:///android_asset/local.html&quot;;</div><div class="line">        webView.loadUrl(url);</div><div class="line">        webView.setWebViewClient(new WebViewClient() &#123;</div><div class="line">            @Override</div><div class="line">            public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) &#123;</div><div class="line">                return super.shouldOverrideUrlLoading(view, request);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        // 设置渲染视图</div><div class="line">        webView.setWebChromeClient(new WebChromeClient());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的 xml 布局文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    xmlns:tools=&quot;http://schemas.android.com/tools&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    tools:context=&quot;demo.droidsdk.near.idreamsky.com.nearsdk.MZWebPage&quot;&gt;</div><div class="line">    &lt;WebView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:id=&quot;@+id/ui_web_view&quot;&gt;</div><div class="line">    &lt;/WebView&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<h4 id="4-运行程序"><a href="#4-运行程序" class="headerlink" title="4. 运行程序"></a>4. 运行程序</h4><p>在 Chrome 中输入 chrome://inspect 打开, 可以看到正在运行的 local.html.<br><img src="/upload/images/2017/06/01/14962458882973.jpg" alt="1"></p>
<p>点击 <code>inspect</code>, 进入调试界面.</p>
<p>在调试界面, 点击页面的 Click me, 按钮, 对应的会有 log 输出.<br><img src="/upload/images/2017/06/01/14962459967493.jpg" alt="1"></p>
<h4 id="5-调试出错的-HTML"><a href="#5-调试出错的-HTML" class="headerlink" title="5.调试出错的 HTML"></a>5.调试出错的 HTML</h4><p>修改一下 local.html 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;body&gt;</div><div class="line">&lt;button onclick=&quot;myFunction()&quot;&gt;Click me&lt;/button&gt;</div><div class="line">&lt;p id=&quot;demo&quot;&gt;&lt;/p&gt;</div><div class="line">&lt;p&gt;A function is triggered when the button is clicked.&lt;/p&gt;</div><div class="line">&lt;script&gt;</div><div class="line">    function myFunction() &#123;</div><div class="line">        console.log(&apos;js console.&apos; + var_error);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>这里可以看出 <code>var_error</code> 是一个不存在的变量.</p>
<p>重新运行, 点击 Click me, 可以看到右侧的 error:<br><img src="/upload/images/2017/06/01/14962461463698.jpg" alt="1"></p>
<p>关于 Chrome 开发者工具的更多使用, 可以参考官方文档 <a href="https://developers.google.com/web/tools/chrome-devtools/?hl=zh-cn" target="_blank" rel="noopener">Chrome 开发者工具</a>.</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Chrome Web Debug </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[保持你的好习惯]]></title>
      <url>/2017/05/29/%E4%BF%9D%E6%8C%81%E4%BD%A0%E7%9A%84%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2017/05/29/1.jpeg" alt="1"></p>
<p>明天就是传统的端午节了, 提前祝大家端午安康!</p>
<p>今天老婆让我帮忙把粽叶子洗洗, 说要包粽子, 我听话地把刚买来的粽叶子洗了个干净, 那都是带有绿色的叶子, 生机勃勃, 让我从指尖中感到无比的温馨和无尽的希望.</p>
<p>小的时候, 我很享受妈妈为我们包粽子的过程, 说实话, 我不是很喜欢吃粽子, 但是特别喜欢粽子锅里面的煮鸡蛋, 特别美味.</p>
<p>老家的粽子没有什么特色, 就是简简单单的糯米被包在叶子中, 然后放在锅里慢慢的煮, 熟了之后, 蘸点白糖就可以吃了.</p>
<p>到了南方之后, 我才发现世界上原来有各种各样的粽子, 红枣的, 绿豆的, 猪肉馅的, 鸡肉馅的…等等!</p>
<p>这些都是偶发的回忆, 和今天的推文没有关系, 不信, 你接着往下看.</p>
<h2 id="养成阅读的习惯"><a href="#养成阅读的习惯" class="headerlink" title="养成阅读的习惯"></a>养成阅读的习惯</h2><p>我不是一个聪明的孩子, 直到小学三年级, 我才真正的开始明白学习到底是怎么一回事, 用老家人的话说算是开窍了.</p>
<p>后来我很顺利的上了初中, 家里的大部分收入要靠庄家, 一年四季能够风调雨顺的话, 也能过个不错的年, 至少能把学费给交上.</p>
<p>初中二年级的时候, 我辍学了, 也许是命运的安排吧, 当时自己也没有多想, 毅然决定下学去寻找另一种人生.</p>
<p>于是, 我选择了理发这个行业. 和师傅在风风雨雨中度过了一年多的时间, 在当时的农村, 不上学有门手艺也算是对自己和父母有个交代.</p>
<p>我的内心仍然渴望去上学, 虽然不知道为什么要去上学也不知道上学后能干什么, 但是心里面总是觉得自己不能放弃学业.在理发的一年多时间里, 我没有放弃过学习.<br>冥冥之中自有安排, 妈妈有次问我: “还想去上学不?”, 我想都没想就情不自禁的点头了, 妈妈又说:”我就知道你没有放弃, 去继续上学吧, 不要留下遗憾!”.当时的我甭提有多高兴了.</p>
<p>再次回到校园的我比以前更加努力和拼命了, 更加懂得如何珍惜这来之不易的学习机会了.</p>
<p>直到大学毕业, 参加工作以及有了孩子后, 我也能保持自我学习和自我激励的状态, 保持好的阅读习惯, 让我受益终身.</p>
<p>有次孩子早晨起床忙完后, 就开始坐在那里看书, 有好几次晚上, 我也发现他洗完澡后, 坐在那里看书, 或者是做手工, 或是画画.</p>
<p>我感到很好奇, 决定找个机会问问他.</p>
<p>有一个周末的上午, 早餐过后, 我就把他拉到身边, 和他一起看儿童读物, 问他:”宝贝, 你为什么喜欢看书呢?”, 他说:”爸爸, 是你影响了我, 你喜欢看书, 我也喜欢看书.”, 看着他一副天真的样子, 我真的不敢相信几岁的孩子能说出这样的话, 但我内心感到无比的欣慰.原来好的习惯会传染给自己身边的人, 并且能让你感到自豪.</p>
<h2 id="坚持写博客"><a href="#坚持写博客" class="headerlink" title="坚持写博客"></a>坚持写博客</h2><p>写博客或者是生活日记, 确实很”浪费”时间, 甚至会占用你任何休息的时间, 写博客偶尔也会让你抓耳挠腮, 感叹:”书到用时方恨少”!</p>
<p>所以, 读, 写不能分家, 更应该是将二者紧密的联合在一起.<br>多阅读多写, 才会让你更加的通透, 当然了, 我只是喜欢写, 写的质量也很一般, 只是为了满足内心的那一点点对知识的渴望.</p>
<p>写的多了, 你就更加愿意去思考了, 思考多了, 很多事情你就看开了, 对你的生活和工作都有好处.</p>
<p>从09年到现在我一直坚持写博客, 刚开始也是无从下笔, 不知道自己到底该写一写什么东西, 写了之后, 是不是别人看了会嘲笑我, 诸如此类的担心太多太多, 后来我也想明白了, 你写的再好也有人比你写得好, 也会有人说你写的不好.那我何必去计较这么些个事儿了, 只管动手写吧!</p>
<p>然后, 就在博客网站上面耕耘, 技术的, 吐槽的, 生活的我都喜欢写, 不管你喜不喜欢看, 它都在那里, 哈哈!</p>
<p>我把博客当做自己的朋友, 心情好亦或是不好的时候, 我都会向他倾诉, 希望自己写下的东西或多或少能帮助一些人, 这也许是我坚持写博客的最大动力了.</p>
<p>如果你也喜欢写博客或者是准备写博客, 就开始动手写吧, 不要再犹豫了.</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>这个世界上, 没多少人喜欢听别人啰嗦, 即使听了你的啰嗦, 也不一定会付出实践, 即使你是长者或者是智者, 况且我只是一介平民.</p>
<p>但是我还是要啰嗦一句:”保持持续学习的习惯, 会消耗你的勤奋, 但会让你受益终生”, 信不信由你!</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思考 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Safari 的开发者模式]]></title>
      <url>/2017/05/15/Safari-%E7%9A%84%E5%BC%80%E5%8F%91%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h2 id="设置-Safari"><a href="#设置-Safari" class="headerlink" title="设置 Safari"></a>设置 Safari</h2><p>1.打开 Safari 的 Preference<br><img src="/upload/images/2017/05/15/14948249631231.jpg" alt="1"></p>
<p>2.切换到 Advanced 选项<br><img src="/upload/images/2017/05/15/14948250437147.jpg" alt="1"></p>
<p>将 <code>Show Develop menu in menu bar</code> 选中.</p>
<p>可以看到 Safari 多了 Develop 选项<br><img src="/upload/images/2017/05/15/14948254198174.jpg" alt="1"></p>
<h2 id="设置设备或者模拟器"><a href="#设置设备或者模拟器" class="headerlink" title="设置设备或者模拟器"></a>设置设备或者模拟器</h2><h3 id="在-iphone或者模拟器-中设置-Safari"><a href="#在-iphone或者模拟器-中设置-Safari" class="headerlink" title="在 iphone或者模拟器 中设置 Safari"></a>在 iphone或者模拟器 中设置 Safari</h3><h4 id="打开-Safari-的高级选项"><a href="#打开-Safari-的高级选项" class="headerlink" title="打开 Safari 的高级选项"></a>打开 Safari 的高级选项</h4><p><img src="/upload/images/2017/05/15/14948252328005.jpg" alt="1"></p>
<h4 id="打开-Web-检查器"><a href="#打开-Web-检查器" class="headerlink" title="打开 Web 检查器"></a>打开 Web 检查器</h4><p><img src="/upload/images/2017/05/15/14948252717169.jpg" alt="1"></p>
<p>上面设置完毕后, 运行你的程序, 在 Safari 的 Develop 中可以看到对应设备, 从而可以调试 HTML 页面了.<br><img src="/upload/images/2017/05/15/14948259031169.jpg" alt="1"></p>
<p>在调试窗口中，可以看到当前正在加载网页的各种信息，如源码、请求头、图片、加载的资源与脚本、控制台输出等.</p>
<p>也可以直接修改网页的 CSS 样式和布局等进行修改，而不用重新运行 App.<br><img src="/upload/images/2017/05/15/14948635711574.jpg" alt="1"></p>
<p>使用 Safari 的开发者模式, 可以帮助我们调试前端页面, 解决一些问题, 比较方便.</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS Safari </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS: 自定义 UIWebView 和 WKWebView 的 UserAgent]]></title>
      <url>/2017/05/14/iOS-%E8%87%AA%E5%AE%9A%E4%B9%89-UIWebView-%E5%92%8C-WKWebView-%E7%9A%84-UserAgent/</url>
      <content type="html"><![CDATA[<h2 id="导言"><a href="#导言" class="headerlink" title="导言"></a>导言</h2><p>在 iOS8, 苹果推出了 WKWebView, 目的很明显: 取代 UIWebView.</p>
<p>随着时间的推移, 越来越多的应用开始最低版本支持为 iOS8, 大家也纷纷的开始使用 WKWebView 组件.</p>
<p>在 iOS10.x 版本上, UIWebView 的表现不尽如人意, 在我们的后台日志和用户反馈, 存在很多莫名其妙的 crash 以及卡顿现象, 内存飙升等问题. 针对不同的 JS 游戏引擎, UIWebView 表现也不够好, 所以是时候使用 WKWebView 了.</p>
<p>但是话又说回来, 如果你最低版本支持 iOS8, 也不能完全放弃 UIWebView, WKWebView 有一部分 API 只有 iOS9+ 才有, 如果你的应用在 iOS8 运行而使用 iOS9 的 API, 肯定会 crash.</p>
<p>例如:</p>
<blockquote>
<p>1.清除缓存.<br>2.设置 user-agent.</p>
</blockquote>
<p>今天要说的是关于设置自定义 UIWebView 和 WKWebView 的 UserAgent 问题.</p>
<h2 id="WKWebView-UserAgent"><a href="#WKWebView-UserAgent" class="headerlink" title="WKWebView UserAgent"></a>WKWebView UserAgent</h2><h4 id="默认的-UserAgent"><a href="#默认的-UserAgent" class="headerlink" title="默认的 UserAgent"></a>默认的 UserAgent</h4><p>使用下面的代码, 可以输出 WKWebView 的默认 UserAgent.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidload </div><div class="line">&#123;</div><div class="line">    [self.wkWebView evaluateJavaScript:@&quot;navigator.appName&quot; completionHandler:^(id __nullable appName, NSError * __nullable error) &#123;</div><div class="line">        NSLog(@&quot;navigator.appName: %@&quot;, appName);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    [self.wkWebView evaluateJavaScript:@&quot;navigator.userAgent&quot; completionHandler:^(id __nullable userAgent, NSError * __nullable error) &#123;</div><div class="line">    	NSLog(@&quot;navigator.userAgent: %@&quot;, userAgent);</div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>navigator.appName 无论在 iOS8, iOS9 还是 iOS10, 输出结果都是一致的.</p>
<p>navigator.userAgent 在不同的 iOS 系统上面输出结果略有不同.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// iOS 8.3</div><div class="line">// Mozilla/5.0 (iPhone; CPU iPhone OS 8_3 like Mac OS X) AppleWebKit/600.1.4 (KHTML, like Gecko) Mobile/12F70</div><div class="line">// iOS 9.0</div><div class="line">// Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.32 (KHTML, like Gecko) Mobile/13A4254v</div><div class="line">// iOS 10.x</div><div class="line">//Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X) AppleWebKit/603.1.30 (KHTML, like Gecko) Mobile/14E269</div></pre></td></tr></table></figure>
<h4 id="自定义-UserAgent"><a href="#自定义-UserAgent" class="headerlink" title="自定义 UserAgent"></a>自定义 UserAgent</h4><p>修改默认的 UserAgent, 需要使用下面的方法.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">self.wkWebView.customUserAgent = @&quot;CustomUserAgent&quot;</div></pre></td></tr></table></figure>
<p>这样, 就改变了其默认的 UserAgent 值了.</p>
<p>特别需要注意: customUserAgent 是 iOS9 之后才有的字段.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/*! @abstract The custom user agent string or nil if no custom user agent string has been set.</div><div class="line">*/</div><div class="line">@property (nullable, nonatomic, copy) NSString *customUserAgent API_AVAILABLE(macosx(10.11), ios(9.0));</div></pre></td></tr></table></figure>
<p>所以在 iOS8.x, 如果你想改变 UserAgent, 还是要使用 UIWebView.</p>
<h2 id="HTML-使用-UserAgent"><a href="#HTML-使用-UserAgent" class="headerlink" title="HTML 使用 UserAgent"></a>HTML 使用 UserAgent</h2><p>HTML 中可以根据自定义的 UserAgent, 做出不同的行为, 如自定的 UserAgent 可以包括应用的版本号, HTML 可以根据不同的版本来做版本区分等逻辑.</p>
<p>在 HTML 中, 可以使用 JS 来获取 UserAgent 的值.</p>
<p>Demo.html</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html lang=&quot;en&quot; xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;</div><div class="line">    &lt;head&gt;</div><div class="line">        &lt;meta charset=&quot;utf-8&quot; /&gt;</div><div class="line">        &lt;title&gt;user-agent&lt;/title&gt;</div><div class="line">        &lt;script type=&quot;text/javascript&quot;&gt;</div><div class="line">            function getUserAgent() &#123;</div><div class="line">                var ug = navigator.userAgent;</div><div class="line">                document.getElementById(&quot;mySpan&quot;).innerHTML = ug;</div><div class="line">            &#125;</div><div class="line">        &lt;/script&gt;</div><div class="line">    &lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;h1&gt;显示 user-agent&lt;/h1&gt;</div><div class="line">        &lt;p&gt;&lt;span style=&quot;font-size:30px&quot; id=&quot;mySpan&quot;&gt;..&lt;/span&gt;&lt;/p&gt;</div><div class="line">        &lt;p&gt;&lt;input type=&quot;button&quot; value=&quot;点击显示 user-agent&quot; onclick=&quot;getUserAgent()&quot;  class=&quot;button&quot;/&gt;&lt;/p&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">    </div><div class="line">    &lt;style&gt;</div><div class="line">        .button &#123;</div><div class="line">            background-color: #4C0950;</div><div class="line">            border: none;</div><div class="line">            color: white;</div><div class="line">            padding: 15px 32px;</div><div class="line">            text-align: center;</div><div class="line">            text-decoration: none;</div><div class="line">            display: inline-block;</div><div class="line">            font-size: 40px;</div><div class="line">            margin: 20px 200px 100px 300px;</div><div class="line">            cursor: pointer;</div><div class="line">            border-radius: 15;</div><div class="line">        &#125;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p>使用 WKWebView 加载该 Demo.html 文件, 效果图如下:<br><img src="/upload/images/2017/05/14/webView.jpg" alt="1"></p>
<h2 id="UIWebView-UserAgent"><a href="#UIWebView-UserAgent" class="headerlink" title="UIWebView UserAgent"></a>UIWebView UserAgent</h2><h4 id="默认的-UserAgent-1"><a href="#默认的-UserAgent-1" class="headerlink" title="默认的 UserAgent"></a>默认的 UserAgent</h4><p>使用下面的代码, 可以输出 UIWebView 的默认 UserAgent.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">NSString *appName = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.appName&quot;];</div><div class="line">NSLog(@&quot;navigator.appName: %@&quot;, appName);</div><div class="line">    </div><div class="line">NSString *userAgent = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.userAgent&quot;];</div><div class="line">NSLog(@&quot;navigator.userAgent %@&quot;, userAgent);</div></pre></td></tr></table></figure>
<p>打印输出结果和 WKWebView 的结果一致.</p>
<h4 id="设置自定的-UserAgent"><a href="#设置自定的-UserAgent" class="headerlink" title="设置自定的 UserAgent"></a>设置自定的 UserAgent</h4><p>设置一个 key 为 @”UserAgent” 的本地存储即可.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[[NSUserDefaults standardUserDefaults] registerDefaults:@&#123;@&quot;UserAgent&quot;:@&quot;CustomUserAgent-UIWebView&quot;&#125;];</div><div class="line">    </div><div class="line">NSString *appName = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.appName&quot;];</div><div class="line">NSLog(@&quot;navigator.appName: %@&quot;, appName);</div><div class="line">    </div><div class="line">NSString *userAgent = [self.webView stringByEvaluatingJavaScriptFromString:@&quot;navigator.userAgent&quot;];</div><div class="line">NSLog(@&quot;navigator.userAgent %@&quot;, userAgent);</div></pre></td></tr></table></figure>
<p>这样就改变了 UIWebView 的默认 UserAgent 了.</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>应用最低版本支持 iOS7/8 的开发者们, 可以考虑 UIWebView 和 WKWebView 并存的开发模式. iOS9及以上的开发者你们, 可以完全放弃 UIWebView, 大胆的拥抱 WKWebView 了.</p>
<p>移植 UIWebView 到 WKWebView 的成本不算大.<br>如果你现在有时间, 可以开始着手做这些事了.前端和客户端需要考虑之前交互那部分的逻辑, 即 JS 调用 Native 或者 Native 调用 JS 的需要做些调整, 因为 WKWebView 的调用方式和 UIWebView 不一样了, 前端页面要考虑版本兼容性.</p>
<p>新的 WKWebView 虽然存在一些坑, 但是使用它亦是大势所趋, 正所谓 存在即合理, 你没有理由拒绝它.</p>
<p>后续, 我会写一写在 WKWebView 上面遇到的一些问题, 分享给大家.</p>
<p>之前我也写过一篇文章, 是关于 UIWebView 缓存的, 不妨, 你也瞅瞅 [iOS: 聊聊 UIWebView 缓存].</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> UIWebView WKWebView UserAgent </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocos2d-js: 首次在 Mac 上面运行]]></title>
      <url>/2017/05/14/Cocos2d-js-%E9%A6%96%E6%AC%A1%E5%9C%A8-Mac-%E4%B8%8A%E9%9D%A2%E8%BF%90%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h2 id="Cocos2d-js-介绍"><a href="#Cocos2d-js-介绍" class="headerlink" title="Cocos2d-js 介绍"></a>Cocos2d-js 介绍</h2><p>如果你是刚接触 Cocos2d-js 开发的人, 一定会被 Cocos2d-js 和 Cocos2d-HTML5 以及 Cocos2d-x 搞得晕头转向.</p>
<p>下面简单介绍一下 Cocos2d-js 的前世今生.</p>
<p>目前 Cocos2d-x 支持使用 C++、Lua、Javascript 语言来进行开发，且内置 JavaScript 引擎，通过 C++ 解析 Javascript 去执行.</p>
<p>Cocos2d-HTML5 是使用 JavaScript 进行开发，最终运行在浏览器里的.</p>
<p>v3.0 后，Cocos2d-HTML5 和 Cocos2d-x JSBinding 被合到了一起，称作 Cocos2d-JS.</p>
<p>与 Cocos2d-HTML5 不同的是，Cocos2d-js 开发的程序不仅能运行在浏览器里，还能编译运行在 Mac OSX, Windows, iOS, Android 平台上.</p>
<p>从 Cocos2d-x v3.7 版本之后, js 版本被合并到 Cocos2d-x 中了.</p>
<p>具体可以看 <a href="https://github.com/cocos2d/cocos2d-x/blob/cocos2d-x-3.7/docs/RELEASE_NOTES.md" target="_blank" rel="noopener">Release Note</a> 这个说明.</p>
<p>这个版本的发布日期是在2015年7月21.</p>
<p>原来的 Cocos2d-js 版本在 [GitHub] 上面已经停止更新了.</p>
<p>说明如下:</p>
<blockquote>
<p>2/27/2016 - This repository is no longer active.<br>Cocos2d-JS was merged with Cocos2d-x starting at version 3.7.</p>
</blockquote>
<p>可以看出, Cocos2d-js 原来独立的项目被合并到了 Cocos2d-x 中了.</p>
<p>现在使用 Cocos2d-x 不仅可以创建 cpp 项目和 lua 项目, 也可以创建 js 项目了.</p>
<p>官方有说明的:</p>
<blockquote>
<p>Cocos2d-JS is Cocos2d-x engine’s JavaScript version that includes Cocos2d-html5 and Cocos2d-x JavaScript Bindings.</p>
</blockquote>
<p>至于什么是 Cocos2d-x JavaScript Bindings, 大家自行 google, 这里不赘述.</p>
<p>关系图大概如下:<br><img src="/upload/images/2017/05/14/3.png" alt="1"></p>
<p>Cocos2d-x 框架图<br><img src="/upload/images/2017/05/14/4.jpg" alt="1"></p>
<h2 id="搭建-Cocos2d-js-开发环境"><a href="#搭建-Cocos2d-js-开发环境" class="headerlink" title="搭建 Cocos2d-js 开发环境"></a>搭建 Cocos2d-js 开发环境</h2><h4 id="1-下载-Cocos2d-x"><a href="#1-下载-Cocos2d-x" class="headerlink" title="1.下载 Cocos2d-x"></a>1.下载 Cocos2d-x</h4><p>可以在官网下载最新的 Release 包, 点击 下载地址, 我下载的最新包是 cocos2d-x-3.15.</p>
<p>下载解压即可, 这里我把 cocos2d-x-3.15 修改为 cocos2d-x.</p>
<h4 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h4><p>在 cocos2d-x 目录, 执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python setup.py</div></pre></td></tr></table></figure>
<p>执行完毕后, 可以看到 ‘~/.bash_profile` 的内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># Add environment variable COCOS_CONSOLE_ROOT for cocos2d-x</div><div class="line">export COCOS_CONSOLE_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/tools/cocos2d-console/bin</div><div class="line">export PATH=$COCOS_CONSOLE_ROOT:$PATH</div><div class="line"># Add environment variable COCOS_TEMPLATES_ROOT for cocos2d-x</div><div class="line">export COCOS_TEMPLATES_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/templates</div><div class="line">export PATH=$COCOS_TEMPLATES_ROOT:$PATH</div></pre></td></tr></table></figure>
<p>这里, 没有看到我的 <code>ANT_ROOT</code> 路径, 其实该脚本智能的找到 <code>/usr/local/Cellar/ant/1.9.7/bin</code>, 但是我不想使用这个 ant, 想使用自己下载的 ant, 修改该文件如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># Add environment variable COCOS_CONSOLE_ROOT for cocos2d-x</div><div class="line">export COCOS_CONSOLE_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/tools/cocos2d-console/bin</div><div class="line">export PATH=$COCOS_CONSOLE_ROOT:$PATH</div><div class="line"># Add environment variable ANT_ROOT for cocos2d-x</div><div class="line">export ANT_ROOT=/Users/mark/developer/apache/apache-ant-1.10.1/bin</div><div class="line">export PATH=$ANT_ROOT:$PATH</div><div class="line"># Add environment variable COCOS_TEMPLATES_ROOT for cocos2d-x</div><div class="line">export COCOS_TEMPLATES_ROOT=/Users/mark/workspace/mzProjs/c2dx/cocos2d-x/templates</div><div class="line">export PATH=$COCOS_TEMPLATES_ROOT:$PATH</div></pre></td></tr></table></figure>
<p>最后执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>使环境变量立即生效.</p>
<h4 id="创建-js-工程"><a href="#创建-js-工程" class="headerlink" title="创建 js 工程"></a>创建 js 工程</h4><p>cd 到任意目录, 执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos new HelloJs -l js -d .</div></pre></td></tr></table></figure>
<blockquote>
<p>new HelloJs 表示工程名字为 HelloJs<br>-l js 表示创建 js 工程.<br>-d . 表示在当前路径创建该工程</p>
</blockquote>
<p>可以看到下面创建工程的过程:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Copy template into /Users/mark/workspace/mzProjs/c2dx/works/HelloJs</div><div class="line">Copying directory from cocos root directory...</div><div class="line">Copying files from template directory...</div><div class="line">Copying Cocos2d-x files...</div><div class="line">Rename project name from &apos;HelloJavascript&apos; to &apos;HelloJs&apos;</div><div class="line">Replace the project name from &apos;HelloJavascript&apos; to &apos;HelloJs&apos;</div><div class="line">Replace the project package name from &apos;org.cocos2dx.hellojavascript&apos; to &apos;org.cocos2dx.HelloJs&apos;</div><div class="line">Replace the Mac bundle id from &apos;org.cocos2dx.hellojavascript&apos; to &apos;org.cocos2dx.HelloJs&apos;</div><div class="line">Replace the iOS bundle id from &apos;org.cocos2dx.hellojavascript&apos; to &apos;org.cocos2dx.HelloJs&apos;</div></pre></td></tr></table></figure>
<p>工程目录:<br><img src="/upload/images/2017/05/14/1.jpg" alt="1"></p>
<h4 id="工程发布"><a href="#工程发布" class="headerlink" title="工程发布"></a>工程发布</h4><p>将上面的工程编译发布.</p>
<p>编译发布:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos compile -p web -m release</div></pre></td></tr></table></figure>
<blockquote>
<p>-p web 表示编译 web 平台.<br>-m release 表示编译为 release 模式.</p>
</blockquote>
<p>编译输出:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Building mode: release</div><div class="line">running: &apos;/Users/mark/developer/apache/apache-ant-1.10.1/bin/ant -f /Users/mark/workspace/mzProjs/c2dx/works/HelloJs/publish/html5/build.xml&apos;</div><div class="line">Buildfile: /Users/mark/workspace/mzProjs/c2dx/works/HelloJs/publish/html5/build.xml</div><div class="line">compile:</div><div class="line">   [jscomp] Compiling 156 file(s) with 42 extern(s)</div><div class="line">   [jscomp] 0 error(s), 0 warning(s)</div><div class="line">BUILD SUCCESSFUL</div><div class="line">Total time: 8 seconds</div></pre></td></tr></table></figure>
<p>如果你在这一步编译报错, 或者执行不下去, 一般都是没有在环境变量中配置好 ant.</p>
<p>编程成功后, 会多出 publish 目录:<br><img src="/upload/images/2017/05/14/2.jpg" alt="1"></p>
<h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><p>执行 cocos run 命令来在系统默认的浏览器上面运行.</p>
<p>cd 到工程目录, 执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos run -p web -s . --port 9009</div></pre></td></tr></table></figure>
<p>这样会帮我们在本地启动一个 webServer 来运行示例, 直接打开了默认使用的浏览器.</p>
<blockquote>
<p>-s: 表示当前需要执行的源码路径<br>–port: 指定端口, 如果不指定端口, 默认在 8000 端口执行.</p>
</blockquote>
<p>更多 cocos run 命令可以, 使用下面的命令来查看帮助:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cocos run --help</div></pre></td></tr></table></figure>
<h2 id="本地运行-index-html-的问题"><a href="#本地运行-index-html-的问题" class="headerlink" title="本地运行 index.html 的问题"></a>本地运行 index.html 的问题</h2><p>你可以用火狐浏览器(FireFox)打开本地工程目录中的 index.html, 即可看到运行效果了.<br>FireFox 应该是在本地启动了一个 WebServer 来运行.</p>
<p>在 chrome 中直接运行 index.html, 无法看到最终效果, 一直卡在 loading 界面.</p>
<p>打开 inspect, 可以看到报错信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">XMLHttpRequest cannot load file:/xx/publish/html5/project.json.</div><div class="line">Cross origin requests are only supported for protocol schemes: http, data, chrome, chrome-extension, https.</div></pre></td></tr></table></figure>
<p>网上有人讨论过过问题, 说是 chrome 跨域不支持 file 协议，那么即使你允许 chrome 跨域支持, 直接运行本地的 index.html 还是报错:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">game.min.js:54 Uncaught TypeError: Cannot read property &apos;modules&apos; of null</div></pre></td></tr></table></figure>
<p>在 MacOS 上面允许 chrome 跨域访问文件的方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open /Applications/Google\ Chrome.app --args --allow-file-access-from-files</div></pre></td></tr></table></figure>
<p>可以看出, 在这方面, FireFox 做的比 chrome 好.</p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><blockquote>
<p>更新时间 2017-10-15</p>
</blockquote>
<p>在微信公众号上面看到 <a href="https://mp.weixin.qq.com/s?__biz=MjM5ODAxNTM2NA==&amp;mid=2659646056&amp;idx=1&amp;sn=239871c3775ae12af5edf9ac2381b0b2" target="_blank" rel="noopener">一招教你辨别 Cocos、Cocos2d、Cocos2d-x</a> 这篇文章, 大家可以看看, 对 cocos 会有更加深入的了解.</p>
]]></content>
      
        <categories>
            
            <category> Game </category>
            
        </categories>
        
        
        <tags>
            
            <tag> cocos cocos2d-js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小小篮球队]]></title>
      <url>/2017/04/29/%E5%B0%8F%E5%B0%8F%E7%AF%AE%E7%90%83%E9%98%9F/</url>
      <content type="html"><![CDATA[<p><img src="/upload/images/2017/04/29/hua.jpeg" alt="1"></p>
<p>篮球, 我最喜欢的一项体育运动, 大学的业余时间基本都”泡”在球场, 压根不知道什么是累.</p>
<p>毕业后的第一份工作, 做的比较开心, 大家年龄相仿, 兴趣相投.</p>
<p>小小的团队, 没有任何纷争, 大家互相学习, 氛围及其融洽.</p>
<p>每个周五我们几个人都会提前下班去打一场篮球, 完事后, 一起喝点小酒, 那日子甭提有多他NND的惬意.</p>
<p>公司解散后, 大家各奔东西, 事过境迁, 各有各的工作和生活, 聚在一起的日子也是少之又少, 以前的日子只能怀念了.</p>
<p>人总需要一些非工作之外的兴趣, 整天围绕着工作, 早晚都会疯掉.</p>
<p>有些人喜欢泡泡图书馆, 有些人喜欢打打游戏, 有些人喜欢跑跑步, 有些人喜欢唱唱歌…</p>
<p>不管怎么样, 你需要某种爱好, 来润色一下你的生活, 我选择了篮球运动.</p>
<p>下面, 来说说篮球队中典型的几种人, 大家结合自己的工作和生活, 思考一下吧~</p>
<h2 id="单打独斗"><a href="#单打独斗" class="headerlink" title="单打独斗"></a>单打独斗</h2><p>篮球运动是一项集体运动, 需要每个人发挥自己应有的水平, 才能发挥团队的力量.</p>
<p>有些人喜欢单打独斗, 完全不考虑团队中其他成员的感受, 只要球到了他手中, 其他人只能看他的表演, 任凭你喊破嗓子, 他也不会理你.</p>
<p>这种人, 其实是有一定能力的人, 不然也不会也不可能这么做, 只是他们觉得凭一己之力就可以让大家高正无忧了, 自己没有思考过这样做是不是最合适的.</p>
<p>久而久之, 大家看着他的”表演”, 再也不想发挥了, 单打独斗的人慢慢的也累了, 最后大家都身心疲惫, 球队被对方轻而易举地打败.</p>
<h2 id="“指挥官”"><a href="#“指挥官”" class="headerlink" title="“指挥官”"></a>“指挥官”</h2><p>球队中有一种人, 自己不努力, 总是喜欢颐指气使, 经常听到他们说这样的话:</p>
<blockquote>
<p>你快点跑呀, 积极点…<br>死死地防着他, 不要让他进攻, 快…<br>你传球给我呀, 让你别着急, 好了吧, 输了吧…<br>输了, 都怪你…</p>
</blockquote>
<p>听到这些话, 再好脾气的人估计都难以接受, 脾气不好的直接开始打他了吧!</p>
<p>这种人最不受待见, 也最遭人唾骂, 这种人在实际工作中, 可能是你的领导.</p>
<h2 id="偷懒的"><a href="#偷懒的" class="headerlink" title="偷懒的"></a>偷懒的</h2><p>篮球运动的确很消耗体力, 如果在万箭齐发的时刻, 有人故意掉链子, 那将是功亏一篑.</p>
<p>大家在打球的时候, 都在为”荣誉”而战, 但是偏偏有人会使点小心眼, 能少跑一步就少跑一步, 能放对方走就放对方走, 绝对不伤害对方一毛一线. 明明可以稍微努力一下, 就可以拿到篮板, 偏偏让对方比自己还矮小的轻而易举的拿走了篮板.</p>
<p>要知道比自己矮小的那个人, 只是努力的跳了一下.</p>
<p>球场上虽然不是让你拼个你死我活, 不要求你全力以赴, 但是尽力而为总是要有的, 这是一种态度.</p>
<p>在实际工作中, 这种”队友”比比皆是, 但是不一定遭人恨, 有些还是很招人喜欢的, 毕竟他们没有抢你的功劳, 处处让着你, 没有他们的这些所谓的付出, 哪能衬托出你的光芒.</p>
<h2 id="鼓励你的"><a href="#鼓励你的" class="headerlink" title="鼓励你的"></a>鼓励你的</h2><p>上面说的都是一些”负能量”, 大家一笑而过吧.下面说点正能量的.</p>
<p>在球队中, 还有一种这样的人, 他会察言观色, 觉得你累了, 就告诉大家: “我们应该节奏慢一点, 缓冲一下.”,</p>
<p>当你手感不好的时候, 他会告诉你, 没事, 多来几次就好了, 不要有压力.</p>
<p>当你防守遇到困难时, 他会默默的给你补防, 给你接力, 最大程度的给你信心.</p>
<p>当大家士气不高的时候, 他会站出来投几个漂亮的球, 抑或给对方一个完美的盖帽, 并且鼓励大家不要放弃, 给大家信心, 做大家坚固的后盾.</p>
<p>这种人除了自己有一定的能力外, 还能顾全大局, 并且可以帮助队友, 帮助团队渡过难关, 确实难得.</p>
<h2 id="渴望进步的"><a href="#渴望进步的" class="headerlink" title="渴望进步的"></a>渴望进步的</h2><p>球队中, 存在一些新人, 或者是渴望自己能投出漂亮弧线球的人, 他们比不上那些资历老且经验丰富的前辈, 但是他们内心有一份信念: “我要变强!”.</p>
<p>这种人, 跟你讨论球技, 虚心向你学习一切可以提高球技的方法, 即使在观众席上, 他们也能聚精会神的观看, 自己领悟其中的奥妙. 只要你约他出来打球, 他都在第一时间出现在球场, 因为他不想放弃学习的机会.</p>
<p>久而久之, 这些人会变得越来越厉害, 通过不断的学习和摸索, 有了一套自己的打法, 步伐稳健, 再也不是那种接球不稳, 传球频频失误的”毛头小子”了.</p>
<p>这种人, 值得我们去挖掘和鼓励, 如果你正好是那个资历老且经验丰富的前辈, 就传授”真经”给他们吧.<br>对于你来说, 有人愿意跟你学习, 跟你分享, 也是美事一桩.</p>
<p>何乐而不为呢?</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>不管你遇到什么样的队友, 如果你愿意, 请胸怀宇宙(当然不是 孙连城 那种啊).</p>
<p>万事万物皆有联系, 愿你能偶尔放下手中的工作, 去选择和爱上另一种乐趣.</p>
<p>五一放假了, 祝大家节日快乐!</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 思考 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS: 应用内打开 AppStore]]></title>
      <url>/2017/04/15/iOS-%E5%BA%94%E7%94%A8%E5%86%85%E6%89%93%E5%BC%80-AppStore/</url>
      <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>我们的 App 需要在 AppStore 上面打开某个 App 或者游戏, 目的最常见的有:</p>
<blockquote>
<p>1.评分评论.<br>2.推荐下载(App 或者游戏).</p>
</blockquote>
<p>很多开发者知道打开 AppStore 只需要一句代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[UIApplication sharedApplication] openURL:[NSURL URLWithString:@&quot;itunes app url&quot;]];</div></pre></td></tr></table></figure>
<p>这样就很简单的打开 AppStore 了, 但是产品经理问了, 能在我们应用内打开 AppStore 吗?</p>
<p>你当时懵逼了吗?</p>
<p>不要懵逼, 以后只要遇到类似这种问题, 你就问产品经理哪个 APP 这样做了?<br>然后, 他就给你看别人家的效果, 你就理直气壮地说: “别人可以做到的, 我们也可以做到!”.</p>
<p>应用内打开 AppStore 也很简单.<br>在 iOS6之后, 苹果已经给我们提供了 <a href="https://developer.apple.com/reference/storekit/skstoreproductviewcontroller#//apple_ref/doc/c_ref/SKStoreProductViewController" target="_blank" rel="noopener">SKStoreProductViewController</a>, 大家看一下文档, 你就笑了.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SKStoreProductViewController</div><div class="line">/* View controller to display iTunes Store product information */</div></pre></td></tr></table></figure>
<h2 id="应用内打开-AppStore"><a href="#应用内打开-AppStore" class="headerlink" title="应用内打开 AppStore"></a>应用内打开 AppStore</h2><p>这里我以在应用内打开 <code>微信</code> 为例子.</p>
<p>效果图如下:<br><img src="/upload/images/2017/04/15/eff_appstore_1.png" alt="1"></p>
<p>从效果图可以看出, 用户在自己的应用内打开 AppStore 后, 不仅可以下载或者打开微信, 还可以直接评论评分, 简直爽(也难怪产品经理这么干).</p>
<p>那我们说一下如何实现上面的效果.</p>
<p>实现方案和步骤</p>
<p>1.包含头文件 <code>#import &lt;StoreKit/StoreKit.h&gt;</code></p>
<p>2.实现 <code>SKStoreProductViewControllerDelegate</code></p>
<p>具体代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">- (void)openAppFromAppStore:(NSString *)appid</div><div class="line">&#123;</div><div class="line">    if (nil == appid || appid.length &lt;= 0) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 加个 loading</div><div class="line">    </div><div class="line">    SKStoreProductViewController *store = [[SKStoreProductViewController alloc] init];</div><div class="line">        </div><div class="line">        store.delegate = self;</div><div class="line">        </div><div class="line">        NSDictionary&lt;NSString *, id&gt; *parameters = @&#123;SKStoreProductParameterITunesItemIdentifier: appid&#125;;</div><div class="line">    </div><div class="line">        [store loadProductWithParameters:parameters completionBlock:^(BOOL result, NSError *error) &#123;</div><div class="line">        </div><div class="line">            // 结束 loading</div><div class="line">            </div><div class="line">            if (error) &#123;</div><div class="line">                </div><div class="line">                NSLog(@&quot;error %@ with userInfo %@&quot;, error, [error userInfo]);</div><div class="line">                </div><div class="line">                // 提示用户发生了错误</div><div class="line">                </div><div class="line">                // 或者通过 URL 打开 AppStore App.</div><div class="line">                </div><div class="line">                // NSString *url = @&quot;https://itunes.apple.com/in/app/wechat/id414478124?mt=8&quot;;</div><div class="line">                </div><div class="line">                //[[UIApplication sharedApplication] openURL:[NSURL URLWithString:url]];</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                </div><div class="line">                [self presentViewController:store animated:YES completion:^&#123;</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">&#125;</div><div class="line">/// 用户点击取消会执行该方法</div><div class="line">- (void)productViewControllerDidFinish:(SKStoreProductViewController *)viewController</div><div class="line">&#123;</div><div class="line">    [viewController dismissViewControllerAnimated:YES completion:^&#123;</div><div class="line">        </div><div class="line">    &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用(@”414478124” 是 微信 的)方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self openAppFromAppStore:@&quot;414478124&quot;];</div></pre></td></tr></table></figure>
<h2 id="修改-AppStore-的导航栏"><a href="#修改-AppStore-的导航栏" class="headerlink" title="修改 AppStore 的导航栏"></a>修改 AppStore 的导航栏</h2><p>产品经理说, 既然你已经实现了上面的功能, 看看能不能把 AppStore 的导航栏改一个牛逼的颜色, 就像上面的大红色.</p>
<p>~</p>
<p>可以, 干!</p>
<p>直接上代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">- (void)openAppFromAppStore:(NSString *)appid</div><div class="line">&#123;</div><div class="line">    if (nil == appid || appid.length &lt;= 0) &#123;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 加个 loading</div><div class="line">    </div><div class="line">    // 导航栏上面的文字和图片颜色变了</div><div class="line">    [[UINavigationBar appearance] setTintColor:[UIColor greenColor]];</div><div class="line">    </div><div class="line">    // 导航栏的大红色出来了</div><div class="line">    [[UINavigationBar appearance] setBarTintColor:[UIColor redColor]];</div><div class="line">    </div><div class="line">    [UINavigationBar appearanceWhenContainedIn:[SKStoreProductViewController class], nil];</div><div class="line">    </div><div class="line">    SKStoreProductViewController *store = [[SKStoreProductViewController alloc] init];</div><div class="line">        </div><div class="line">        store.delegate = self;</div><div class="line">        </div><div class="line">        NSDictionary&lt;NSString *, id&gt; *parameters = @&#123;SKStoreProductParameterITunesItemIdentifier: appid&#125;;</div><div class="line">    </div><div class="line">        [store loadProductWithParameters:parameters completionBlock:^(BOOL result, NSError *error) &#123;</div><div class="line">            </div><div class="line">            // 结束 loading</div><div class="line">            </div><div class="line">            if (error) &#123;</div><div class="line">                </div><div class="line">                NSLog(@&quot;error %@ with userInfo %@&quot;, error, [error userInfo]);</div><div class="line">                </div><div class="line">                // 提示用户发生了错误</div><div class="line">                </div><div class="line">                // 或者通过 URL 打开 AppStore App.</div><div class="line">            &#125;</div><div class="line">            else &#123;</div><div class="line">                </div><div class="line">                [self presentViewController:store animated:YES completion:^&#123;</div><div class="line">                &#125;];</div><div class="line">            &#125;</div><div class="line">        &#125;];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.打开 <code>SKStoreProductViewController</code> 目前只能使用 <code>present</code> 方式, 不可以使用 <code>push</code> 的方式.</p>
<p>否则会报错:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Terminating app due to uncaught exception &apos;SKUnsupportedPresentationException&apos;,</div><div class="line">//reason: &apos;SKStoreProductViewController must be used in a modal view controller&apos;</div></pre></td></tr></table></figure>
<p>2.加入 loading</p>
<p>在应用内打开 AppStore, 为了不让用户傻等(网络不好的时候, 打开很慢), 可以加入 loading, 缓解一下用户急躁的心情.</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> AppStore iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[找合伙人, 不易]]></title>
      <url>/2017/03/26/%E6%89%BE%E5%90%88%E4%BC%99%E4%BA%BA-%E4%B8%8D%E6%98%93/</url>
      <content type="html"><![CDATA[<p>早在高中时期, 读过 &lt;三言&gt; 中的 &lt;警世通言&gt;, 第一章写的是 <code>俞伯牙摔琴谢知音</code>, 讲的是钟子期和俞伯牙的故事.</p>
<p>读完之后, 整个人都觉得难受, 心理有说不出的滋味, 眼泪竟夺眶而出.</p>
<p>流传的这首诗, 可以感受下.</p>
<blockquote>
<p>摔碎瑶琴凤尾寒，子期不在对谁弹！<br>春风满面皆朋友，欲觅知音难上难。<br>势利交怀势利心，斯文谁复念知音！<br>伯牙不作钟期逝，千古令人说破琴。</p>
</blockquote>
<p>自己工作之后, 对 <code>欲觅知音难上难</code> 这句话尤为赞同.</p>
<p>年少轻狂的你, 藏着要改变世界的心, 残酷的现实会抹去你凸起的棱角, 岁月和环境会让你变得越发不安.</p>
<p>不安的世界, 让你茫然.</p>
<p>于是, 点上一支烟, 回顾折腾的人生, 笑叹: 别人笑我太疯癫, 我笑他人看不穿.</p>
<p>可惜, 我们不是唐寅, 没有这份洒脱和奔放, 毕竟时代也大相径庭.</p>
<p>~ 好了, 回到现实中来.</p>
<p>刚毕业, 你会把主要精力放在如何把工作做好, 维持自己的生计上面, 如果能跟身边的大牛学到一些专业知识, 再苦再累, 你都是开心的.</p>
<p>渐渐地, 你发现知识(专业的和非专业的知识)真是要活到老学到老, 永无止境, 无法像武侠片里面演得那样移花接木, 斗转星移. 呜呼, 脚踏实地的做好本职工作, 顺便能拓展一下自己的交际圈, 扩大自己的知识面, 还是很有必要的.</p>
<p>各行各业都有非常突出的人才, 很多时候, 我们只能望洋兴叹.</p>
<p>如果你能遇到一个肯与你分享和交流, 或者是愿意将自己的实践分享给你的人, 那你算是上辈子积了大德了. 阿弥陀佛!</p>
<p>我把这样的人称之为 <code>恩人</code>, 也算是 <code>知音</code>.</p>
<p>以前, 很多朋友会问如果将来自己开公司, 是否愿意接受现在的自己, 我的回答是一定接受. 如果还有人问这个问题, 我会另外再追加一个问题:</p>
<blockquote>
<p>如果你开公司, 你是否愿意接受和你现在一起工作的同事?或者说你是否愿意让他成为你的合伙人?</p>
</blockquote>
<p>这些问题, 看似玩笑, 实则很现实很残酷, 一旦你决定要去做成某件事情, 立志要实现自己的抱负和理想的时候, 你的立场会和其他人千差外别.首先要考虑的是要和谁一起共谋事, 才能真正的帮到自己, 并且也能帮到别人.因为选择是双向的, 能找到和你一拍即合的人, 也确实不易.但愿任何一个渴望成功并付出行动的人, 能找到自己的合伙人, 找到自己的知音.</p>
<p>真正的成功者, 不是沉浸在多少人让你成功的喜悦中, 而是你让多少人和你一起分享了成功的喜悦的人.</p>
<p>说到这里, 本人只是想说明白一个道理, 送给即将或者已经在职场奋斗的人:</p>
<blockquote>
<p>踏踏实实的做事并没有错, 但是找到值得 “托付终身” 的人确实不易, 你现在能做的只有用知识来武装自己, 让自己变强.</p>
</blockquote>
<p>在职场中, 你会遇到很多让你不爽的人或者事. 记住, 要做到 <code>对事不对人</code>, 不要太委屈自己, 大丈夫能屈能伸, 该出手时就出手, 没有什么大不了.</p>
<p>如果真的觉得有些人或者有些事不值得你浪费时间, 就离它们远点. 惹不起但可以躲得起, 你说呢?</p>
<p>酌一壶小酒, 老夫聊发少年狂!</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 思考 生活 合伙人 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[让自己变强]]></title>
      <url>/2017/03/10/%E8%AE%A9%E8%87%AA%E5%B7%B1%E5%8F%98%E5%BC%BA/</url>
      <content type="html"><![CDATA[<p>当你读到这篇文章的时候, 我其实还不知道『怎么让自己变强』.<br>具体说, 就是没有一套让你或者让他变强的武林秘籍.</p>
<p>只能结合自己经历的事, 分享给大家, 希望能感同身受!</p>
<p>这几天加班加地有点猛, 浑然不知周末轮回了.<br>心理总是在念叨, 好久没有在公众号涂鸦了, 手痒痒了.<br>趁今晚回来早(22:30回到家), 就动笔了.</p>
<p>『让自己变强』, 这句话说着很简单, 但不是任何人都能意识到这几个字带来的力量.</p>
<p>在「明朝那些事儿」中有这么一段:</p>
<blockquote>
<p>我们经常会产生一个疑问，那就是怎样才能获得其他国家及其人民的尊重，在世界上风光自豪一把，其实答案很简单——国家强大。</p>
</blockquote>
<p>看到这里, 感触颇深.</p>
<h2 id="在团队中成长"><a href="#在团队中成长" class="headerlink" title="在团队中成长"></a>在团队中成长</h2><p>团队成长的主观条件是团队的成员要成长, 不然团队哪里来的成长.</p>
<p>如果你是作为一个团队或者小组的负责人, 会面临各种各样的问题, 比如需要跟团队以外的部门谈合作, 需要跟老板汇报工作, 还要处理内部的问题等等诸如此类!</p>
<p>我觉得安邦需安内, 也就是说要先搞定团队内部的各种事物, 人是比较复杂的感情动物, 你不好也不能控制别人的情绪. 所以, 需要对事不对人!你不能说, 你看他长得不好看, 就知道工作做不好类似的话.</p>
<p>这样一说, 基本两个人就结下了梁子.迟早会爆发.</p>
<p>首先, 要给团队成员希望, 让大家都认识到有统一的目标.</p>
<p>其次, 让每个人给出工作和实行计划, 制定自己的考核目标.对做出突出贡献的成员奖励, 每个人都需要得到尊重, 而奖励是最大的尊重.</p>
<p>最后, 加强与团队成员之间的沟通, 互相帮助, 让大家能够相互信任和鼓励, 良好有效的沟通, 事半功倍.</p>
<p>作为团队负责人, 肯定希望手下的人各个骁勇善战, 百战百胜, 但是现实中很难做到, 其实也没有必要.<br>西游记告诉我们, 唐僧带领的团队才是最好的团队.</p>
<h2 id="少埋怨多给予帮助"><a href="#少埋怨多给予帮助" class="headerlink" title="少埋怨多给予帮助"></a>少埋怨多给予帮助</h2><p>每个人生活和工作的环境不一样, 在不同的地点不同的时间面对不同的事情, 都会有不同的看法.</p>
<p>世界上任何一种选择, 都是命中注定的, 没有人能强迫你去做出任何错误的选择, 除了你自己.</p>
<p>在自己所处的环境中, 要么你能改变环境使其来适应自己, 要么就离开这个自己不适应的环境, 不要去抱怨.</p>
<p>唉声叹气, 不仅仅影响自己的工作效率和生活质量, 还会影响到别人.<br>成天在抱怨, 觉得谁谁都不行, 自己才是最牛逼的, 日行见久, 你就是那个充满负能量的人, 当别人觉悟到的时候, 就会离你而去, 岂不咎由自取?!我想这也是微信朋友圈只有点赞没有非点赞的原因吧!</p>
<p>如果觉得自己的同事或者朋友有所欠缺, 就想办法去帮助他, 鼓励他, 把你认为一些好的方式和方法传授给他. 说不定哪天因为你的一句话或者一个方法, 他就走上人生巅峰了, 哈哈!</p>
<p>从现在开始, 忘记埋怨, 给予别人更多的帮助和鼓励.</p>
<h2 id="培养自己的专注力"><a href="#培养自己的专注力" class="headerlink" title="培养自己的专注力"></a>培养自己的专注力</h2><p>专注力, 是一个很神奇的东西.</p>
<p>如果一个人没有专注力, 很难再有所突破, 据说牛顿是在做梦的时候, 发明了很多折磨广大青少年的牛顿定律的.</p>
<p>每个人在自己的行业上, 多少都有短板. 有短板是情有可原的, 但是首先你得认识到自己的短板, 然后再指定计划去突破他.</p>
<blockquote>
<p>要想进步, 必须面对自己的不足.</p>
</blockquote>
<p>比如, 工作上需要你学会某种技术, 如果在某个时间点, 你没有学会, 可能就会丢掉饭碗, 你就会不顾一切的去学习, 直到学会会用为止. 这个过程, 你就是在专注这件事情, 回头想想咬咬牙, 还是可以办到的, 没有什么大不了的.</p>
<p>每天给自己一点时间, 专注去做一件事情, 坚持下来, 你会发现, 学习和进步就是 feel feel 倍儿爽.</p>
<h2 id="最后分享给大家一句话"><a href="#最后分享给大家一句话" class="headerlink" title="最后分享给大家一句话:"></a>最后分享给大家一句话:</h2><blockquote>
<p>不能改变别人的时候, 试着改变一下自己或许就能把事情变通了.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 生活 反思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat8 配置 HTTPS]]></title>
      <url>/2017/02/15/Tomcat8-%E9%85%8D%E7%BD%AE-HTTPS/</url>
      <content type="html"><![CDATA[<p>博客 [Tomcat8 域名配置] 介绍了如何在本地配置 Tomcat8 的域名以及通过域名来访问对应的资源.</p>
<p>今天继续跟大家分享如何配置 Tomcat8 的 HTTPS (单向认证), 本篇博客的主要内容如下:</p>
<blockquote>
<p>1.配置 Tomcat 的 HTTPS.<br>2.通过 HTTPS + ip 的方式来访问资源.<br>3.通过 HTTPS + 域名 的方式来访问资源.</p>
</blockquote>
<h2 id="配置要求"><a href="#配置要求" class="headerlink" title="配置要求"></a>配置要求</h2><p>1.安装了 JDK, 并配置了其相关的环境变量.可参考 Mac 配置 JDK1.8.</p>
<p>2.安装了 Tomcat8, 并配置了其相关的环境变量.可参考 Mac 配置 Tomcat8.</p>
<h2 id="生成证书"><a href="#生成证书" class="headerlink" title="生成证书"></a>生成证书</h2><blockquote>
<p>获取证书可以去购买, 这里是在本地机器搭建, 使用 JDK 自带的工具 keytool 生成即可.</p>
</blockquote>
<p>打开 mac 终端, 执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -v -genkey -alias tomcat -keyalg RSA -keystore ~/Desktop/tomcat.keystore</div></pre></td></tr></table></figure>
<p>紧接着, 会出现一些让你输入信息的交互信息, 第一个是让你输入 密钥库密码(口令), 我输入的是 1234567, 其他信息可以任意输入内容, 在最后一步, 问你生成的 密钥口令 和 密钥库的口令 是否相同, 如果相同就直接回车, 我这里是直接回车的, 即密码相同, 都是 1234567.</p>
<p>这样就生成了所谓的证书.</p>
<h2 id="配置-HTTPS"><a href="#配置-HTTPS" class="headerlink" title="配置 HTTPS"></a>配置 HTTPS</h2><blockquote>
<p>通过修改 server.xml 来配置.</p>
</blockquote>
<p>将 tomcat.keystore 文件复制到 Tomcat 的 conf 目录.</p>
<p>修改 server.xml 文件, 增加一个 Connector, 内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;  </div><div class="line">           maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;  </div><div class="line">           clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;conf/tomcat.keystore&quot; keystorePass=&quot;1234567&quot;/&gt;</div></pre></td></tr></table></figure>
<p>注意, keystoreFile 是证书文件, keystorePass 是密码, 这里配置一定要正确.</p>
<h2 id="配置-HTTPS-IP"><a href="#配置-HTTPS-IP" class="headerlink" title="配置 HTTPS + IP"></a>配置 HTTPS + IP</h2><p>配置一个虚拟主机, 修改 server.xml 文件, 增加 Host:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;192.168.1.103&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">    &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">    &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</div><div class="line">&lt;/Host&gt;</div></pre></td></tr></table></figure>
<p>配置 name=”192.168.1.103” 是你本机的 ip 地址.</p>
<p>这个在博客 [iOS: 聊聊 UIWebView 缓存] 中有详细的介绍, 这里不再赘述.</p>
<p>启动 Tomcat, 进行测试.</p>
<p>这里需要到 Tomcat 的 bin 目录下, 执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo startup.sh</div></pre></td></tr></table></figure>
<p>启动成功后, 打开浏览器, 输入: <a href="https://192.168.1.103:8443/test.html" target="_blank" rel="noopener">https://192.168.1.103:8443/test.html</a>, 这个时候, 会弹出如下的警告(提示不安全):<br><img src="/upload/images/2017/02/15/1.png" alt="1"></p>
<p>直接点击 Advanced 后再点击 Proceed to 192.168.1.103:8443(unsafe) 处理即可看到页面内容.</p>
<h2 id="配置-HTTPS-域名"><a href="#配置-HTTPS-域名" class="headerlink" title="配置 HTTPS + 域名"></a>配置 HTTPS + 域名</h2><p>修改 server.xml, 增加 Connector:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11NioProtocol&quot;  </div><div class="line">          maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;https&quot; secure=&quot;true&quot;  </div><div class="line">          clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;conf/tomcat.keystore&quot; keystorePass=&quot;1234567&quot;/&gt;</div></pre></td></tr></table></figure>
<p>修改 server.xml, 增加 Host:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;www.mark.com&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">    &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">    &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</div><div class="line">&lt;/Host&gt;</div></pre></td></tr></table></figure>
<p>修改 /etc/host 文件, 增加:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 www.mark.com</div></pre></td></tr></table></figure>
<p>启动 Tomcat, 在 bin 目录, 执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">shutdown.sh</div><div class="line">sudo startup.sh</div></pre></td></tr></table></figure>
<p>启动成功后, 打开浏览器, 输入 <a href="https://www.mark.com:8443/test.html" target="_blank" rel="noopener">https://www.mark.com:8443/test.html</a>, 如果弹出警告, 可以像如上处理来显示页面内容.</p>
<p>如果你这里配置失败了, 请修改一下端口号, 如将 8443 改为 8433.<br>重启 Tomcat 在试一下.</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>Apache 官方文档: <a href="https://tomcat.apache.org/tomcat-8.0-doc/ssl-howto.html" target="_blank" rel="noopener">ssl-howto</a></p>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat Java Apache </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tomcat8 域名配置]]></title>
      <url>/2017/02/13/Tomcat8-%E5%9F%9F%E5%90%8D%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>博客 [Mac 配置 Tomcat8] 介绍了在 Mac 下安装和启动 Tomcat.</p>
<p>接下来介绍, 如何在本地配置 Tomcat8 的域名.</p>
<p>网上有很多关于 Tomcat 如何配置单域名或者多域名的文章, 很多都是翻译或者复制别人的, 根本没有实践过, 害人不浅!</p>
<p>结合自己的实践, 把配置的整个过程分享给大家, 希望能帮到你.</p>
<p>下面进入正题.</p>
<h2 id="修改端口"><a href="#修改端口" class="headerlink" title="修改端口"></a>修改端口</h2><p>在 Tomcat 的安装(其实是解压的)目录 /conf 下有 server.xml 文件.</p>
<p>将下面内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">              connectionTimeout=&quot;20000&quot;</div><div class="line">              redirectPort=&quot;8443&quot; /&gt;</div></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;</div><div class="line">              connectionTimeout=&quot;20000&quot;</div><div class="line">              redirectPort=&quot;8443&quot; /&gt;</div></pre></td></tr></table></figure>
<h2 id="添加-web-项目"><a href="#添加-web-项目" class="headerlink" title="添加 web 项目"></a>添加 web 项目</h2><blockquote>
<p>这一步主要是为了后面测试.</p>
</blockquote>
<p>很简单, 在 Tomcat 的安装目录 webapps 下面新建 test 文件夹, 里面创建一个 html 文件即可.<br>这里将其命名为 test.html.</p>
<p>test.html 内容见后面的附录即可.</p>
<h2 id="配置域名"><a href="#配置域名" class="headerlink" title="配置域名"></a>配置域名</h2><blockquote>
<p>增加虚拟主机配置.还需要修改 server.xml 文件.</p>
</blockquote>
<p>在 server.xml 文件中, 在标签 <engine> 和</engine> 之间增加下面的内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;www.mark.com&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">    &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">    &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</div><div class="line">&lt;/Host&gt;</div></pre></td></tr></table></figure>
<p>其中, www.mark.com 是我自己任意取的一个域名, docBase=”test” 是指向上面新建的 test 目录.</p>
<h2 id="配置域名解析"><a href="#配置域名解析" class="headerlink" title="配置域名解析"></a>配置域名解析</h2><p>由于部署在本地, 需要修改 host.</p>
<p>修改 /etc/host 文件, 需要 sudo 权限:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/host</div></pre></td></tr></table></figure>
<p>增加如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 www.mark.com</div></pre></td></tr></table></figure>
<h2 id="验证配置"><a href="#验证配置" class="headerlink" title="验证配置"></a>验证配置</h2><blockquote>
<p>这一步, 验证配置是否生效.</p>
</blockquote>
<p>启动 Tomcat, 这里的操作比较特殊, 需要 sudo 权限来启动 Tomcat, 否则会报下面的错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">org.apache.coyote.AbstractProtocol.init Failed to initialize end point associated with ProtocolHandler [&quot;http-nio-80&quot;]</div><div class="line"> java.net.SocketException: Permission denied</div></pre></td></tr></table></figure>
<p>因为, 只有 root 用户才可以使用 1024 以下的端口号.</p>
<p>正确姿势:</p>
<p>cd 进入 Tomcat 的 bin 目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/Tomcat/bin</div></pre></td></tr></table></figure>
<p>执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo startup.sh</div></pre></td></tr></table></figure>
<p>成功后, 打开浏览器, 输入 <a href="http://www.mark.com/test.html" target="_blank" rel="noopener">http://www.mark.com/test.html</a>, 即可看到页面内容.</p>
<h2 id="配置另一个域名"><a href="#配置另一个域名" class="headerlink" title="配置另一个域名"></a>配置另一个域名</h2><p>可以配置另外的一个域名, 比如 www.ithome.com, 即多增加一个虚拟主机配置.</p>
<p>在 server.xml 增加:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;www.ithome.com&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">    &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">    &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</div><div class="line">&lt;/Host&gt;</div></pre></td></tr></table></figure>
<p>配置 DNS, 同理修改 etc/host 文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 www.ithome.com</div></pre></td></tr></table></figure>
<p>可以看出, 在浏览器输入 <a href="http://www.ithome.com/test.html" target="_blank" rel="noopener">http://www.ithome.com/test.html</a> 和 <a href="http://www.mark.com/test.html" target="_blank" rel="noopener">http://www.mark.com/test.html</a> 效果是一样的.</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><p>test.html 文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">&lt;p&gt;</div><div class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">Now I input another line, with fancy&lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</div><div class="line">&lt;/u&gt;.&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">Now I input another line, with fancy &lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</div><div class="line">&lt;/u&gt;.&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">    mark.zhang is an itman.</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.button &#123;</div><div class="line">    background-color: #4CAF50;</div><div class="line">    border: none;</div><div class="line">    color: white;</div><div class="line">    padding: 15px 32px;</div><div class="line">    text-align: center;</div><div class="line">    text-decoration: none;</div><div class="line">    display: inline-block;</div><div class="line">    font-size: 86px;</div><div class="line">    margin: 50px 200px 100px 300px;</div><div class="line">    cursor: pointer;</div><div class="line">    border-radius: 15;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;p&gt;</div><div class="line">   &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot; class=&quot;button&quot;&gt;Try it&lt;/button&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;script&gt;</div><div class="line">   function myFunction() &#123;</div><div class="line">       alert(&quot;Blog: www.veryitman.com&quot;);</div><div class="line">   &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ATS: HTTPS 认证]]></title>
      <url>/2017/02/08/ATS-HTTPS-%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<p>在 <a href="http://www.veryitman.com/2017/02/06/ATS-HTTP-HTTPS-%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/" target="_blank" rel="noopener">ATS: HTTP/HTTPS 协议介绍</a> 中介绍了一些关于 HTTP/HTTPS 的概念以及相关的基本知识.</p>
<p>今天来聊聊关于 HTTPS 的认证方式和过程.</p>
<p>说 HTTPS 认证前, 先了解几个概念.</p>
<h2 id="关于加密的几个概念"><a href="#关于加密的几个概念" class="headerlink" title="关于加密的几个概念"></a>关于加密的几个概念</h2><h4 id="1-SSL-协议加密方式"><a href="#1-SSL-协议加密方式" class="headerlink" title="1. SSL 协议加密方式"></a>1. SSL 协议加密方式</h4><blockquote>
<p>SSL 既用了对称加密, 也用了非对称加密(公钥加密).</p>
</blockquote>
<p>在建立传输链路时, SSL 首先对对称加密的密钥使用公钥进行非对称加密, 链路建立好之后，SSL 对传输内容使用对称加密.</p>
<p>下面是两种加密方式的对比:</p>
<p>1.对称加密</p>
<blockquote>
<p>对称加密采用了对称密码编码技术，它的特点是文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥，这种方法在密码学中叫做 <code>对称加密算法</code>，对称加密算法使用起来简单快捷，密钥较短，且破译困难，除了数据加密标准（DES），另一个对称密钥加密系统是国际数据加密算法（IDEA），它比 DES 的加密性好，而且对计算机功能要求也没有那么高.<br>IDEA 加密标准由 PGP（Pretty Good Privacy）系统使用.</p>
</blockquote>
<p>该加密方式, 速度快, 可加密内容较大, 用来加密会话过程中的消息.</p>
<p>2.公钥加密(非对称加密)</p>
<blockquote>
<p>1976年，美国学者 Dime 和 Henman 为解决信息公开传送和密钥管理问题，提出一种新的密钥交换协议，允许在不安全的媒体上的通讯双方交换信息，安全地达成一致的密钥，这就是“公开密钥系统”.<br>相对于 <code>对称加密算法</code> 这种方法也叫做 <code>非对称加密算法</code>.<br>与对称加密算法不同，非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）. 公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密.<br>因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</p>
</blockquote>
<p>该加密方式, 速度较慢, 能提供更好的身份认证技术, 用来加密对称加密的密钥.</p>
<h4 id="2-数字证书"><a href="#2-数字证书" class="headerlink" title="2. 数字证书"></a>2. 数字证书</h4><p>一种文件的名称，好比一个机构或人的签名，能够证明这个机构或人的真实性. 其中包含的信息，用于实现上述功能.</p>
<h4 id="3-加密和认证"><a href="#3-加密和认证" class="headerlink" title="3. 加密和认证"></a>3. 加密和认证</h4><p>加密是指通信双方为了防止铭感信息在信道上被第三方窃听而泄漏，将明文通过加密变成密文，如果第三方无法解密的话，就算获得密文也无能为力.</p>
<p>认证是指通信双方为了确认对方是值得信任的消息发送或接受方，而不是使用假身份的非法者，采取的确认身份的方式.</p>
<p>只有同时进行了加密和认证才能保证通信的安全，因此在 SSL 通信协议中这两者(加密和认证)都被使用.</p>
<p>加密一般使用 <code>对称加密算法</code> 和 <code>不对称加密算法</code>，不对称加密最常见的算法就是 RSA.</p>
<h4 id="4-消息摘要"><a href="#4-消息摘要" class="headerlink" title="4. 消息摘要"></a>4. 消息摘要</h4><p>这个技术主要是为了避免消息被篡改.</p>
<p>消息摘要是把一段信息, 通过某种算法, 得出一串字符串.<br>这个字符串就是消息的摘要，如果消息被篡改(发生了变化), 那么摘要也一定会发生变化(如果2个不同的消息生成的摘要是一样的，那么这就叫发生了碰撞).</p>
<p>消息摘要的算法主要有 MD5 和 SHA，在证书领域，一般都是用 SHA(安全哈希算法).</p>
<p>数字证书、加密和认证、消息摘要三个技术结合起来，就是在 HTTPS 中广泛应用的证书(certificate), 证书本身携带了加密/解密的信息，并且可以标识自己的身份，也自带消息摘要.</p>
<h2 id="HTTPS-认证方式"><a href="#HTTPS-认证方式" class="headerlink" title="HTTPS 认证方式"></a>HTTPS 认证方式</h2><p>分为单向和双向认证.</p>
<h3 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h3><blockquote>
<p>单向认证较简单, 只需要服务端校验服务端的证书的合法性.</p>
</blockquote>
<p>该认证过程使用下面的流程图来表示:<br><img src="/upload/images/2017/02/08/HTTPS_Single.png" alt="1"></p>
<h3 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h3><p>双向认证和单向认证原理基本一致，但是需要双方都校验对方的证书的合法性.</p>
<p>该认证过程使用下面的流程图来表示:<br><img src="/upload/images/2017/02/08/HTTPS_Double.png" alt="1"></p>
<h3 id="随机数的产生"><a href="#随机数的产生" class="headerlink" title="随机数的产生"></a>随机数的产生</h3><p>不管是单向认证, 还是双向认证, 都有随机数的产生和发送.</p>
<p>下图是随机数的产生流程图:<br><img src="/upload/images/2017/02/08/HTTPS_Random.png" alt="1"></p>
<p>生成对话密钥, 一共需要三个随机数.</p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p><strong>推荐在线流程图工具</strong>:</p>
<p><a href="http://www.veryitman.com/2017/02/08/www.processon.com" target="_blank" rel="noopener">ProcessOn</a>.</p>
<p><strong>推荐博文</strong>:</p>
<p>1.<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html" target="_blank" rel="noopener">图解SSL/TLS协议</a></p>
<p>2.<a href="http://www.ruanyifeng.com/blog/2011/02/seven_myths_about_https.html" target="_blank" rel="noopener">HTTPS的七个误解(译文)</a></p>
<p>3.<a href="http://blog.sina.com.cn/s/blog_56d8ea900100bzpr.html" target="_blank" rel="noopener">对称加密和非对称加密介绍和区别</a></p>
<p>本文中参考了上面文章的部分内容, 感谢这些作者.</p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> HTTP HTTPS TLS SSL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ATS: HTTP/HTTPS 协议介绍]]></title>
      <url>/2017/02/06/ATS-HTTP-HTTPS-%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<p>苹果在2017年要求 App 必须支持 HTTPS, 不过, 这个要求, 最后又被苹果自己延期了.</p>
<p>我只能说, 苹果的开发哥哥们真会玩…</p>
<p>该系列博客介绍 iOS 上面的 ATS 以及相关的 HTTPS 知识, 分为三篇来分享.</p>
<p>本篇是第一篇.</p>
<p>第二篇: <a href="http://www.veryitman.com/2017/02/08/ATS-HTTPS-%E8%AE%A4%E8%AF%81/" target="_blank" rel="noopener">ATS: HTTPS 认证</a></p>
<p>今天先简单了解一下 HTTPS 以及相关的知识.</p>
<h2 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h2><p>先了解一下相关的常用名词.</p>
<h4 id="1-HTTP"><a href="#1-HTTP" class="headerlink" title="1.HTTP"></a>1.HTTP</h4><p>HyperText Transfer Protocol, 超文本传输协议.</p>
<h4 id="2-HTTPS"><a href="#2-HTTPS" class="headerlink" title="2.HTTPS"></a>2.HTTPS</h4><p>Hyper Text Transfer Protocol over Secure Socket Layer, 安全的超文本传输协议.</p>
<h4 id="3-SSL"><a href="#3-SSL" class="headerlink" title="3.SSL"></a>3.SSL</h4><p>Secure Socket Layer, 安全套接字层.</p>
<h4 id="4-TLS"><a href="#4-TLS" class="headerlink" title="4.TLS"></a>4.TLS</h4><p>Transport Layer Security, 传输层安全.其前身就是 SSL.</p>
<h4 id="5-ATS"><a href="#5-ATS" class="headerlink" title="5.ATS"></a>5.ATS</h4><p>App Transport Security, 应用传输安全.</p>
<h2 id="协议介绍"><a href="#协议介绍" class="headerlink" title="协议介绍"></a>协议介绍</h2><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><p>HyperText Transfer Protocol, 超文本传输协议，是互联网上使用最广泛的一种协议，所有 WWW 文件必须遵循的标准.</p>
<p>HTTP 协议传输的数据都是未加密的, 也就是明文的, 因此使用 HTTP 协议传输隐私信息非常不安全.</p>
<p>默认使用 TCP 端口为 80.</p>
<h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><p>安全的超文本传输协议, <code>Hyper Text Transfer Protocol over Secure Socket Layer</code>, 网景公式设计了 SSL(Secure Socket Layer) 协议用于对 HTTP 协议传输的数据进行加密，保证会话过程中的安全性.</p>
<p>默认使用 TCP 端口为 443.</p>
<h3 id="拆分-HTTPS"><a href="#拆分-HTTPS" class="headerlink" title="拆分 HTTPS"></a>拆分 HTTPS</h3><h4 id="SSL-协议加密方式"><a href="#SSL-协议加密方式" class="headerlink" title="SSL 协议加密方式"></a>SSL 协议加密方式</h4><p>SSL 协议即用到了对称加密也用到了非对称加密(公钥加密)，在建立传输链路时，SSL 首先对对称加密的密钥使用公钥进行非对称加密，链路建立好之后，SSL 对传输内容使用对称加密.</p>
<blockquote>
<p>1.对称加密<br>速度高，可加密内容较大，用来加密会话过程中的消息.</p>
<p>2.公钥加密<br>加密速度较慢，但能提供更好的身份认证技术，用来加密对称加密的密钥.</p>
</blockquote>
<h4 id="HTTP-SSL"><a href="#HTTP-SSL" class="headerlink" title="HTTP+SSL"></a>HTTP+SSL</h4><p>HTTPS, 可以看做是 HTTP+SSL, 所以重点在 SSL 上面.</p>
<h4 id="HTTPS-1"><a href="#HTTPS-1" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>在 HTTP (超文本传输协议)基础上提出的一种安全的 HTTP 协议，因此可以称为安全的超文本传输协议。</p>
<p>HTTP 协议直接放置在 TCP 协议之上，而 HTTPS 提出在 HTTP 和 TCP 中间加上一层加密层.</p>
<p>从发送端看，这一层负责把 HTTP 的内容加密后送到下层的 TCP，从接收方看，这一层负责将 TCP 送来的数据解密还原成 HTTP 的内容.</p>
<h4 id="SSL-Secure-Socket-Layer"><a href="#SSL-Secure-Socket-Layer" class="headerlink" title="SSL(Secure Socket Layer)"></a>SSL(Secure Socket Layer)</h4><p>是 Netscape 公司设计的主要用于 WEB 的安全传输协议.<br>它在 HTTPS 协议栈中负责实现上面提到的加密层.</p>
<p>一个 HTTPS 协议栈大致是这样的：<br><img src="/upload/images/2017/02/06/HTTP+SSL.png" alt="1"></p>
<h4 id="TLS"><a href="#TLS" class="headerlink" title="TLS"></a>TLS</h4><p>HTTPS，也称作 HTTP over TLS.</p>
<p>TLS(传输层安全, Transport Layer Security) 的前身是 SSL，TLS 1.0 通常被标示为 SSL 3.1，TLS 1.1 为 SSL 3.2，TLS 1.2 为 SSL 3.3.</p>
<blockquote>
<p>苹果 ATS(App Transport Security), 要求支持 HTTPS 的 TLS 版本最低为 V1.2.</p>
</blockquote>
<p>下图描述了在 TCP/IP 协议栈中 TLS(各子协议）和 HTTP 的关系:<br><img src="/upload/images/2017/02/06/tcp-ip-model.png" alt="1"></p>
<p>其中 Handshake protocol，Change Ciper Spec protocol 和 Alert protocol 组成了 SSL Handshaking Protocols.</p>
<p>SSL 和 TLS 的发展历史:</p>
<blockquote>
<p>1994年，NetScape 公司设计了 SSL 协议（Secure Sockets Layer）的 1.0 版，但是未发布.</p>
<p>1995年，NetScape 公司发布 SSL 2.0 版，很快发现有严重漏洞.</p>
<p>1996年，SSL 3.0 版问世，得到大规模应用.</p>
<p>1999年，互联网标准化组织 ISOC 接替 NetScape 公司，发布了 SSL 的升级版 TLS 1.0 版.</p>
<p>2006年和2008年，TLS 进行了两次升级，分别为 TLS 1.1 版和 TLS 1.2 版.最新的变动是2011年 TLS 1.2 的修订版.</p>
<p>TLS 1.3 改动会比较大，目前还在草案阶段.</p>
</blockquote>
<h2 id="HTTP-和-HTTPS-区别"><a href="#HTTP-和-HTTPS-区别" class="headerlink" title="HTTP 和 HTTPS 区别"></a>HTTP 和 HTTPS 区别</h2><p>HTTPS 和 HTTP 的区别主要为以下四点:</p>
<blockquote>
<ol>
<li><p>HTTPS 协议需要到 CA 申请证书，一般免费证书很少，需要交费.</p>
</li>
<li><p>HTTP 是超文本传输协议，信息是明文传输，HTTPS 则是具有安全性的 SLL/TLS 加密传输协议(非对称加密).</p>
</li>
<li><p>HTTP 和 HTTPS 不同的连接方式，用的端口也不一样，前者是 80，后者是 443.</p>
</li>
<li><p>HTTP 的连接很简单，是无状态的；<br>HTTPS 协议是由 SSL+HTTP 协议构建的可进行加密传输、身份认证的网络协议，比 HTTP 协议安全.</p>
</li>
</ol>
</blockquote>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ATS HTTP HTTPS SSL TLS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RN: Yarn]]></title>
      <url>/2017/02/05/RN-Yarn/</url>
      <content type="html"><![CDATA[<p>React Native 正式版已经更新到 0.41.1 了.</p>
<p>最近使用 <code>react-native-cli</code> 来创建 React Native 工程, 提示如下信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This will walk you through creating a new React Native project in /Users/mark/workspace/mzProjs/ReactNative/LatestRN</div><div class="line">Installing react-native...</div><div class="line">Consider installing yarn to make this faster: https://yarnpkg.com</div></pre></td></tr></table></figure>
<p>其实 Yarn 也一直在更新, 最新版本 v0.20.0.</p>
<p>官网对应的有中文版本和中文文档, 可以 <a href="http://yarnpkg.top/" target="_blank" rel="noopener">点此进入</a>.</p>
<h2 id="Yarn-简介"><a href="#Yarn-简介" class="headerlink" title="Yarn 简介"></a>Yarn 简介</h2><p>一句话介绍:</p>
<blockquote>
<p>A new package manager for JavaScript</p>
</blockquote>
<p>Yarn 是一个依赖管理工具，它能够管理你的代码，并与全世界的开发者分享你的代码.</p>
<p>Yarn 是高效、安全和可靠.</p>
<blockquote>
<p>1.高效: 使用了缓存, 可以很快的获取已经 download 的包.<br>2.安全: 在代码被执行之前，会使用CheckSum算法验证每一个依赖包的完整性.<br>3.可靠: 在不同平台(windows/mac/linux)只要是同一份配置文件, 执行结果是一样的.</p>
</blockquote>
<p>还有很多特性:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Offline Mode</div><div class="line">If you&apos;ve installed a package before, you can install it again without any internet connection.</div><div class="line">Deterministic</div><div class="line">The same dependencies will be installed the same exact way across every machine regardless of install order.</div><div class="line">Network Performance</div><div class="line">Yarn efficiently queues up requests and avoids request waterfalls in order to maximize network utilization.</div><div class="line">Same Packages</div><div class="line">Install any package from npm and keep your package workflow the same.</div><div class="line">Network Resilience</div><div class="line">A single request failing won&apos;t cause an install to fail. Requests are retried upon failure.</div><div class="line">Flat Mode</div><div class="line">Resolve mismatching versions of dependencies to a single version to avoid creating duplicates.</div></pre></td></tr></table></figure>
<p>Yarn 能够让你使用其他开发者开发的代码，让你更容易的开发软件.</p>
<p>代码是通过依赖包 (有时也被称为组件). 在每一个依赖中会定义一个 package.json 文件，用来描述这个依赖包中所有要被分享的代码.</p>
<p>Yarn 是开源的, 点击 <a href="http://yarnpkg.top/" target="_blank" rel="noopener">Github</a> 了解更多.</p>
<p>对比 npm 和 yarn, 可以阅读文章:<br><a href="https://www.sitepoint.com/yarn-vs-npm/" target="_blank" rel="noopener">Yarn vs npm: Everything You Need to Know</a></p>
<p>中文版:<br><a href="https://gold.xitu.io/entry/580de578bf22ec0058330692" target="_blank" rel="noopener">译 Yarn vs npm: 你需要知道的一切</a></p>
<h2 id="安装-Yarn"><a href="#安装-Yarn" class="headerlink" title="安装 Yarn"></a>安装 Yarn</h2><p>具体安装的教程, 可以参考官网的 <a href="http://yarnpkg.top/Installation.html" target="_blank" rel="noopener">安装教程</a>.</p>
<p>在 MacOS 上面使用 Homebrew 安装很方便, 两个命令即可完成.</p>
<p>下面具体说说操作步骤.</p>
<p>强烈开发同事购买一个 VPN, 这个年头没有 VPN, 日子不好过.</p>
<p>1.更新 brew</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew update --verbose</div></pre></td></tr></table></figure>
<p>最后加上参数 <code>--verbose</code>, 不然等待的过程很煎熬, 没有任何提示信息.</p>
<p>2.安装 yarn</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install yarn</div></pre></td></tr></table></figure>
<p>在安装过程中, 如果提示如下信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Please note by default only English locale support is provided. If you need</div><div class="line">full locale support you should either rebuild with full icu:</div><div class="line">  `brew reinstall node --with-full-icu`</div><div class="line">or add full icu data at runtime following:</div><div class="line">  https://github.com/nodejs/node/wiki/Intl#using-and-customizing-the-small-icu-build</div></pre></td></tr></table></figure>
<p>可以重新安装已经安装的 node, 执行命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall node --with-full-icu</div></pre></td></tr></table></figure>
<p>在执行上面安装命令的时候, 如果卡住不动或者很久, Ctrl+C 终止当前的操作, 重新操作一遍即可.</p>
<p>安装成功后, 可以查看安装的版本信息, 执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn --verbose</div></pre></td></tr></table></figure>
<p>会显示如下信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">yarn install v0.20.0</div><div class="line">verbose Performing &quot;GET&quot; request to &quot;https://yarnpkg.com/latest-version&quot;.</div><div class="line">[1/4] 🔍  Resolving packages...</div><div class="line">success Already up-to-date.</div><div class="line">✨  Done in 0.29s.</div></pre></td></tr></table></figure>
<p>使用 brew 安装 Yarn 后, 不需要设置环境变量.</p>
<h2 id="Yarn-与-React-Native"><a href="#Yarn-与-React-Native" class="headerlink" title="Yarn 与 React Native"></a>Yarn 与 React Native</h2><p>在 <code>React Native 0.37</code> 版本中已经加入了对 Yarn 的支持.</p>
<p>可以在 React Native 的官方的这篇 <a href="https://facebook.github.io/react-native/blog/2016/11/08/introducing-button-yarn-and-a-public-roadmap.html" target="_blank" rel="noopener">Blog</a> 找到更多信息.</p>
<p>用 Yarn 创建 React Native 工程</p>
<p>既然 RN 已经支持了 Yarn, 那么就可以使用 Yarn 来管理和创建 RN 工程了.</p>
<p>使用 Yarn, 必须满足几个条件:</p>
<blockquote>
<p>1.react-native-cli 的版本不能小于 1.2.0 版本.<br>2.React Natvie 必须是 0.37 及以上的版本.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native init MZLatestRN</div></pre></td></tr></table></figure>
<p>当你安装好 Yarn 后, 执行上面的命令可以出现提示信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">This will walk you through creating a new React Native project in ~/workspace/Projs/ReactNative/MZLatestRN</div><div class="line">Using yarn v0.20.0</div><div class="line">Installing react-native...</div></pre></td></tr></table></figure>
<p>可以看出, RN 会使用 Yarn 来创建工程.</p>
<p>其中, <code>~/workspace/Projs/ReactNative</code> 是我本地的工作目录. <code>MZLatestRN</code> 是要创建的 RN 工程名称.</p>
<p>如果你的网络好的话, 大概1分钟就可以创建成功.</p>
<p>工程目录:<br><img src="/upload/images/2017/02/05/1.png" alt="1"></p>
<p>可以看出多了 <code>yarn.lock</code> 文件.</p>
<p>Yarn 还在茁壮成长, 希望它越来越好, 更多的使用和工作原理可以参考 <a href="https://yarnpkg.com/docs" target="_blank" rel="noopener">官方 Doc</a>, 介绍的很详细.</p>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ReactNative iOS Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[安装 PHP 遇到的问题]]></title>
      <url>/2017/02/02/%E5%AE%89%E8%A3%85-PHP-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在博客 <a href="http://www.veryitman.com/2017/02/02/PHP-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/" target="_blank" rel="noopener">PHP 开发准备</a> 介绍了安装并部署 PHP 程序到 Nginx.</p>
<p>今天分享在安装中遇到的问题和其他工具的安装, 以及常用的操作, 包括 MySQL, Nginx 等.</p>
<h2 id="pecl-安装"><a href="#pecl-安装" class="headerlink" title="pecl 安装"></a>pecl 安装</h2><blockquote>
<p>PEAR 是 PHP 扩展与应用库(PHP Extension and Application Repository) 的缩写。它是一个 PHP 扩展及应用的一个代码仓库，简单地说，PEAR 就是 PHP 的 CPAN.</p>
<p>PECL (PHP Extension Community Library)，PHP 的扩展库，它提供了一系列已知的扩展库，由 C++ 等其他语言编写而成，以 .so 形式出现，.so 为共享库, 是 shared object, 用于动态连接的, 和 dll 差不多，为比 PEAR 更快，但是与 PEAR 不同的是，PECL 需要在服务器上配置并被注册到主机中.</p>
<p>最直接的表述: PEAR 是 PHP 的上层扩展，PECL 是 PHP 的底层扩展.</p>
</blockquote>
<p>下面说如何安装 pecl 和 pear.</p>
<p>1.下载 pear</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -O http://pear.php.net/go-pear.phar</div></pre></td></tr></table></figure>
<p>2.安装 pear</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php -d detect_unicode=0 go-pear.phar</div></pre></td></tr></table></figure>
<p>3.执行以上命令后会进行安装过程，会有一些配置选项</p>
<p>输入1，回车，配置 pear 路径为：<code>/usr/local/pear</code><br>输入4，回车，配置命令路径为：<code>/usr/local/bin</code></p>
<p>4.回车两次，其他让其默认，安装完成.</p>
<p>5.可以通过命令检查 pear 是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pear version</div></pre></td></tr></table></figure>
<p>或者执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pecl version</div></pre></td></tr></table></figure>
<p>可以看到类似信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">PEAR Version: 1.10.1</div><div class="line">PHP Version: 5.6.27</div><div class="line">Zend Engine Version: 2.6.0</div></pre></td></tr></table></figure>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h4 id="MySQL-操作"><a href="#MySQL-操作" class="headerlink" title="MySQL 操作"></a>MySQL 操作</h4><p>基本操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mysql.server start #启动</div><div class="line">mysql.server stop  #停止</div><div class="line">mysql -u root -p   #用 user 和 pwd 连接</div><div class="line">php-fpm 相关操作</div></pre></td></tr></table></figure>
<p>1.运行 php-fpm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php-fpm -D</div></pre></td></tr></table></figure>
<p>2.关闭 php-fpm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo killall php-fpm</div></pre></td></tr></table></figure>
<p>3.查看 php-fpm 运行状态</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo lsof -Pni4 | grep LISTEN | grep php</div></pre></td></tr></table></figure>
<p>可以看到 (fpm 默认在 9000 端口)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">php-fpm  84200   root  8u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</div><div class="line">php-fpm  84201   _www  0u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</div><div class="line">php-fpm  84202   _www  0u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</div><div class="line">php-fpm  84203   _www  0u  IPv4 0x91959c43a1ea5abd  0t0  TCP 127.0.0.1:9000 (LISTEN)</div></pre></td></tr></table></figure>
<p>4.php-fpm 开机启动</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/php56/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</div></pre></td></tr></table></figure>
<h4 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h4><p>1.测试配置是否有语法错误</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -t</div></pre></td></tr></table></figure>
<p>2.启动 nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<p>3.重新加载配置|重启|停止|退出 nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx -s reload|reopen|stop|quit</div></pre></td></tr></table></figure>
<p>4.开机启动：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ln -sfv /usr/local/opt/nginx/*.plist ~/Library/LaunchAgents</div><div class="line">launchctl load ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</div></pre></td></tr></table></figure>
<p>5.nginx 监听 80 端口：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chown root:wheel /usr/local/Cellar/nginx/1.6.0_1/bin/nginx</div><div class="line">sudo chmod u+s /usr/local/Cellar/nginx/1.6.0_1/bin/nginx</div></pre></td></tr></table></figure>
<h2 id="常用目录"><a href="#常用目录" class="headerlink" title="常用目录"></a>常用目录</h2><p>因为使用了 Homebrew 安装的 PHP, 配置文件的目录不是常规的 /etc</p>
<p>这里有几个目录需要知道, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">/private/etc</div><div class="line">/usr/local/etc/php/5.6</div><div class="line">/usr/local/var/www</div></pre></td></tr></table></figure>
<h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>1.执行 sudo php-fpm -D 报 php56-intl/intl.so 加载问题</p>
<p>warning 的内容大致如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NOTICE: PHP message: PHP Warning:  PHP Startup: Unable to load dynamic library &apos;/usr/local/opt/php56-intl/intl.so&apos; - dlopen(/usr/local/opt/php56-intl/intl.so, 9): image not found in Unknown on line 0</div><div class="line">&lt;br /&gt;</div><div class="line">&lt;b&gt;Warning&lt;/b&gt;:  PHP Startup: Unable to load dynamic library &apos;/usr/local/opt/php56-intl/intl.so&apos; - dlopen(/usr/local/opt/php56-intl/intl.so, 9): image not found in &lt;b&gt;Unknown&lt;/b&gt; on line &lt;b&gt;0&lt;/b&gt;&lt;br /&gt;</div><div class="line">Unknown(0) : Warning - PHP Startup: Unable to load dynamic library &apos;/usr/local/opt/php56-intl/intl.so&apos; - dlopen(/usr/local/opt/php56-intl/intl.so, 9): image not found</div><div class="line">[31-Dec-2016 22:40:38] NOTICE: PHP message: PHP Warning:  PHP Startup: mcrypt: Unable to initialize module</div><div class="line">Module compiled with build ID=API20131226,NTS</div><div class="line">PHP    compiled with build ID=API20131226,NTS,debug</div><div class="line">These options need to match</div><div class="line"> in Unknown on line 0</div></pre></td></tr></table></figure>
<p>解决方案: 执行下面的命令, 即可解决.方案来源 <a href="https://github.com/Homebrew/homebrew-php/issues/2544" target="_blank" rel="noopener">Github</a>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall --build-from-source php56-intl</div></pre></td></tr></table></figure>
<p>2.执行 sudo php-fpm -D 报 PHP Startup: mcrypt: Unable to initialize module</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">31-Dec-2016 22:56:51] NOTICE: PHP message: PHP Warning:  PHP Startup: mcrypt: Unable to initialize module</div><div class="line">Module compiled with build ID=API20131226,NTS</div><div class="line">PHP    compiled with build ID=API20131226,NTS,debug</div><div class="line">These options need to match</div><div class="line"> in Unknown on line 0</div><div class="line">&lt;br /&gt;</div><div class="line">&lt;b&gt;Warning&lt;/b&gt;:  PHP Startup: mcrypt: Unable to initialize module</div><div class="line">Module compiled with build ID=API20131226,NTS</div><div class="line">PHP    compiled with build ID=API20131226,NTS,debug</div><div class="line">These options need to match</div><div class="line"> in &lt;b&gt;Unknown&lt;/b&gt; on line &lt;b&gt;0&lt;/b&gt;&lt;br /&gt;</div><div class="line">Unknown(0) : Warning - PHP Startup: mcrypt: Unable to initialize module</div><div class="line">Module compiled with build ID=API20131226,NTS</div><div class="line">PHP    compiled with build ID=API20131226,NTS,debug</div><div class="line">These options need to match</div></pre></td></tr></table></figure>
<p>解决方案:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall --build-from-source php56-intl</div></pre></td></tr></table></figure>
<p>3.连接 mysql</p>
<p>使用 <code>mysql -u root -p</code> 连接 mysql, 提示 Can’t connect to local MySQL server through socket ‘/tmp/mysql.sock 错误.</p>
<p>解决方案: 启动 mysql</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql.server start</div></pre></td></tr></table></figure>
<p>重新连接即可.</p>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP MySql nginx php-fpm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PHP 开发准备]]></title>
      <url>/2017/02/02/PHP-%E5%BC%80%E5%8F%91%E5%87%86%E5%A4%87/</url>
      <content type="html"><![CDATA[<p><strong>注意</strong>：这篇文章是基于 Homebrew 安装 php5.6 以及 nginx 和 mysql 的介绍，安装高版本的 php 请绕行。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>亲自实践在 MacOS 上面安装 PHP5.6+MySQL+Nginx.</p>
<p>将自己遇到的问题和对应的解决方案, 分享出来, 希望能帮到你.</p>
<p>MacOS 上面搭建 PHP 开发环境, 使用 Homebrew 来安装对应的开发套件, 就更加简单了.</p>
<p>这篇博客的目的就是安装 PHP 开发环境, 并将第一个 PHP 程序部署在 Nginx 上面.</p>
<p>如果在安装和使用过程中遇到问题, 可以查看这篇博客: <a href="http://www.veryitman.com/2017/02/02/%E5%AE%89%E8%A3%85-PHP-%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/" target="_blank" rel="noopener">Mac PHP 安装遇到的问题</a>.</p>
<p>下面开始介绍具体的安装步骤.</p>
<h2 id="一-安装-Homebrew"><a href="#一-安装-Homebrew" class="headerlink" title="一. 安装 Homebrew"></a>一. 安装 Homebrew</h2><p>这个大家可以自行访问 <a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a> 了解, 这里不再涉及具体的安装过程和方法.</p>
<h2 id="二-安装-php56"><a href="#二-安装-php56" class="headerlink" title="二. 安装 php56"></a>二. 安装 php56</h2><blockquote>
<p>1.加入官方源</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">brew tap homebrew/dupes</div><div class="line">brew tap homebrew/versions</div><div class="line">brew tap homebrew/php</div></pre></td></tr></table></figure>
<blockquote>
<p>2.安装 PHP</p>
</blockquote>
<p>默认安装会运行在 Apache 下.<br>而我们要使它运行在 PHP-fpm 下，所以要增加参数:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--with-fpm --without-apache</div></pre></td></tr></table></figure>
<p>查看所有安装参数可以输入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew option php56</div></pre></td></tr></table></figure>
<p>进行查看，参考安装指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">brew install php56 \</div><div class="line">--without-snmp \</div><div class="line">--without-apache \</div><div class="line">--with-debug \</div><div class="line">--with-fpm \</div><div class="line">--with-intl \</div><div class="line">--with-homebrew-curl \</div><div class="line">--with-homebrew-libxslt \</div><div class="line">--with-homebrew-openssl \</div><div class="line">--with-imap \</div><div class="line">--with-mysql \</div><div class="line">--with-tidy</div></pre></td></tr></table></figure>
<p>这里使用了下面的选项:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">with-homebrew-curl</div></pre></td></tr></table></figure>
<p>我试过不带此选项, 安装 PHP56 会失败, 找不到 curl.</p>
<p>安装成功后, 可以查看版本信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">php -v</div><div class="line">php-fpm -v</div></pre></td></tr></table></figure>
<p>此时看到是的系统自带的版本.</p>
<p>下面一步是增加环境变量, 完成后在看版本信息, 即可.</p>
<blockquote>
<p>3.配置 PHP 环境变量</p>
</blockquote>
<p>配置环境变量的目的是要使用 brew 安装的 PHP 和 PHP-fpm, 不使用 MacOS 自带的 PHP 版本.</p>
<p><code>/usr/local/sbin/</code> 下面是我们 brew 安装的 PHP, 其实他是一个软连接指向:<br><code>/usr/local/Cellar/php56/5.6.27_4/sbin</code></p>
<p><code>/usr/local/bin/</code> 下面也是 brew 安装的 PHP, 指向:<br><code>/usr/local/Cellar/php56/5.6.27_4/bin</code></p>
<p>vim ~/.bash_profile 增加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=&quot;/usr/local/sbin:$PATH&quot;</div></pre></td></tr></table></figure>
<p>使其立即生效, 执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>或者重启终端.</p>
<p>如果想看系统的 PHP 版本可以这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/php -v</div></pre></td></tr></table></figure>
<blockquote>
<p>4.配置 php-fpm</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo cp /private/etc/php-fpm.conf.default /private/etc/php-fpm.conf</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vi /private/etc/php-fpm.conf</div></pre></td></tr></table></figure>
<p>找到 error_log 项，添加下面配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">error_log = /usr/local/var/log/php-fpm.log</div><div class="line">pid = /usr/local/var/run/php-fpm.pid</div></pre></td></tr></table></figure>
<p>否则会报:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">FPM initialization failed</div></pre></td></tr></table></figure>
<h2 id="三-安装-nginx"><a href="#三-安装-nginx" class="headerlink" title="三. 安装 nginx"></a>三. 安装 nginx</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install nginx</div></pre></td></tr></table></figure>
<p>创建文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mkdir -p /usr/local/var/logs/nginx</div><div class="line">mkdir -p /usr/local/etc/nginx/sites-available</div><div class="line">mkdir -p /usr/local/etc/nginx/sites-enabled</div><div class="line">mkdir -p /usr/local/etc/nginx/conf.d</div><div class="line">mkdir -p /usr/local/etc/nginx/ssl</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo mkdir -p /var/www</div><div class="line">sudo chown :staff /var/www</div><div class="line">sudo chmod 775 /var/www</div><div class="line">vi /var/www/info.php</div><div class="line">vi /var/www/index.html</div><div class="line">vi /var/www/403.html</div><div class="line">vi /var/www/404.html</div></pre></td></tr></table></figure>
<p>改变 nginx.conf 配置文件</p>
<p>该配置文件在 <code>/usr/local/etc/nginx/nginx.conf</code> 下面.</p>
<p>我的配置:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">worker_processes  1;</div><div class="line"> </div><div class="line">error_log  /usr/local/etc/nginx/logs/error.log debug;</div><div class="line">pid        /usr/local/var/run/nginx.pid;</div><div class="line"> </div><div class="line">events &#123;</div><div class="line">    worker_connections  256;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">http &#123;</div><div class="line">    include             mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line"> </div><div class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</div><div class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</div><div class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</div><div class="line"> </div><div class="line">    access_log  /usr/local/etc/nginx/logs/access.log  main;</div><div class="line"> </div><div class="line">    sendfile            on;</div><div class="line"> </div><div class="line">    keepalive_timeout   65;</div><div class="line"> </div><div class="line">    index index.html index.php;</div><div class="line"> </div><div class="line">    include /usr/local/etc/nginx/sites-enabled/*; </div><div class="line">    include /usr/local/etc/nginx/conf.d/*;</div><div class="line">     server &#123;</div><div class="line">        listen       8080;</div><div class="line">        server_name  localhost;</div><div class="line">        #charset koi8-r;</div><div class="line">        #access_log  logs/host.access.log  main;</div><div class="line">        location / &#123;</div><div class="line">            root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</div><div class="line">            index  index.php index.html index.htm; #加index.php</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">    root   ~/projs/phpdev/nginx/nginx_sites/; #web的根目录</div><div class="line">    index  index.php index.html index.htm; #加index.php</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置了我的 web 目录和支持的文件.</p>
<h2 id="四-运行-PHP"><a href="#四-运行-PHP" class="headerlink" title="四. 运行 PHP"></a>四. 运行 PHP</h2><p>创建 index.php</p>
<p>启动 PHP-fpm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php-fpm</div></pre></td></tr></table></figure>
<p>或者以守护进程的方式来启动 PHP-fpm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php-fpm -D</div></pre></td></tr></table></figure>
<p>启动 Nginx</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure>
<p>编辑 index.php</p>
<p>在 web 目录(我配置的) <code>/Users/mark/workspace/mzProjs/phpdev/nginx/nginx_sites/</code> 新建文件 <code>index.php</code>.</p>
<p>index.php 里面可以编写代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!-- lang: php --&gt;</div><div class="line">&lt;!-- ~/nginx_sites/index.php --&gt;</div><div class="line">&lt;?php</div><div class="line">    echo &quot;Hello PHP&quot;;</div><div class="line">    echo &quot;&lt;/br&gt;&quot;;</div><div class="line">    </div><div class="line">    echo &quot;学习 php&quot;;</div><div class="line">    echo &quot;&lt;/br&gt;&quot;;</div><div class="line">    echo phpinfo();</div><div class="line">?&gt;</div></pre></td></tr></table></figure>
<p>打开浏览器, 你会看到下面的页面:<br><img src="/upload/images/2017/02/02/php1.png" alt="1"></p>
<p>也可以在该目录下创建其他 php 文件, 如 mark.php 文件.</p>
<p>浏览器中输入:<br><a href="http://localhost:8080/mark.php" target="_blank" rel="noopener">http://localhost:8080/mark.php</a> 可以执行相对应的文件.</p>
<p>这里的 <code>mark.php</code> 是自己新建的 php 文件.</p>
<h2 id="五-安装-MySQL"><a href="#五-安装-MySQL" class="headerlink" title="五. 安装 MySQL"></a>五. 安装 MySQL</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mysql</div></pre></td></tr></table></figure>
<p>等待安装成功后，直接启动和连接数据库。</p>
<ul>
<li>启动 mysql</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql.server start</div></pre></td></tr></table></figure>
<ul>
<li>连接 mysql</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> PHP MySql nginx php-fpm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[过年回家这几天]]></title>
      <url>/2017/01/31/%E8%BF%87%E5%B9%B4%E5%9B%9E%E5%AE%B6%E8%BF%99%E5%87%A0%E5%A4%A9/</url>
      <content type="html"><![CDATA[<p>从放假回家到现在已经一个多星期了, 感触颇多.</p>
<p>主要有以下几个感触:</p>
<blockquote>
<p>1.健康最重要.<br>2.坚持做好一件事情.<br>3.感恩.</p>
</blockquote>
<p><img src="/upload/images/2017/01/31/1.jpeg" alt="1"></p>
<h2 id="健康"><a href="#健康" class="headerlink" title="健康"></a>健康</h2><p>前两年回家, 还能见着很多长辈, 互相嘘寒问暖, 家长里短的闲聊, 如今有些已离我远去.</p>
<p>无情的疾病夺走了尚未花甲的他们, 让人不禁感叹生命的脆弱.</p>
<p>我小的时候, 很喜欢和长辈们聊天.</p>
<p>主要是他们讲, 我做一个小小的听众, 觉得他们懂得特别多, 从天文到地里, 从文学到艺术, 讲的有声有色.<br>每逢夏季, 我都会搬着小板凳, 在屋前的老树下, 纠缠他们, 逼着嚷着让他们给我讲故事, 甭提有多高兴.</p>
<p>如今, 老树犹在, 他们已不在人世.睹物思人.</p>
<p>农村大部分人, 不太关注自己的健康, 唯一衡量自己身体状况的标准就是 <code>米饭馒头能吃多少</code>.</p>
<p>很多人, 明明已经感觉到身体不适, 也不愿意去医院做检查, 就这样日积月累成疾.<br>等实在忍受不了才去医院检查, 为时已晚.</p>
<p>平时不注意自己的身体, 身体早晚都会让你注意.</p>
<p>无论平时工作再忙, 也要坚持锻炼, 没有健康的体魄, 其他的都是扯淡.</p>
<h2 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h2><p>农村这几年鼓励年轻人在家创业, 搞养殖. 有很多人放弃了打工, 回家拿着补贴开始有模有样的创业.</p>
<p>前几年回老家, 看到各种搞养殖的, 有养鸡养鸭养鹅的, 有养羊养猪养牛的, 如雨后春笋, 遍地开花.</p>
<p>但是今年回家, 看到很多荒凉的房子, 无人问津.</p>
<p>我问过几个小伙子(之前在家搞养殖的人, 最后放弃了的).他们跟我说的基本都一样, 太累了, 收益慢!<br>搞养殖, 的确很累, 也很枯燥无味, 每天和这些不会说话的动物们待在一起, 喂它们吃喝, 管他们温饱, 实在乏味.</p>
<p>另外有两个年轻人, 从开始养殖到现在已经坚持五六年了, 搞得风生水起, 家里盖起了楼房, 取了巧媳妇, 生了胖小子, 一家人其乐融融.<br>他们跟我说的基本一样, 只要坚持, 就有收获!</p>
<p>这两个坚持下来的年轻人, 他们相信自己能够把这份事业做好, 他们把别人眼中的脏活累活当做一种快乐, 一种享受!</p>
<p>刚开始, 很艰难, 他们也想过放弃, 但是又舍不得这几年的付出, 于是就坚持下来了, 并且收获了不少意想不到的知识, 不管是物质上还是精神上都得到了满足.</p>
<p>世上, 没有一帆风顺的事业.</p>
<p>只要自己喜欢, 感兴趣的行业, 就值得你去坚持.<br>如果你从内心都不感兴趣, 趁早放弃, 因为你很难坚持下来.</p>
<p>想投机取巧的成就一份事业, 只有神话故事里有吧!</p>
<p>不经一番寒彻骨, 哪得梅花扑鼻香!</p>
<h2 id="感恩"><a href="#感恩" class="headerlink" title="感恩"></a>感恩</h2><p>小的时候, 家里很拮据, 我能够把大学念完, 简直就是天意.</p>
<p>父母永远只会对我说一句话, 只要你想上学, 我们就支持到底.</p>
<p>我知道家里的经济情况, 所以在学习上也是不遗余力, 每次放学除了帮爸爸妈妈干农活, 就是完成家庭作业, 练字背书.</p>
<p>那个时候, 不知道哪来的狠劲, 即使是寒冬腊月, 也要坚持写作业, 即使是手都冻肿了, 也要练字.</p>
<p>当我接到重点高中通知书的那天, 父亲高兴的合不拢嘴, 心理充满了骄傲.</p>
<p>我能感觉到……</p>
<p>然而考上高中, 接下来就是凑钱交学费, 隔壁有个伯伯, 他说学费不够, 算他的.<br>那个时候, 大家家里都不宽裕, 能借钱给你的, 简直就是大恩人.<br>一直到现在, 我都很感激他, 每年过年回家, 我都会给伯伯买点礼物, 给个红包, 陪他聊聊天.他还开玩笑的说, 当年自己的投资, 算是有了回报了.</p>
<p>这辈子, 我们最应该感谢的是我们自己的父母, 养育我们成人, 送我们读书上学. 过年回家, 要多陪陪他们, 珍惜和他们在一起的每一刻.</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 反思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习杂谈]]></title>
      <url>/2017/01/27/%E5%AD%A6%E4%B9%A0%E6%9D%82%E8%B0%88/</url>
      <content type="html"><![CDATA[<p>今天是中国传统节日, 大年三十, 祝大家新年快乐, 身体健康, 幸福美满.</p>
<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>最近无论是朋友还是同事或者博友, 都问过我关于学习方面的事情.</p>
<p>探讨的问题大概分为如下几种:</p>
<p>怎么有效的学习新知识?<br>怎么快速掌握新知识?<br>是否有必要每天学习?<br>如何坚持学习?<br>谈到关于学习的话题, 我也不是什么专家, 更不是心理咨询师, 只是谈谈个人的一些看法和经历, 希望能给大家带来一点点的帮助.</p>
<p>不要只是嘴上说 <code>我感兴趣</code>, 如果没有驱动和目标, 兴趣永远都只是兴趣.</p>
<h2 id="你为什么学习它"><a href="#你为什么学习它" class="headerlink" title="你为什么学习它"></a>你为什么学习它</h2><p>学习知识之前, 问问自己为什么要学它? 大部分人学习新东西都是为了工作或者为了更好的工作或者为了转行或者其他目的, 也有一部分人是为了兴趣爱好.</p>
<p>这里我只谈为了工作而去学习新知识的内容, 其他方面的我自己也没有什么心得体会, 不能乱说.</p>
<p>既然为了工作或者更好的工作来学习, 那么我们就明确了目标, 如果你已经有了目标, 恭喜你, 你即将成功了.</p>
<p>有一些人说, 我学习它, 这个东西不一定哪天就有用了, 我怕将来失业.<br>这中担心不是在杞人忧天, 特别是在互联网的时代, 如果不学习很容易就落伍啦, 君担心完全在理!</p>
<p>但是, 当下你最应该考虑的是目前掌握的技能是否已经熟练了, 是否是能够独当一面了, 如果深学下去会不会更有前途? 如果是, 请你深入去学习, 不要太杞人忧天了!</p>
<p>在精钻一门学问的情况下, 可以扩大自己的知识面, 而不是 <code>吃着碗里看着锅里</code> 的, 要脚踏实地的大步向前.</p>
<h2 id="坚持学习"><a href="#坚持学习" class="headerlink" title="坚持学习"></a>坚持学习</h2><p>上面的扯淡有点多啊.回正题.</p>
<p>既然搞清楚了为什么学习它, 接下来就是搞定它.</p>
<p>你需要有坚持学习的态度和行动, 不然一切都会成为云烟. 那么当初咬牙切齿的抱负, 结果都是冲动的惩罚.</p>
<p>学习新知识的前期是很累的, 但是只要你意志足够坚定, 一定可以克服种种困难.</p>
<p>记得当初接手一个二手项目, 项目也是足够复杂, 并且有很多引擎之前都没有用过, 上面领导逼得比较紧, 没办法, 只能将其拿下, 每天晚上挑灯夜战, 在 log 的海洋里遨游.</p>
<p>很快自己掌握了新的知识, 结合项目, 不断的去调试和总结, 最终按期完成需求, 回过头想想, 想要坚持做好一件事情, 除了自身的自我约束, 还需要外界环境的 倒逼.</p>
<p>当你坚持不住的时候, 问问自己, 是否已经到了极限, 如果感到累了, 适当的放松一下, 比如出去跑个步, 打个球或者找朋友叙叙旧.</p>
<p>适当的给自己一点压力, 事半功倍.</p>
<h2 id="学习的渠道"><a href="#学习的渠道" class="headerlink" title="学习的渠道"></a>学习的渠道</h2><p>刚开始学习新知识, 大家都渴望有一些大牛能够指导自己, 或者能够从前辈那里获取一些武林秘籍, 这些都是学习的渠道.</p>
<p>有些小伙伴在学习的过程中, 会遇到各种各样的困难, 比如在学习一门知识的时候, 发现竟然还需要学习另一门新知识, 真是日了狗了!<br>到这里, 可能有些人就会情不自禁的选择了放弃, 嘴上说还在学习, 其实心里已经疲倦.</p>
<p>还有一些初学者, 他们没有什么经验, 如果主动性再差点, 动辄遇到问题就问, 根本没有过思考, 哪怕是一点点的思考都没有.其实他们不是不想搞, 就怕搞错了.仅仅是因为怕, 就戛然而止了!<br>这种人, 确实可惜, 所以他们需要更多的指导和教育.这里提醒大家, 学习知识, 不要怕犯错, 大胆的去试错, 在错误中成长, 这样你才能有所收获.</p>
<p>记得以前为了安装 linux, 我把办公室的办公电脑都格式化了, 组长差点要开除我了, 现在想想虽然挨了骂, 但是挺值得.</p>
<p>现在互联网很发达, 想学习的东西基本网上都有, 你可以没有智商, 没有情商, 但是你一定要有 <code>搜商 (搜索能力)</code>.<br>当你自己经过思考, 无法解决问题, 就去搜索相关的知识, 如果搜索也失败了, 再去请教别人, 这样你就可以从中收获意外的惊喜.</p>
<p>所以, 学习渠道的重要来源之一就是在互联网搜索, 培养自己的搜索能力很重要, 我建议大家使用谷歌浏览器, 然后使用 google 的搜索引擎, 搭建一套翻墙的 VPN, 这样你可以在知识的海洋里爽翻.</p>
<p>另外一个比较重要的学习渠道就是你认为的牛人, 向他们学习相关的学习方法, 问他们是怎么学习的, 然后结合自己的实际情况加以运用, 跟他们多交流.</p>
<h2 id="对自己’狠’一些"><a href="#对自己’狠’一些" class="headerlink" title="对自己’狠’一些"></a>对自己’狠’一些</h2><p>我之前有个坏习惯, 喜欢晚上躺在床上看视频, 这些视频可能是优酷或者腾讯视频客户端的, 也有可能是新闻类的 app 来源的视频.<br>视频只要看起来, 时间就不受控制了.第二天早晨起床也很困难.</p>
<p>最后自己把视频类和新闻类 app 全部卸载掉了, 然后把目标转移到 stackoverflow 和 github 上面.<br>那里才是程序员的世界, 只有你想不到的, 没有做不到的.</p>
<p>为了学习新知识, 你需要对自己狠一点, 每天拿点时间出来总结和学习, 一个月一个季度一年下来, 你比别人都进步了很多.</p>
<p>养成一个好习惯, 终生受益.</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 生活 反思 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS: 聊聊 UIWebView 缓存]]></title>
      <url>/2017/01/15/iOS-%E8%81%8A%E8%81%8A-UIWebView-%E7%BC%93%E5%AD%98/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在开发项目过程中, 一些若交互的页面会使用 HTML 展示.</p>
<p>在 iOS 中, 使用 UIWebView 的频率还是比较高的.</p>
<p>今天跟大家聊聊 UIWebView 缓存相关的话题.</p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我今天使用 Tomcat 来作为 web 容器, 在本机搭建一个 web 服务器, 然后使用 iPhone 访问该 web 页面, 展示和梳理 UIWebview 关于缓存的问题.</p>
<p>如果你对 Tomcat 还不熟悉, 希望你可以先去大概了解一下, 如何在 Mac os 上面安装和使用 Tomcat, 可以参考我的博文: [Mac 配置 Tomcat8].</p>
<blockquote>
<p>Tomcat 是一个开放源代码、运行 servlet 和 JSP Web 应用软件的基于 Java 的 Web 应用软件容器.<br>Tomcat Server 是根据 servlet 和 JSP 规范执行的，因此可以说 Tomcat Server 实行了 Apache-Jakarta 规范，且比绝大多数商业应用软件服务器要好.<br>但是 Tomcat 对静态文件、高并发的处理比较弱.</p>
</blockquote>
<p>写这篇文章的时候, 我使用的版本分别是 <code>apache-tomcat-8.5.8</code>, <code>jdk1.8</code>.</p>
<h2 id="配置-Tomcat"><a href="#配置-Tomcat" class="headerlink" title="配置 Tomcat"></a>配置 Tomcat</h2><h3 id="修改-server-xml-文件"><a href="#修改-server-xml-文件" class="headerlink" title="修改 server.xml 文件"></a>修改 server.xml 文件</h3><p>文件在 Tomcat 的根目录的 conf 目录下, 如我的文件在这个目录:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apache-tomcat-8.5.8/conf/server.xml</div></pre></td></tr></table></figure>
<p>增加如下内容:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Host name=&quot;&lt;your local ip&gt;&quot; debug=&quot;0&quot; appBase=&quot;&lt;base dir&gt;&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">    &lt;Context path=&quot;&quot; docBase=&quot;&lt;html file path&gt;&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">    &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</div><div class="line">&lt;/Host&gt;</div></pre></td></tr></table></figure>
<p>注意:<br>1.将上述内容放到 <code>&lt;/Host&gt;</code> 和 <code>&lt;/Engine&gt;</code> 节点中间.<br>2.将 <code>name=&quot;&lt;your local ip&gt;&quot;</code> 中的 <your local="" ip=""> 改为你本机的 ip 地址.<br>查看本机的 ip 地址方法很简单:</your></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</div></pre></td></tr></table></figure>
<p>3.将 appBase=”<base dir="">“ 中的 <base dir=""> 改为你的 web 目录.<br>4.将 docBase=”<html file="" path="">“ 中的 <html file="" path=""> 改为你的 html 目录.</html></html></p>
<p>我的配置如下(部分):</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">    &lt;Host name=&quot;localhost&quot;  appBase=&quot;webapps&quot;</div><div class="line">            unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;</div><div class="line">        &lt;!-- SingleSignOn valve, share authentication between web applications</div><div class="line">             Documentation at: /docs/config/valve.html --&gt;</div><div class="line">        &lt;!--</div><div class="line">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</div><div class="line">        --&gt;</div><div class="line">        &lt;!-- Access log processes all example.</div><div class="line">             Documentation at: /docs/config/valve.html</div><div class="line">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</div><div class="line">        &lt;Valve className=&quot;org.apache.catalina.valves.AccessLogValve&quot; directory=&quot;logs&quot;</div><div class="line">               prefix=&quot;localhost_access_log&quot; suffix=&quot;.txt&quot;</div><div class="line">               pattern=&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot; /&gt;</div><div class="line">    &lt;/Host&gt;</div><div class="line">        &lt;!--mark 配置静态网页. [BEGIN] --&gt;</div><div class="line">        &lt;Host name=&quot;192.168.1.103&quot; debug=&quot;0&quot; appBase=&quot;webapps&quot; unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot; xmlValidation=&quot;false&quot;  xmlNamespaceAware=&quot;false&quot;&gt;</div><div class="line">            &lt;Context path=&quot;&quot; docBase=&quot;test&quot; debug=&quot;0&quot; reloadable=&quot;true&quot; crossContext=&quot;true&quot;/&gt;</div><div class="line">            &lt;Logger className=&quot;org.apache.catalina.logger.FileLogger&quot; directory=&quot;logs&quot; prefix=&quot;tot_log.&quot; suffix=&quot;.txt&quot; timestamp=&quot;true&quot;/&gt;</div><div class="line">        &lt;/Host&gt;</div><div class="line">        &lt;!--mark 配置静态网页. [END] --&gt;</div><div class="line">    &lt;/Engine&gt;</div><div class="line">  &lt;/Service&gt;</div><div class="line">&lt;/Server&gt;</div></pre></td></tr></table></figure>
<p>搞定上面的配置, 接下来可以配置相关目录了.</p>
<p>在 Tomcat 的根目录有个文件夹 webapps, 在 webapps 目录下新建目录 test 即可.</p>
<h2 id="构建-HTML-页面"><a href="#构建-HTML-页面" class="headerlink" title="构建 HTML 页面"></a>构建 HTML 页面</h2><p>在 test 目录, 新建一个 html 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch test.html</div></pre></td></tr></table></figure>
<p>文件内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> &lt;p&gt;</div><div class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">Now I input another line, with fancy&lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</div><div class="line">&lt;/u&gt;.&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">&lt;em&gt;Sample&lt;/em&gt; text&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">Now I input another line, with fancy &lt;u&gt;&lt;strong&gt;&lt;em&gt;styles&lt;/em&gt;&lt;/strong&gt;</div><div class="line">&lt;/u&gt;.&lt;/p&gt;</div><div class="line">&lt;p&gt;</div><div class="line">    mark.zhang is itman.</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;style&gt;</div><div class="line">.button &#123;</div><div class="line">    background-color: #4CAF50;</div><div class="line">    border: none;</div><div class="line">    color: white;</div><div class="line">    padding: 15px 32px;</div><div class="line">    text-align: center;</div><div class="line">    text-decoration: none;</div><div class="line">    display: inline-block;</div><div class="line">    font-size: 86px;</div><div class="line">    margin: 50px 200px 100px 300px;</div><div class="line">    cursor: pointer;</div><div class="line">    border-radius: 15;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div><div class="line">&lt;p&gt;</div><div class="line">   &lt;button type=&quot;button&quot; onclick=&quot;myFunction()&quot; class=&quot;button&quot;&gt;Try it&lt;/button&gt;</div><div class="line">&lt;/p&gt;</div><div class="line">&lt;script&gt;</div><div class="line">   function myFunction() &#123;</div><div class="line">       alert(&quot;Blog: www.veryitman.com&quot;);</div><div class="line">   &#125;;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>搭建完成后, 启动 Tomcat 服务器.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startup.sh</div></pre></td></tr></table></figure>
<p>在浏览器里面通过 ip:port/test.html 的方式来访问该页面.</p>
<p>看到类似下面的效果即表示搭建成功:</p>
<p><img src="/upload/images/2017/01/15/html.png" alt="1"></p>
<h2 id="客户端访问"><a href="#客户端访问" class="headerlink" title="客户端访问"></a>客户端访问</h2><p>客户端访问该页面, 使用 UIWebview 来请求(HTTP 协议)页面内容.</p>
<p>一般请求会使用下面的方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)requestWithURL:(NSURL *)URL;</div></pre></td></tr></table></figure>
<p>该方法的描述如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Creates and returns a URL request for a specified URL with default cache policy and timeout value.</div><div class="line">The default cache policy is NSURLRequestUseProtocolCachePolicy and the default timeout interval is 60 seconds.</div></pre></td></tr></table></figure>
<p>大概意思是使用的缓存策略是根据协议来的, 即 NSURLRequestUseProtocolCachePolicy. 超时时间默认是60s.</p>
<p>也就是说类似如下的请求:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSURLRequest *urlReq = [NSURLRequest requestWithURL:url cachePolicy:NSURLRequestUseProtocolCachePolicy timeoutInterval:60.f];</div></pre></td></tr></table></figure>
<p>如果协议支持缓存的话, UIWebview 请求到的数据就是缓存数据.该缓存是需要 WEB 服务器支持的.</p>
<p>这里我没有配置 Tomcat 的缓存.可以抓包看下:</p>
<p><img src="/upload/images/2017/01/15/rsp1.png" alt="2"></p>
<p>后续博客会分别为大家介绍在 Tomcat 和 Nginx 配置缓存下, 客户端 UIWebview 请求的相关问题.</p>
<p>客户端显示页面效果:<br><img src="/upload/images/2017/01/15/c1.jpeg" alt="2"></p>
<p>ViewController 代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">static NSString * const H5Url = @&quot;http://192.168.1.104:8080/test.html&quot;;</div><div class="line"></div><div class="line">@interface ViewController () &lt;UIWebViewDelegate&gt;</div><div class="line"></div><div class="line">@property (nonatomic, strong) UIWebView *webView;</div><div class="line"></div><div class="line">@property (nonatomic, strong) UIButton *refBtn;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    _webView = [[UIWebView alloc] init];</div><div class="line">    CGSize boundsSize = self.view.bounds.size;</div><div class="line">    self.webView.frame = CGRectMake(0, 20, boundsSize.width, boundsSize.height);</div><div class="line">    self.webView.backgroundColor = [UIColor whiteColor];</div><div class="line">    self.webView.scrollView.showsHorizontalScrollIndicator = NO;</div><div class="line">    self.webView.scrollView.showsVerticalScrollIndicator   = NO;</div><div class="line">    self.webView.scalesPageToFit = YES;</div><div class="line">    self.webView.delegate = self;</div><div class="line">    [self.view addSubview:self.webView];</div><div class="line">    </div><div class="line">    UIButton *refreshBtn = [UIButton buttonWithType:UIButtonTypeCustom];</div><div class="line">    [self.view addSubview:refreshBtn];</div><div class="line">    [refreshBtn addTarget:self action:@selector(onRefreshWebView) forControlEvents:UIControlEventTouchUpInside];</div><div class="line">    refreshBtn.backgroundColor = [UIColor redColor];</div><div class="line">    refreshBtn.layer.masksToBounds = YES;</div><div class="line">    refreshBtn.layer.cornerRadius = 5.f;</div><div class="line">    refreshBtn.frame = CGRectMake(50, 250, 200, 50);</div><div class="line">    [refreshBtn setTitle:@&quot;刷新页面&quot; forState:UIControlStateNormal];</div><div class="line">    _refBtn = refreshBtn;</div><div class="line">    </div><div class="line">    [self loadDataUsingCache];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)webView:(UIWebView *)webView didFailLoadWithError:(NSError *)error</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;didFailLoadWithError: %@&quot;, error);</div><div class="line">    </div><div class="line">    [self hideLoading];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request</div><div class="line"> navigationType:(UIWebViewNavigationType)navigationType</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;shouldStartLoadWithRequest: %@&quot;, request);</div><div class="line">    return YES;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)webViewDidStartLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;webViewDidStartLoad&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)webViewDidFinishLoad:(UIWebView *)webView</div><div class="line">&#123;</div><div class="line">    NSLog(@&quot;webViewDidFinishLoad&quot;);</div><div class="line">    </div><div class="line">    [self hideLoading];</div><div class="line">&#125;</div><div class="line"></div><div class="line">//刷新页面.</div><div class="line">- (void)onRefreshWebView</div><div class="line">&#123;</div><div class="line">    // 方式1: 不使用缓存请求数据</div><div class="line">    //[self loadDataNoUsingCache];</div><div class="line">    </div><div class="line">    // 方式2: 清除 NSCache 缓存, 再请求数据</div><div class="line">    [self clearAllCache];</div><div class="line">    [self loadDataUsingCache];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)loadDataUsingCache</div><div class="line">&#123;</div><div class="line">    [self showLoading];</div><div class="line">    </div><div class="line">    NSURL *url = [NSURL URLWithString:H5Url];</div><div class="line">    </div><div class="line">    NSURLRequest *urlReq = [NSURLRequest requestWithURL:url</div><div class="line">                                            cachePolicy:NSURLRequestReturnCacheDataDontLoad</div><div class="line">                                        timeoutInterval:10.f];</div><div class="line">    </div><div class="line">    [self.webView loadRequest:urlReq];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)loadDataWithProtocol</div><div class="line">&#123;</div><div class="line">    [self showLoading];</div><div class="line">    </div><div class="line">    NSURL *url = [NSURL URLWithString:H5Url];</div><div class="line">    </div><div class="line">    [NSURLRequest requestWithURL:url];</div><div class="line">    </div><div class="line">    NSURLRequest *urlReq = [NSURLRequest requestWithURL:url</div><div class="line">                                            cachePolicy:NSURLRequestUseProtocolCachePolicy</div><div class="line">                                        timeoutInterval:60.f];</div><div class="line">    </div><div class="line">    [self.webView loadRequest:urlReq];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)loadDataNoUsingCache</div><div class="line">&#123;</div><div class="line">    [self showLoading];</div><div class="line">    </div><div class="line">    NSURL *url = [NSURL URLWithString:H5Url];</div><div class="line">    NSURLRequest *urlReq = [NSURLRequest requestWithURL:url</div><div class="line">                                            cachePolicy:NSURLRequestReloadIgnoringCacheData</div><div class="line">                                        timeoutInterval:20.0];</div><div class="line">    [self.webView loadRequest:urlReq];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)clearAllCache</div><div class="line">&#123;</div><div class="line">    // remove cache rsp</div><div class="line">    [[NSURLCache sharedURLCache] removeAllCachedResponses];</div><div class="line">    </div><div class="line">    [[NSURLCache sharedURLCache] setDiskCapacity:0];</div><div class="line">    [[NSURLCache sharedURLCache] setMemoryCapacity:0];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)showLoading</div><div class="line">&#123;</div><div class="line">    [self.refBtn setTitle:@&quot;刷新中...&quot; forState:UIControlStateNormal];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)hideLoading</div><div class="line">&#123;</div><div class="line">    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(2 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^&#123;</div><div class="line">        [self.refBtn setTitle:@&quot;刷新页面&quot; forState:UIControlStateNormal];</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<p>这里注意下面的 三个方法 :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 使用缓存数据, 如果有缓存的话</div><div class="line">// 使用这个方法, 改变 HTML 或者 JS 代码</div><div class="line">// 页面不会拉取最新数据, 还是使用之前请求到的数据.</div><div class="line">// 除非重新刷新</div><div class="line">- (void)loadDataUsingCache;</div><div class="line">// 使用协议缓存, 需要 web 服务器支持.</div><div class="line">- (void)loadDataWithProtocol;</div><div class="line">// 不使用缓存, 加载数据</div><div class="line">- (void)loadDataNoUsingCache;</div></pre></td></tr></table></figure>
<p>另外, 刷新 UIWebview 的方式如下, 有 两种方式 来刷新页面:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *  刷新页面.</div><div class="line"> */</div><div class="line">- (void)onRefreshWebView</div><div class="line">&#123;</div><div class="line">    // 方式1: 不使用缓存请求数据</div><div class="line">    //[self loadDataNoUsingCache];</div><div class="line">    </div><div class="line">    // 方式2: 清除 NSCache 缓存, 再请求数据</div><div class="line">    [self clearAllCache];</div><div class="line">    [self loadDataUsingCache];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种刷新方式, 会重新加载数据.<br>但是不适合多层级的 HTML 页面, 比如你的 HTML 页面有很多层, 想刷新当前页面, 可以使用下面的方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 重新加载当前页面</div><div class="line">[self.webView reload];</div></pre></td></tr></table></figure>
<h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>查看本机 IP 的 shell</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#!/bin/sh</div><div class="line">ifconfig | grep &quot;inet &quot; | grep -v 127.0.0.1</div></pre></td></tr></table></figure>
<p>停止 Tomcat 的运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">shutdown.sh</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS UIWebView </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[f8app]]></title>
      <url>/2017/01/01/f8app/</url>
      <content type="html"><![CDATA[<p>本文主要探讨的是如何编译和运行 f8app.</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>f8app</code> 是 Facebook 开源的, 基于 React Native 开发的一款 App.</p>
<p>代码基本都是 js 的, 很少有原生的代码.</p>
<p><code>f8app</code> 是借鉴和学习 React Native 的上好资料.</p>
<p>原文介绍:</p>
<blockquote>
<p>This is the entire source code of the official F8 app of 2016, available on Google Play and the App Store.</p>
</blockquote>
<p>项目开源地址: <a href="https://github.com/fbsamples/f8app" target="_blank" rel="noopener">Github</a></p>
<h2 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h2><h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><ul>
<li>安装和配置了 React Native 开发环境.</li>
<li>Xcode 7.3 +</li>
<li>CocoaPods (only for iOS) 1.0+</li>
<li>MongoDB (needed to run Parse Server locally)</li>
</ul>
<h3 id="源码构建"><a href="#源码构建" class="headerlink" title="源码构建"></a>源码构建</h3><p>下载源码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/fbsamples/f8app.git</div></pre></td></tr></table></figure>
<p>下载完成后, 进入下载的 f8app 目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd f8app</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>如果是 iOS 的话, 需要进入 iOS 目录执行 <code>pod install</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ios</div><div class="line">pod install</div></pre></td></tr></table></figure>
<p>在项目 f8app 目录下运行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure>
<p>打开浏览器输入地址 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>, 可以看到 graphql 的界面.</p>
<h3 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h3><p>使用 Homebrew 来安装.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mongodb</div></pre></td></tr></table></figure>
<h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p>导入例子数据.</p>
<p>注意:<br>在源码的路径即 <code>~/yourpath/f8app</code> 下面执行, 下面操作没有特殊说明都是在源码根目录下面操作.<br>你可以多开几个终端端口来进行操作.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run import-data</div></pre></td></tr></table></figure>
<p>导入例子数据, 会报下面的 错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">error: Uncaught internal server error. &#123; [MongoError: connect ECONNREFUSED 127.0.0.1:27017]</div><div class="line">name: &apos;MongoError&apos;,</div><div class="line">message: &apos;connect ECONNREFUSED 127.0.0.1:27017&apos; &#125; Error: connect ECONNREFUSED 127.0.0.1:27017</div><div class="line">at Object.exports._errnoException (util.js:893:11)</div><div class="line">at exports._exceptionWithHostPort (util.js:916:20)</div><div class="line">at TCPConnectWrap.afterConnect as oncomplete</div></pre></td></tr></table></figure>
<p>需要安装 <code>mongodb-runner</code></p>
<p>安装方法如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g parse-server mongodb-runner</div></pre></td></tr></table></figure>
<p>运行 <code>mongodb-runner</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongodb-runner start</div></pre></td></tr></table></figure>
<p>这里执行完毕后, 需要等待一会.</p>
<p>你会看到如下信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Starting a MongoDB deployment to test against...</div></pre></td></tr></table></figure>
<p>上面运行结束后, 你可以查看 MongoDB 是否在运行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lsof -iTCP:27017 -sTCP:LISTEN</div></pre></td></tr></table></figure>
<p>会显示当前正在运行的信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">COMMAND   PID USER   FD   TYPE             DEVICE    SIZE/OFF  NODE  NAME</div><div class="line">mongod  86824 mark    7u  IPv4    0x91959c43a65644ed      0t0  TCP *:27017 (LISTEN)</div></pre></td></tr></table></figure>
<p>停止 mongodb 运行的方式如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongodb-runner stop</div></pre></td></tr></table></figure>
<h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><p><a href="http://localhost:8080/dashboard" target="_blank" rel="noopener">Parse Dashboard</a></p>
<p><a href="http://localhost:8080/graphql" target="_blank" rel="noopener">GraphiQL</a></p>
<h3 id="启动-react-native"><a href="#启动-react-native" class="headerlink" title="启动 react-native"></a>启动 react-native</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native start</div></pre></td></tr></table></figure>
<h3 id="运行-f8app"><a href="#运行-f8app" class="headerlink" title="运行 f8app"></a>运行 f8app</h3><p>Android:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">react-native run-android</div><div class="line">adb reverse tcp:8081 tcp:8081   # required to ensure the Android app can</div><div class="line">adb reverse tcp:8080 tcp:8080   # access the Packager and GraphQL server</div></pre></td></tr></table></figure>
<p>iOS:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native run-ios</div></pre></td></tr></table></figure>
<p>如果出现红色背景的 error 提示, 可以不管, 直接 Dismiss 即可.</p>
<p>然后可以看到如下界面:</p>
<p><img src="/upload/images/2017/01/01/f8app.jpg" alt="1"></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.在运行后关闭登录按钮, 报错: </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AppEventsLogger.logEvent</div></pre></td></tr></table></figure>
<p>解决方案:</p>
<p>在 <code>/js/store/track.js</code> 文件的第 43 行, 注释掉 log, 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">case &apos;SKIPPED_LOGIN&apos;:</div><div class="line">      //AppEventsLogger.logEvent(&apos;Skip login&apos;, 1);</div><div class="line">      break;</div></pre></td></tr></table></figure>
<p>在模拟器上面重新 Reload 即可.</p>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS Android JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再见 2016]]></title>
      <url>/2016/12/31/%E5%86%8D%E8%A7%81-2016/</url>
      <content type="html"><![CDATA[<p>今天是2016年的最后一天，正好赶上放假，给自己的这一年做个小结。</p>
<p>2016，继续做项目，作为一名软件工程师，不停地在学习。</p>
<p>2016，学习到了很多关于产品和运营相关的知识。知道了 <code>倒逼</code> 的作用.</p>
<p>2016，读了20本非技术类书籍，养成了读书的习惯，并把读书的好处讲给身边的人听。</p>
<p>2016，开始减肥，注意锻炼身体，几乎每周都有一次从公司到家的步行，一次篮球或者跑步运动。</p>
<p>2016，购买了域名，建立了自己的 <a href="file:///Users/mark/Desktop/backups/public/2016/12/31/veryitman.com" target="_blank" rel="noopener">博客网站</a>。</p>
<p>2016，儿子大了一岁，自己老了一岁，家庭依旧幸福着。渐渐地理解了做父亲的责任。</p>
<p>2016，对自己影响最大的几句话，分享给大家:</p>
<p><strong>1. 技术要给产品提供最大的自由度.</strong></p>
<p><strong>2. 不要轻易的说 NO.</strong></p>
<p><strong>3. 要不断的让自己值钱, 而不是简单的为了金钱而跳槽.</strong></p>
<p><strong>4. 不要总是抱怨你的产品设计是狗屎, 学会和产品沟通更优的方案.</strong></p>
<p><strong>5. 关注细节, 把产品做好.</strong></p>
<p><strong>6. 多关注别人的优点.</strong></p>
<p><strong>7. 让对方把话说完.</strong></p>
<p><strong>8. 多看书, 多思考.</strong></p>
<p>感谢所有陪伴和支持我的朋友，同事，亲人！</p>
<p>祝愿所有人2017幸福、健康、快乐！</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 配置 Tomcat8]]></title>
      <url>/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-Tomcat8/</url>
      <content type="html"><![CDATA[<h2 id="Tomcat-简介"><a href="#Tomcat-简介" class="headerlink" title="Tomcat 简介"></a>Tomcat 简介</h2><p>Tomcat 是一个 Web 服务器.</p>
<blockquote>
<p>Web 服务器是指为特定组件提供服务的一个标准化的运行时的环境.<br>可为组件提供事务处理, 数据访问, 安全性和持久性等服务.</p>
</blockquote>
<p>Tomcat 是免费且开源的, 他是 Apache 软件基金会 Jakarta 项目中的其中一个子项目.由 Apache, Sun 和其他一些公司及个人共同开发完成.</p>
<p>Tomcat 也是使用最为广泛的 JSP 服务器.</p>
<blockquote>
<p>JSP 是 Java Server Pages 的简称, 是在传统的 HTML 文件中插入 Java 程序段和 JSP 标记的一种动态网页技术.</p>
</blockquote>
<h2 id="下载-Tomcat"><a href="#下载-Tomcat" class="headerlink" title="下载 Tomcat"></a>下载 Tomcat</h2><p>前往 <a href="http://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">这里</a> 可以下载 Tomcat.</p>
<p>我目前安装的是 8.5.8 版本的.</p>
<p><img src="/upload/images/2016/11/26/tomcat1.png" alt="1"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>先安装 JDK, 安装教程可以参考 <a href="http://www.veryitman.com/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-Tomcat8/" target="_blank" rel="noopener">Mac 配置 JDK1.8</a> 这篇文章.</p>
<p>解压下载的 tar.gz 即可.</p>
<p>最好解压到自己的工作目录, 如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/workspace/developr/</div></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>编辑 <code>/etc/profile</code> 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div></pre></td></tr></table></figure>
<p>添加如下变量:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JRE_HOME=$JAVA_HOME</div><div class="line">TOMCAT_HOME=/Users/mark/developer/apache/apache-tomcat-8.5.8</div><div class="line">PATH=$JAVA_HOME/bin:$TOMCAT_HOME/bin:$PATH</div><div class="line">export JRE_HOME</div><div class="line">export PATH</div></pre></td></tr></table></figure>
<p>其中的 JAVA_HOME 是 <a href="http://www.veryitman.com/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-Tomcat8/" target="_blank" rel="noopener">Mac 配置 JDK1.8</a> 这篇文章里面设置的 JDK 的环境变量.</p>
<p>配置环境变量的目的, 可以让我们方便的使用 Tomcat 的命令.</p>
<h2 id="检验安装是否成功"><a href="#检验安装是否成功" class="headerlink" title="检验安装是否成功"></a>检验安装是否成功</h2><p>使 <code>/etc/profile</code> 配置文件立即生效.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<p>如果没有生效, 重启终端即可.</p>
<p>开启 Tomcat 服务, 执行下面的命令:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startup.sh</div></pre></td></tr></table></figure>
<p>该命令在 Tomcat 的安装目录的 bin 目录下面.</p>
<p>执行后, 可以看到:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Using CATALINA_BASE:   /Users/mark/developer/apache/apache-tomcat-8.5.8</div><div class="line">Using CATALINA_HOME:   /Users/mark/developer/apache/apache-tomcat-8.5.8</div><div class="line">Using CATALINA_TMPDIR: /Users/mark/developer/apache/apache-tomcat-8.5.8/temp</div><div class="line">Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</div><div class="line">Using CLASSPATH:       /Users/mark/developer/apache/apache-tomcat-8.5.8/bin/bootstrap.jar:/Users/mark/developer/apache/apache-tomcat-8.5.8/bin/tomcat-juli.jar</div><div class="line">Tomcat started.</div></pre></td></tr></table></figure>
<p>在浏览器里面打开: <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a></p>
<p>即可看到一只可爱的 Tom 猫.</p>
<p>执行 <code>shutdown.sh</code> 可以关闭 Tomcat.</p>
]]></content>
      
        <categories>
            
            <category> Server </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tomcat Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 安装和使用 infer]]></title>
      <url>/2016/11/26/Mac-%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8-infer/</url>
      <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>infer 是 Facebook 开源的一款代码静态检查工具, 源码可以在 <a href="https://github.com/facebook/infer" target="_blank" rel="noopener">Github</a> 上面获取.</p>
<p>支持 Java/C/OC 等语言, 支持 Gradle, Buck, Maven, Xcodebuild, Make 等.</p>
<p>我一般用来分析 iOS 和 Android 工程.</p>
<p>可以在 <a href="http://fbinfer.com/docs/getting-started.html" target="_blank" rel="noopener">这里</a> 查看 Start.</p>
<h2 id="安装-infer"><a href="#安装-infer" class="headerlink" title="安装 infer"></a>安装 infer</h2><p>只要你用 Homebrew, mac 下安装 infer 很简单:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install infer</div></pre></td></tr></table></figure>
<p>在早期版本, infer 不支持 brew 安装. 安装起来各种问题, 现在 infer 支持了 brew 安装, 很方便.</p>
<p>这里我使用的 infer 版本是 0.9.4.</p>
<p>安装成功后, 可以查看安装版本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">infer -version</div></pre></td></tr></table></figure>
<p>可以看到如下信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Infer version v0.9.4</div><div class="line">Copyright 2009 - present Facebook. All Rights Reserved.</div><div class="line">Mac:public mark$ infer --version</div><div class="line">Infer version v0.9.4</div><div class="line">Copyright 2009 - present Facebook. All Rights Reserved.</div></pre></td></tr></table></figure>
<p>这里有个问题, 有时候 brew 无法更新最新的 infer, 我目前的解决方案是先卸载之前安装的 infer, 然后再重新安装.</p>
<p>卸载 infer</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew uninstall infer</div></pre></td></tr></table></figure>
<h2 id="安装-xcpretty"><a href="#安装-xcpretty" class="headerlink" title="安装 xcpretty"></a>安装 xcpretty</h2><p><a href="https://github.com/supermarin/xcpretty" target="_blank" rel="noopener">xcpretty</a> 是一款格式化 xcodebuild 输出结果的工具.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">▸ Building X/N [(Release)]</div><div class="line">▸ Check Dependencies</div><div class="line">▸ Copying Info.plist</div><div class="line">▸ Running script &apos;[CP] Check Pods Manifest.lock&apos;</div><div class="line">▸ Running script &apos;Replace PaySdk&apos;</div><div class="line">▸ Compiling User.m</div></pre></td></tr></table></figure>
<p>从0.9.4版本后, infer 默认使用了 xcpretty.</p>
<p>可以使用 gem 安装 xcpretty 工具:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install xcpretty</div></pre></td></tr></table></figure>
<p>如果没有安装成功, 或者提示权限不够, 那就这样折腾:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install xcpretty</div></pre></td></tr></table></figure>
<p>想了解更多关于 xcpretty 的使用可以去 <a href="https://github.com/supermarin/xcpretty" target="_blank" rel="noopener">github</a>.</p>
<h2 id="使用-infer"><a href="#使用-infer" class="headerlink" title="使用 infer"></a>使用 infer</h2><h3 id="iOS-项目使用-infer"><a href="#iOS-项目使用-infer" class="headerlink" title="iOS 项目使用 infer"></a>iOS 项目使用 infer</h3><p>infer 的文档写的也较全面.</p>
<p>可以在 <a href="http://fbinfer.com/docs/infer-workflow.html" target="_blank" rel="noopener">这里</a> 查看使用方法.</p>
<p>1.分析 Cocoapods 项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">infer -- xcodebuild -workspace N.xcworkspace -scheme NSchema</div></pre></td></tr></table></figure>
<p>其中 N.xcworkspace 是你的 workspace 名称, NSchema 是你需要检查的 Schema 名称.</p>
<p>2.分析 .xcodeproj</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">infer -- xcodebuild -target targetName -configuration Debug -sdk iphonesimulator</div></pre></td></tr></table></figure>
<p>其中 targetName 是项目的 target 名称, 必须指定.</p>
<p>分析成功后, infer 会有输出报告.</p>
<p>该报告在你的项目目录下, 名称是 infer-out.</p>
<p>bug.txt 是以文本方式输出的 issue 文档.<br>另外还有 csv 格式的 issue 文档.</p>
<h3 id="Android-Gradle-工程使用-infer"><a href="#Android-Gradle-工程使用-infer" class="headerlink" title="Android Gradle 工程使用 infer"></a>Android Gradle 工程使用 infer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradle clean</div><div class="line">infer -- gradle build</div></pre></td></tr></table></figure>
<h2 id="其他用法"><a href="#其他用法" class="headerlink" title="其他用法"></a>其他用法</h2><p>infer 还有很多高级的用法, 比如可以增量检查.</p>
<p>增量检查的功能依赖于你的编译器是否支持.</p>
<p>infer 增量检查的选项是 –reactive.</p>
<blockquote>
<p>之前的版本是 –incremental 选项.<br>自从 v0.8.0 版本后使用了 –reactive 选项.</p>
</blockquote>
<p>可以这样来进行增量检查:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">infer --reactive -- xcodebuild -workspace N.xcworkspace -scheme NSchema</div></pre></td></tr></table></figure>
<p>infer 还有很多高级用法, 可以在 <a href="http://fbinfer.com/docs/advanced-features.html" target="_blank" rel="noopener">Advanced usage</a> 中去查阅和使用.</p>
<p>再使用过程中, 随着 MacOS, Xcode 的升级, infer 会面临更多的挑战, 如果遇到问题, 第一时间去 <a href="https://github.com/facebook/infer" target="_blank" rel="noopener">GitHub</a>  上面提  issue.</p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS infer </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 配置 JDK1.8]]></title>
      <url>/2016/11/26/Mac-%E9%85%8D%E7%BD%AE-JDK1-8/</url>
      <content type="html"><![CDATA[<h2 id="下载-JDK"><a href="#下载-JDK" class="headerlink" title="下载 JDK"></a>下载 JDK</h2><p>在 <a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">这里下载</a> jdk.</p>
<p>下载版本是 1.8u112, 信息如下:</p>
<p><img src="/upload/images/2016/11/26/jdk1.png" alt="1"></p>
<h2 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h2><p>下载完成后, 直接双击安装即可.</p>
<h2 id="配置-Path"><a href="#配置-Path" class="headerlink" title="配置 Path"></a>配置 Path</h2><p>成功安装后, 目录<br><code>/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/</code> 就会存在.</p>
<p>编辑 <code>/etc/profile</code> 文件:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div></pre></td></tr></table></figure>
<p>添加如下代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_112.jdk/Contents/Home</div><div class="line">CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div><div class="line">PATH=$JAVA_HOME/bin:$PATH</div><div class="line">export JAVA_HOME</div><div class="line">export CLASSPATH</div><div class="line">export PATH</div></pre></td></tr></table></figure>
<p>保存文件.</p>
<p>使这个文件立即生效.可以 source 一下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<h2 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h2><p>执行下面命令来检验 jdk 是否安装成功.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -version</div></pre></td></tr></table></figure>
<p>输出如下信息, 标示配置 JDK 成功.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java version “1.8.0_112”</div><div class="line">Java(TM) SE Runtime Environment (build 1.8.0_112-b16)</div><div class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)</div></pre></td></tr></table></figure>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MacOS java jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GameDevelopment: 与 Cocos2d 的再相逢]]></title>
      <url>/2016/11/12/GameDevelopment-%E4%B8%8E-Cocos2d-%E7%9A%84%E5%86%8D%E7%9B%B8%E9%80%A2/</url>
      <content type="html"><![CDATA[<h2 id="认识-Cocos2d"><a href="#认识-Cocos2d" class="headerlink" title="认识 Cocos2d"></a>认识 Cocos2d</h2><p>相信很多人听说过 cocos2d-x 这个引擎, 但听过 <a href="http://cocos2d-objc.org/" target="_blank" rel="noopener">cocos2d-objc</a> 的人应该不多.</p>
<p>cocos2d-objc 是 cocos 系列的 objective-c 版本.<br>开发语言是 OC.在 iOS 上面使用该版本的引擎, 基本是无缝连接(写的没有什么障碍).</p>
<p>欣赏一下 cocos2d-objc 的 logo, 如图:<br><img src="/upload/images/2016/11/12/1.png" alt="1"></p>
<p>如果你对 OC 版感兴趣, 可以通过博文 <a href="http://blog.csdn.net/veryitman/article/details/44993643" target="_blank" rel="noopener">coco2d-iphone: 环境搭建</a> 去了解.</p>
<p>cocos2d-x 目前支持 JavaScript, lua, c++ 等主流语言来开发.<br>cocos 还在迅猛发展中, 不断的完善开发工具, 广大游戏开发者依然热力贡献, 程序猿们在游戏的战场挥洒青春.</p>
<p>现在 cocos 的开发者会得到更多的支持.</p>
<p>下面给张图来展示 cocos 家族及其发展:<br><img src="/upload/images/2016/11/12/2.png" alt="1"></p>
<h2 id="由-libgdx-转向-Cocos2d"><a href="#由-libgdx-转向-Cocos2d" class="headerlink" title="由 libgdx 转向 Cocos2d"></a>由 libgdx 转向 Cocos2d</h2><p>几年前, 那个时候还在开发棋牌游戏, 当时自己也是刚刚接触游戏开发这个「高逼格」的行业, 之前自己是个纯 App 开发者.</p>
<p>内心还是蛮激动的, 心想可能要走上人生巅峰了…</p>
<p>棋牌游戏, 当时使用的是 java 的游戏引擎 <a href="https://libgdx.badlogicgames.com/" target="_blank" rel="noopener">libgdx</a> 0.X.X 的版本, 该引擎和 Android 基本也是无缝连接, Api 设计的很好.</p>
<p>现在 libgdx 也发展到了1.6.x 版本了, 工具也完善了很多.</p>
<p>虽然 libgdx 也可以跨平台, 但是最终我们还是选择了 cocos2d-x 来移植该游戏.其中原因是因为 cocos2d-x 太火了, 人也好找.</p>
<p>改为 cocos2d-x 的版本之后, 我就被安排到了另外一个项目, 也是一个棋牌游戏, 该游戏现在在腾讯的微信游戏里面运营.</p>
<p>这个游戏是 cocos2d-objc 的引擎写的, 自己也不会 objc, 于是硬着头皮学习, 很快的就上手了这个项目.写的也是风生水起.</p>
<p>cocos2d-objc, 现在也支持跨平台, 并且有 xcode 的插件, 可以在 xcode 里面写 Android 的代码, 调试开发等.</p>
<p>因为接触 cocos2d, 后面就直接开搞 iOS 开发了.</p>
<h2 id="再次使用-Cocos2d"><a href="#再次使用-Cocos2d" class="headerlink" title="再次使用 Cocos2d"></a>再次使用 Cocos2d</h2><p>互联网 IT 业的发展, 刺激了各个行业的发展, 也促进和激发了新生的技术, 在这个行业, 每个人都能体会 <code>活到老学到老</code> 这句话的含义.</p>
<p>这两年, HTML5 的发展, 让很多程序员重新认识了 JavaScript 的重要性. 特别是最近 ReactNative 的发展, jsPacth 的开源, 微信小程序的推出, 让 JavaScript 火得不要不要的.</p>
<p>说实话, 是时候开始学习前端相关的技术了, 至少你需要去了解.</p>
<p>cocos2d-js 的发展, 给 HTML 游戏开发带来了很多便利. 最近我们需要开发 H5 的游戏, 直接拿起 coco2d-x(支持 JavaScript) 就撸起.</p>
<p>去 <a href="https://github.com/cocos2d/cocos2d-x" target="_blank" rel="noopener">GitHub</a> 上面直接 clone 最新版就可以, 按照 README.md 来搭建环境就好了.</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇博客也是有感而发, 没有实质性的内容.</p>
<p>主要目的是想告诉大家, 技术的发展日新月异, 想在这里大展拳脚, 你需要保持一颗年轻的心, 不怕苦, 勇往直前的精神.</p>
<p>我们需要学习的技术有很多, 我认为, 要根据项目本身的发展来适度的学习, 切记盲目的学习, 学习一门新技术之后, 要及时的运用在项目当中, 并分享给你身边的人.</p>
<blockquote>
<p>不拒绝不排斥新技术, 坚持学习和乐于分享, 应该是必备的技能.</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> Game </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Cocos2d Game </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac install Cocoapods]]></title>
      <url>/2016/11/08/Mac-install-Cocoapods/</url>
      <content type="html"><![CDATA[<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>这篇博客原本被我发表在 <a href="http://blog.csdn.net/veryitman/article/details/50769069" target="_blank" rel="noopener">CSDN</a> .</p>
<p>那里不再更新, 现在在这里做持续更新.</p>
<h2 id="导引"><a href="#导引" class="headerlink" title="导引"></a>导引</h2><p>如果你的 Mac OSX 升级到 10.11.x+, 并且需要安装 Cocoapods, 可以参考本博客.</p>
<h2 id="安装-ruby"><a href="#安装-ruby" class="headerlink" title="安装 ruby"></a>安装 ruby</h2><p>Mac 系统自带了 ruby, 但是建议大家使用 Homebrew 安装 ruby.</p>
<p>因为 Cocoapods 升级需要对应的 ruby 版本也要升级, 使用 Homebrew 比较方便.</p>
<p>安装 ruby:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ruby</div></pre></td></tr></table></figure>
<p>查看当前安装的 ruby 版本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby -v</div></pre></td></tr></table></figure>
<p>会得到类似下面的信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby 2.3.1p112 (2016-04-26 revision 54768) [x86_64-darwin15]</div></pre></td></tr></table></figure>
<p>gem 是管理 Ruby 库和程序的标准包.<br>安装了 ruby, 自带了 gem 工具.</p>
<p>可以使用 <code>gem -v</code> 查看 gem 版本.</p>
<h2 id="安装-Cocoapods"><a href="#安装-Cocoapods" class="headerlink" title="安装 Cocoapods"></a>安装 Cocoapods</h2><p>1.移除原来的源, 不管以前是否安装过 Cocoapods.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources --remove http://ruby.taobao.org/</div></pre></td></tr></table></figure>
<p>2.重新添加源, 注意是 https.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -a https://gems.ruby-china.org/</div></pre></td></tr></table></figure>
<p>之前 <a href="https://ruby.taobao.org/" target="_blank" rel="noopener">taobao 的源</a> 好像已经不行了.</p>
<p><strong>注意：</strong>添加源之前在浏览器打开 <code>https://gems.ruby-china.org/</code> 这个地址看一看是否能访问，如果不能访问就修改一下为 <code>https://gems.ruby-china.com</code> 这个地址。</p>
<p>3.查看是否添加成功, 该步骤可选.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div></pre></td></tr></table></figure>
<p>安装, 使用 root 权限安装.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods</div></pre></td></tr></table></figure>
<p>这种安装方式, 会安装最新的 release 版本.</p>
<p>你也可以使用下面两种方式来安装.</p>
<p>指定版本安装:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods -v 1.0.0</div></pre></td></tr></table></figure>
<p>安装最新的 release beta 版本:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods --pre</div></pre></td></tr></table></figure>
<h2 id="卸载-Cocoapods"><a href="#卸载-Cocoapods" class="headerlink" title="卸载 Cocoapods"></a>卸载 Cocoapods</h2><p>卸载 Cocoapods 只需执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods</div></pre></td></tr></table></figure>
<p>如果想删除本地的 pod repo, 可以这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm -fr ~/.cocoapods/</div></pre></td></tr></table></figure>
<h2 id="建立本地-repo"><a href="#建立本地-repo" class="headerlink" title="建立本地 repo"></a>建立本地 repo</h2><p>安装完 Cocoapods 后, 需要建立本地的 repo.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup</div></pre></td></tr></table></figure>
<p>即使你现在不执行 pod setup, 后面进行 pod install 或者 pod update 的时候, 也会自动的进行 pod setup.</p>
<p>执行 pod setup 的目的是将所有第三方的 podspec 索引文件更新到本地的 <code>~/.cocoapods/repos</code> 目录中.</p>
<h2 id="安装使用中遇到的问题"><a href="#安装使用中遇到的问题" class="headerlink" title="安装使用中遇到的问题"></a>安装使用中遇到的问题</h2><p>问题1: 命令行执行 pod 发生: pod command not found, 但是 sudo pod 却可以执行.</p>
<p>解决方案即如下步骤:</p>
<p>[1].卸载原有的 Cocoapods</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods</div></pre></td></tr></table></figure>
<p>[2].重新安装 Cocoapods</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods</div></pre></td></tr></table></figure>
<p>[3].赋予/usr/local/bin给予执行与读取权限:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod -R +rx /usr/local/bin/</div></pre></td></tr></table></figure>
<blockquote>
<p>建议最好使用代(fanq)理(qiang).</p>
</blockquote>
<p>问题2: 更新 gem 过程中, 遇到</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Operation not permitted - /usr/bin/update_rubygems</div></pre></td></tr></table></figure>
<p>可以通过通过 brew 安装 ruby 解决.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install ruby</div></pre></td></tr></table></figure>
<p>问题3: pod setup 失败</p>
<p>失败提示信息类似:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cloning into &apos;master&apos;...</div><div class="line">error: RPC failed; curl 56 SSLRead() return error -36</div><div class="line">fatal: The remote end hung up unexpectedly</div><div class="line">fatal: early EOF</div><div class="line">fatal: index-pack failed</div></pre></td></tr></table></figure>
<p>解决方案: 更新 gem</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem update --system</div></pre></td></tr></table></figure>
<p>问题4: 添加源, 提示如下问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source https://gems.ruby-china.org/ already present in the cache</div></pre></td></tr></table></figure>
<p>这个说明你已经添加过该源, 可以使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem sources -l</div></pre></td></tr></table></figure>
<p>来查看已经添加的源.</p>
<h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><p>1.更新 gem</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem update --system</div></pre></td></tr></table></figure>
<p>2.pod repo update</p>
<p>更新本地仓库.</p>
<p>3.pod search xxx</p>
<p>搜索 cocoapods 项目.</p>
<p>4.pod list</p>
<p>列出所有可用的库.</p>
<p>5.pod install</p>
<p>根据 podfile 和 podfile.lock来安装库.</p>
<p>默认会执行 pod repo update.</p>
<p>可以加入参数 <code>–no-repo-update</code> 不执行 pod repo update.</p>
<p>6.pod update</p>
<p>更新已安装的库到最新版本, 并且创建新的 Podfile.lock 文件.</p>
<p>该命令也会默认会执行 pod repo update.</p>
<p>可以加入参数 –no-repo-update 不执行 pod repo update.</p>
<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2017-01-04 更新</p>
<blockquote>
<p>升级 ruby 到 2.4 版本后, cocoapods 无法使用了.</p>
</blockquote>
<p>升级的 ruby 版本信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-darwin15]</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">使用任何 pod 命令都报错:</div><div class="line"></div><div class="line">/usr/local/Cellar/ruby/2.4.0/lib/ruby/2.4.0/rubygems.rb:270:in `find_spec_for_exe&apos;: can&apos;t find gem cocoapods (&gt;= 0.a) (Gem::GemNotFoundException)</div><div class="line">from /usr/local/Cellar/ruby/2.4.0/lib/ruby/2.4.0/rubygems.rb:298:in `activate_bin_path&apos;</div><div class="line">from /usr/local/bin/pod:22:in `&lt;main&gt;&apos;</div></pre></td></tr></table></figure>
<p>查找各种解决方案, 最终还是没有解决.</p>
<p>你可以在 <a href="https://cocoapods.org/app" target="_blank" rel="noopener">这里</a> 下载 Cocoapods 的 Mac 版本 App 使用.</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CocoaPods, iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocoapods 问题集锦]]></title>
      <url>/2016/11/08/Cocoapods-%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6/</url>
      <content type="html"><![CDATA[<h2 id="承诺"><a href="#承诺" class="headerlink" title="承诺"></a>承诺</h2><p>本文会持续更新, 分享在使用 cocoapods 过程中遇到的问题和解决方案.</p>
<p>欢迎大家补充.</p>
<h2 id="安装问题"><a href="#安装问题" class="headerlink" title="安装问题"></a>安装问题</h2><p>可以阅读博客 <a href="http://www.veryitman.com/2016/11/08/2016-11-08-Mac-install-Cocoapods/" target="_blank" rel="noopener">Mac 安装 Cocoapods</a>.</p>
<h2 id="pod-search-问题"><a href="#pod-search-问题" class="headerlink" title="pod search 问题"></a>pod search 问题</h2><blockquote>
<p>pod search 无法搜索到指定的项目</p>
</blockquote>
<p>问题描述: 执行 pod search [Name], 出现类似下面的提示:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[!] Unable to find a pod with name, author, summary, or description matching `[Name]`</div></pre></td></tr></table></figure>
<p>解决方案: 删除 search_index.json 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rm ~/Library/Caches/CocoaPods/search_index.json</div></pre></td></tr></table></figure>
<p>然后, 重新执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search 项目名称</div></pre></td></tr></table></figure>
<p>如果这样行不通的话, 可以这样:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm -rf ~/.cocoapods</div><div class="line">rm ~/Library/Caches/CocoaPods/search_index.json</div><div class="line">pod setup</div></pre></td></tr></table></figure>
<p>如果你的网络不好, 需要漫长的等待…</p>
<p>这个时候, 可以去抽半盒烟了. Orz…</p>
<h2 id="pod-setup-问题"><a href="#pod-setup-问题" class="headerlink" title="pod setup 问题"></a>pod setup 问题</h2><blockquote>
<p>pod setup 卡死</p>
</blockquote>
<p>问题描述:</p>
<p>pod setup 会在本地建立 cocoapods 仓库.</p>
<p>在执行的过程中, 你可以在 <code>~/.cocoapods/repos</code> 使用<br><code>du -sh *</code> 来看 repos 目录的大小变化.</p>
<p>如果观察好久, 大小没有变化, 最终会出现类似下面的错误:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cloning into &apos;master&apos;...</div><div class="line">error: RPC failed; curl 56 SSLRead() return error -36</div><div class="line">fatal: The remote end hung up unexpectedly</div><div class="line">fatal: early EOF</div><div class="line">fatal: index-pack failed</div></pre></td></tr></table></figure>
<p>解决方案，如下：</p>
<p>先更新 gem</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem update --system</div></pre></td></tr></table></figure>
<p>再重新执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup</div></pre></td></tr></table></figure>
<h2 id="pod-install-问题"><a href="#pod-install-问题" class="headerlink" title="pod install 问题"></a>pod install 问题</h2><p>无法使用，报类似下面的两种错误信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">can&apos;t find gem cocoapods (&gt;= 0.a) with executable pod (Gem::GemNotFoundException)</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">While executing gem ... (TypeError) </div><div class="line">no implicit conversion of nil into String</div></pre></td></tr></table></figure>
<p>解决方案，如下：</p>
<p><strong>1. 重新安装 ruby</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew reinstall ruby</div></pre></td></tr></table></figure>
<p><strong>2. gem 更新</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rm /usr/local/bin/update_rubygems</div><div class="line"></div><div class="line">sudo gem update --system</div></pre></td></tr></table></figure>
<p><strong>3. 重新安装 Cocoapods 并重新添加源</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo gem uninstall cocoapods</div><div class="line"></div><div class="line">sudo gem install -n /usr/local/bin cocoapods</div><div class="line"></div><div class="line">gem sources -a https://gems.ruby-china.org/</div></pre></td></tr></table></figure>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> MacOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CocoaPods, iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Cocoapods 管理开源项目]]></title>
      <url>/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
      <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>在进行下面工作之前，请确保你做了下面三件事情：</p>
<p><strong>1. 创建或者已经有了 github 账号.</strong><br><strong>2. 了解和熟悉如何在 github 上面创建 Repository.</strong><br><strong>3. MacOS 上面安装了 Cocoapods.</strong></p>
<p>如果你还没有使用 Cocoapods, 建议看看 <a href="http://www.veryitman.com/2016/11/08/Mac-install-Cocoapods/" target="_blank" rel="noopener">Mac OSX 10.11.1+ 安装 Cocoapods</a> 这篇博客.</p>
<p>在博客 <a href="http://www.veryitman.com/2016/09/25/iOS-%E9%A1%B9%E7%9B%AE-%E6%89%93%E9%80%A0%E6%9C%AC%E5%9C%B0-pod-%E5%BA%93/" target="_blank" rel="noopener">iOS 项目: 打造本地 pod 库</a> 里面有介绍如何打造本地的 pod 库，不需要借助任何仓库就可以完成，操作简单，适合项目组内使用。</p>
<p>今天给大家分享如何将代码开源并放到 pod 库中，供别人使用。这种方式属于打造公共（Public repo）仓库， 任何人都可以搜索到你贡献的库并使用你的库。后面会跟大家分享如何打造私有（Private repo），敬请期待。</p>
<p>这篇博客是基于一个实际例子 <a href="https://github.com/veryitman/MZInsetLabel" target="_blank" rel="noopener">MZInsetLabel</a> 来说明的，期待与优秀的你交流讨论。</p>
<h2 id="创建-Repository-并完善项目"><a href="#创建-Repository-并完善项目" class="headerlink" title="创建 Repository 并完善项目"></a>创建 Repository 并完善项目</h2><p><strong>1. 在 Github 上面创建 Repository，取名为 MZInsetLabel.</strong></p>
<p><strong>2. 将该工程 clone 到本地磁盘.</strong></p>
<p><strong>3. 写代码，这里我只写了 MZInsetLabel.h | .m 文件.</strong></p>
<p><strong>4. 创建 podspec 文件.</strong></p>
<p>使用下面命令，即可产生该文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create MZInsetLabel</div></pre></td></tr></table></figure>
<p>在当前目录会生成 <code>MZInsetLabel.podspec</code> 文件。按照文件规范和实际情况填写即可，如果不知道怎么填写，可以在 Github 上面找一个开源项目参考即可。</p>
<blockquote>
<p>注意: Tag 版本号不要错误.</p>
</blockquote>
<p>最终内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Pod::Spec.new do |s|</div><div class="line">  s.name         = &quot;MZInsetLabel&quot;</div><div class="line">  s.version      = &quot;0.2.0&quot;</div><div class="line">  s.summary      = &quot;MZInsetLabel is subClass of UILabel.&quot;</div><div class="line">  s.description  = &lt;&lt;-DESC</div><div class="line">                        MZInsetLabel is a sub class of UILabel that can be set insets.</div><div class="line">                   DESC</div><div class="line">  s.homepage     = &quot;http://www.veryitman.com&quot;</div><div class="line">  s.license      = &quot;MIT&quot;</div><div class="line">  s.author       = &#123; &quot;veryitman&quot; =&gt; &quot;veryitman@126.com&quot; &#125;</div><div class="line">  s.platform     = :ios, &quot;7.0&quot;</div><div class="line">  s.source = &#123; :git =&gt; &quot;https://github.com/veryitman/MZInsetLabel.git&quot;, :tag =&gt; &quot;#&#123;s.version&#125;&quot; &#125;</div><div class="line">  s.source_files  = &quot;*.&#123;h,m&#125;&quot;</div><div class="line">  s.framework  = &quot;UIKit&quot;</div><div class="line">  s.requires_arc = true</div><div class="line">end</div></pre></td></tr></table></figure>
<h2 id="项目检测"><a href="#项目检测" class="headerlink" title="项目检测"></a>项目检测</h2><p>检查该 podspec 文件，执行下面命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint MZInsetLabel.podspec</div></pre></td></tr></table></figure>
<blockquote>
<p>–verbose 可以输出更加详细的内容</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint MZInsetLabel.podspec --verbose</div></pre></td></tr></table></figure>
<p>正确的话, 你可以看到下图如所示的内容：<br><img src="/upload/images/2016/11/1/1.jpg" alt="1"></p>
<p>在检测的过程中，如果有一些警告导致无法验证通过，可以使用 <code>--allow-warnings</code> 参数规避这些 warning，但我还是建议大家尽量将 warning 修改好。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint --allow-warnings</div></pre></td></tr></table></figure>
<p><code>pod lib lint *.podspec</code> 是只从本地验证你的 pod 能否通过验证.</p>
<p><code>pod spec lint*..podspec</code> 是从本地和远程验证你的 pod 能否通过验证.</p>
<p>大家可自行选择这两种方式。</p>
<h2 id="添加项目到-Github-Repository"><a href="#添加项目到-Github-Repository" class="headerlink" title="添加项目到  Github Repository"></a>添加项目到  Github Repository</h2><p>将本地的代码 push 到 Github 的 Repository, 就是刚才创建的 MZInsetLabel.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git add `文件`或者`文件夹`</div><div class="line"></div><div class="line">git commit -m &quot;Init&quot;</div><div class="line"></div><div class="line">git push</div></pre></td></tr></table></figure>
<p>在你的 Github Repository 上面创建一个 Release 作为 Tag（0.1.0版本），如图所示:<br><img src="/upload/images/2016/11/1/2.jpg" alt="1"></p>
<h2 id="推送到-cocoapods"><a href="#推送到-cocoapods" class="headerlink" title="推送到 cocoapods"></a>推送到 cocoapods</h2><p><strong>1. 注册 trunk</strong></p>
<blockquote>
<p>pod trunk register 你的邮箱 ‘用户名’ –description=’简单描述’</p>
</blockquote>
<p>完整命令如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register veryitman@126.com &apos;veryitman&apos; --description=&apos;mark&apos;</div></pre></td></tr></table></figure>
<p><strong>2. 打开邮箱, 激活邮件, 点击链接激活</strong></p>
<p><strong>3. 检查注册信息</strong></p>
<p>执行命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk me</div></pre></td></tr></table></figure>
<p><strong>4.添加到 cocoapods</strong></p>
<p>执行下面命令, 即可.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push MZInsetLabel.podspec</div></pre></td></tr></table></figure>
<p>成功的效果图:</p>
<p><img src="/upload/images/2016/11/1/3.jpg" alt="1"></p>
<p><img src="/upload/images/2016/11/1/4.png" alt="1"></p>
<h2 id="验证使用"><a href="#验证使用" class="headerlink" title="验证使用"></a>验证使用</h2><p><strong>1. 检查是否可以搜索到</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search MZInsetLabel</div></pre></td></tr></table></figure>
<p>如果搜索不到, 请执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup</div></pre></td></tr></table></figure>
<p><strong>2. 在项目中可以使用该项目</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;MZInsetLabel&apos;, &apos;~&gt; 0.1.0&apos;</div></pre></td></tr></table></figure>
<p>然后在你的测试项目中，执行 <code>pod install</code> 即可。</p>
<h2 id="可能遇到的麻烦"><a href="#可能遇到的麻烦" class="headerlink" title="可能遇到的麻烦"></a>可能遇到的麻烦</h2><p><strong>1. 执行 <code>pod trunk push *.podspec</code> 时, 好久没反应?</strong></p>
<blockquote>
<p>这种情况, 大多数都是因为你的网络不给力造成的, 如果你确定你的网络没问题, 那么请翻墙.</p>
</blockquote>
<p><strong>2. 执 行 <code>pod trunk push *.podspec</code> 时报错?</strong></p>
<p>报错信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ERROR | [iOS] unknown: Encountered an unknown error (Simulator iPhone 4s is not available.) during validation.</div></pre></td></tr></table></figure>
<p>这个错误是因为, 更新了 xcode8 之后不再支持 ios7 的缘故.</p>
<p>解决方案(我的), 升级 cocoapods.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install -n /usr/local/bin cocoapods</div></pre></td></tr></table></figure>
<p><strong>3. pod trunk push 失败</strong></p>
<p>失败提示信息类似:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Cloning into &apos;master&apos;...</div><div class="line">error: RPC failed; curl 56 SSLRead() return error -36</div><div class="line">fatal: The remote end hung up unexpectedly</div><div class="line">fatal: early EOF</div><div class="line">fatal: index-pack failed</div></pre></td></tr></table></figure>
<p>解决方案: 更新 gem</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem update --system</div></pre></td></tr></table></figure>
<h2 id="Git-命令行操作"><a href="#Git-命令行操作" class="headerlink" title="Git 命令行操作"></a>Git 命令行操作</h2><p><strong>1. 向远程 Repository 添加 tag</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git tag -m &quot;注释&quot; 0.0.1</div><div class="line"></div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<p>执行后，可以看到 Github Repository 上会多一个对应的 tag 版本。</p>
<p><strong>2.删除本地 Tag</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag --delete [TagName]</div></pre></td></tr></table></figure>
<p>如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag --delete 0.0.1</div></pre></td></tr></table></figure>
<p><strong>3. 删除远程 Tag</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push --delete origin [TagName]</div></pre></td></tr></table></figure>
<p>如:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push --delete origin 0.0.1</div></pre></td></tr></table></figure>
<blockquote>
<p>在 Github 上面如果你不小心打错了 Release, 然后删除该 Release.<br>你会发现, tag 无法删除.使用上面方式妥妥的解决.</p>
</blockquote>
<p>如果你删除 tag，想重新打一个相同的 tag，需要先删除本地的 tag，否则会失败。</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS cocoapods </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS: 谈谈 frame 和 bounds]]></title>
      <url>/2016/10/22/iOS-%E8%B0%88%E8%B0%88-frame-%E5%92%8C-bounds/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>大家知道, 我们可以设置 view 的四个角或者其中一个或者几个为圆角.</p>
<p>使用的方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (instancetype)bezierPathWithRoundedRect:(CGRect)rect </div><div class="line">            byRoundingCorners:(UIRectCorner)corners </div><div class="line">            cornerRadii:(CGSize)cornerRadii;</div></pre></td></tr></table></figure>
<p>拖好界面元素之后, 在代码中来修改其为圆角, 居然失败了.</p>
<p>想要的效果是这样的:<br><img src="/upload/images/2016/10/23/02.png" alt="1"></p>
<p>但是最终是这样的:<br><img src="/upload/images/2016/10/23/01.png" alt="1"></p>
<p>于是总结了一下, 分享给大家.</p>
<h2 id="设置圆角"><a href="#设置圆角" class="headerlink" title="设置圆角"></a>设置圆角</h2><p>这里分两种情况.</p>
<p><strong>第一种:</strong> 只放置控件, 不设置约束.</p>
<p>1.storyboard 中拖好控件.</p>
<p>注意: 这里我并没有设置任何约束.</p>
<p>2.vc 代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property (strong, nonatomic) IBOutlet UILabel *lb;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    [self changeLbCorner];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)changeLbCorner</div><div class="line">&#123;</div><div class="line">   UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.frame</div><div class="line">                                                  byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</div><div class="line">                                                        cornerRadii:CGSizeMake(7, 7)];</div><div class="line">   CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</div><div class="line">   maskLayer.frame = _lb.bounds;</div><div class="line">   maskLayer.path = maskPath.CGPath;</div><div class="line">   self.lb.layer.mask  = maskLayer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>代码编译运行到模拟器(iphone6), 看不到任何东西.</p>
<p>log 日志显示 lb 的信息如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ViewController viewDidLoad]:</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</div></pre></td></tr></table></figure>
<p>位置信息是正确的, 咨询检查发现是参数传入错误, 修改 changeLbCorner 方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (void)changeLbCorner</div><div class="line">&#123;</div><div class="line">    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.bounds</div><div class="line">                                                   byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</div><div class="line">                                                         cornerRadii:CGSizeMake(7, 7)];</div><div class="line">    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</div><div class="line">    maskLayer.frame = _lb.bounds;</div><div class="line">    maskLayer.path = maskPath.CGPath;</div><div class="line">    self.lb.layer.mask  = maskLayer;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里只是将 <code>self.lb.frame</code> 改成了 <code>self.lb.bounds</code>.</p>
<p>再次运行可以看到效果:<br><img src="/upload/images/2016/10/23/02.png" alt="1"></p>
<p><strong>第二种:</strong> 放置控件并设置约束.</p>
<p>1.设置 lb 距离父 view 左边和上边的约束.<br>2.运行上面的代码, 发现, lb 并没有被设置为圆角.<br>并且 lb 的宽度和高度变小了, 变成了文字的实际的宽高.<br><img src="/upload/images/2016/10/23/04.png" alt="1"></p>
<p>看 log:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ViewController viewDidLoad]:</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</div></pre></td></tr></table></figure>
<p>其实这个时候, (从上面图中可以看出) 这里的信息是错误的.</p>
<p>正确的信息应该是这样的(在 viewDidAppear 中)打印信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[ViewController viewDidAppear]:</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;58.5, 19.5&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;58.5, 19.5&#125;&#125;</div></pre></td></tr></table></figure>
<p>于是, 将</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[self changeLbCorner];</div></pre></td></tr></table></figure>
<p>放到 viewDidAppear 中, 圆角就正常了.</p>
<p>接下来, 我们把 lb 的宽高(136*39)约束也加上.</p>
<p>看一下, viewDidLoad 和 viewDidAppear 方法中打印的信息:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[ViewController viewDidLoad]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</div><div class="line">[ViewController viewDidAppear:]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</div></pre></td></tr></table></figure>
<p>可以看出, viewDidLoad 中错的一塌糊涂.</p>
<p>这里也说明一个问题:</p>
<blockquote>
<p>xib 或者 storyboard 中设置过约束(现实开发中, 基本都会设置约束)的组件, 在 viewDidLoad 中并没有完全 layout, 只是预加载了这些组件.<br>想获取组件如 frame 何 bounds 信息, 在 viewDidLoad 中是不合适甚至是错误的.</p>
</blockquote>
<p>那么, 问题来了, 哪里合适哪里正确.</p>
<p>上面如果你认真看了, 在 viewDidAppear 中是可以正确获取的, 那么还有没有其他方法可以获取呢?</p>
<h2 id="VC-生命周期函数"><a href="#VC-生命周期函数" class="headerlink" title="VC 生命周期函数"></a>VC 生命周期函数</h2><p>要回答上面的问题, 大家要知道 vc 的生命周期函数.</p>
<p>上面的例子, 可以看出: 当函数 ViewDidLoad 被调用的时候，IBQutlets 已经被连接，但View 还没有被加载出来，无法获取 frame 等信息.<br>可以在 viewDidLoad 中完成在 IB 中不能完成的 view 的自定义。</p>
<p>关于 loadView 和 viewDidLoad 在后面博客跟大家分享.</p>
<p>今天要说的是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">viewDidLayoutSubviews</div></pre></td></tr></table></figure>
<p><code>viewDidLayoutSubviews</code> 在 VC 子视图位置或者尺寸 (position|size) 被改变的时候被调用.</p>
<p>直到 AutoLayout 已经完成工作的时候才会被确定，所以在执行完 AutoLayout 之后会调用此方法. 换句话说, view 的 frame 和 bounds 这个时候是正确可以获取的.</p>
<p><code>viewDidLayoutSubviews</code> 这个方法在 <code>viewDidAppear</code> 之前被调用, 有可能会被调用多次.</p>
<p>即依赖 bounds 或者 frame 的操作，都应该放在<code>viewDidLayoutSubviews</code> 中，而不是 <code>viewDidLoad</code> 或 <code>viewWillAppear</code> 中.</p>
<p>改变后的代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">#define MZLog(fmt, ...) NSLog((@&quot;%s\n&quot; fmt), __FUNCTION__, ##__VA_ARGS__)</div><div class="line">#define MZLogLbInfo \</div><div class="line">MZLog(@&quot;lb.bounds: %@ \nlb.frame: %@&quot;, NSStringFromCGRect(self.lb.bounds), NSStringFromCGRect(self.lb.frame))</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property (strong, nonatomic) IBOutlet UILabel *lb;</div><div class="line">@property (strong, nonatomic) IBOutlet UILabel *displayedText;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line"></div><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillLayoutSubviews</div><div class="line">&#123;</div><div class="line">    [super viewWillLayoutSubviews];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLayoutSubviews</div><div class="line">&#123;</div><div class="line">    [super viewDidLayoutSubviews];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">    </div><div class="line">    [self changeLbCorner];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewDidAppear:animated];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark Callback.</div><div class="line"></div><div class="line">- (void)changeLbCorner</div><div class="line">&#123;</div><div class="line">    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.bounds</div><div class="line">                                                   byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</div><div class="line">                                                         cornerRadii:CGSizeMake(7, 7)];</div><div class="line">    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</div><div class="line">    maskLayer.frame = _lb.bounds;</div><div class="line">    maskLayer.path = maskPath.CGPath;</div><div class="line">    self.lb.layer.mask  = maskLayer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<p>打印的 log 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[ViewController viewDidLoad]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</div><div class="line">[ViewController viewWillAppear:]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</div><div class="line">[ViewController viewWillLayoutSubviews]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;0, 0&#125;, &#123;1000, 1000&#125;&#125;</div><div class="line">[ViewController viewDidLayoutSubviews]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</div><div class="line">[ViewController viewWillLayoutSubviews]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</div><div class="line">[ViewController viewDidLayoutSubviews]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</div><div class="line">[ViewController viewDidAppear:]</div><div class="line">lb.bounds: &#123;&#123;0, 0&#125;, &#123;136, 39&#125;&#125; </div><div class="line">lb.frame: &#123;&#123;39, 89&#125;, &#123;136, 39&#125;&#125;</div></pre></td></tr></table></figure>
<h2 id="frame-和-bounds"><a href="#frame-和-bounds" class="headerlink" title="frame 和 bounds"></a>frame 和 bounds</h2><p>上面的例子, 大家看到由于传入了 frame 而不是 bounds 造成设置圆角失败.</p>
<p>下面说说 frame 和 bounds.</p>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>从网上”偷”过来的图</p>
<p><img src="/upload/images/2016/10/23/03.jpg" alt="1"></p>
<blockquote>
<p>1.frame</p>
</blockquote>
<p>该 view 在父 view 坐标系统中的位置和大小(参照点是，父坐标系统).</p>
<blockquote>
<p>2.bounds</p>
</blockquote>
<p>该 view 在本地坐标系统中的位置和大小(参照点是，本地坐标系统，就相当于 view 自己的坐标系统，以(0,0)点为起点).<br>其实本地坐标系统的关键就是要知道的它的原点(0,0).</p>
<p>bounds 默认值是(0, 0, width, height).除非手动改变 bounds 的值.</p>
<p>单纯的从概念上面, 很难理解二者的区别.</p>
<p>提供一个例子, 例子大概是这样的:<br>redView 是 yellowView 的父视图, yellowView 是 blueView 的父视图.</p>
<p>通过改变 redView 的 bounds 会影响子视图的位置(不是frame).<br>将 redView 的 bounds 起点设为(-20, -20), 子视图相对于 redView 的本地坐标(0, 0), 也就需要往下增加20, 这样, yellowView 就往下移动了.</p>
<h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图:"></a>效果图:</h3><p><img src="/upload/images/2016/10/23/05.png" alt="1"></p>
<p><img src="/upload/images/2016/10/23/06.png" alt="1"></p>
<p><img src="/upload/images/2016/10/23/07.png" alt="1"></p>
<h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div></pre></td><td class="code"><pre><div class="line">#import &quot;ViewController.h&quot;</div><div class="line"></div><div class="line">#define MZLog(fmt, ...) NSLog((@&quot;%s\n&quot; fmt), __FUNCTION__, ##__VA_ARGS__)</div><div class="line">#define MZLogLbInfo \</div><div class="line">MZLog(@&quot;lb.bounds: %@ \nlb.frame: %@&quot;, NSStringFromCGRect(self.lb.bounds), NSStringFromCGRect(self.lb.frame))</div><div class="line"></div><div class="line">@interface ViewController ()</div><div class="line"></div><div class="line">@property (strong, nonatomic) IBOutlet UILabel *lb;</div><div class="line">@property (strong, nonatomic) IBOutlet UILabel *displayedText;</div><div class="line"></div><div class="line">@end</div><div class="line"></div><div class="line">@implementation ViewController</div><div class="line">&#123;</div><div class="line">    UIView *redView;</div><div class="line">    UIView *yellowView;</div><div class="line">    UIView *blueView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLoad</div><div class="line">&#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">    </div><div class="line">    </div><div class="line">    // 将 redView 添加到 self.view</div><div class="line">    &#123;</div><div class="line">        redView = [[UIView alloc] initWithFrame:CGRectMake(100, 200, 120, 120)];</div><div class="line">        redView.backgroundColor = [UIColor redColor];</div><div class="line">        [self.view addSubview:redView];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 将 yellowView 添加到 redView</div><div class="line">    &#123;</div><div class="line">        yellowView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 90, 90)];</div><div class="line">        yellowView.backgroundColor = [UIColor yellowColor];</div><div class="line">        [redView addSubview:yellowView];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 将 blueView 添加到 yellowView</div><div class="line">    &#123;</div><div class="line">        blueView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, 60, 60)];</div><div class="line">        blueView.backgroundColor = [UIColor blueColor];</div><div class="line">        [yellowView addSubview:blueView];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    [self logViewInfo];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewWillAppear:animated];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewWillLayoutSubviews</div><div class="line">&#123;</div><div class="line">    [super viewWillLayoutSubviews];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidLayoutSubviews</div><div class="line">&#123;</div><div class="line">    [super viewDidLayoutSubviews];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">    </div><div class="line">    [self changeLbCorner];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)viewDidAppear:(BOOL)animated</div><div class="line">&#123;</div><div class="line">    [super viewDidAppear:animated];</div><div class="line">    </div><div class="line">    MZLogLbInfo;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark Callback.</div><div class="line"></div><div class="line">- (void)changeLbCorner</div><div class="line">&#123;</div><div class="line">    UIBezierPath *maskPath = [UIBezierPath bezierPathWithRoundedRect:self.lb.bounds</div><div class="line">                                                   byRoundingCorners:UIRectCornerTopRight|UIRectCornerBottomRight</div><div class="line">                                                         cornerRadii:CGSizeMake(7, 7)];</div><div class="line">    CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];</div><div class="line">    maskLayer.frame = _lb.bounds;</div><div class="line">    maskLayer.path = maskPath.CGPath;</div><div class="line">    self.lb.layer.mask  = maskLayer;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)doResetAction:(id)sender</div><div class="line">&#123;</div><div class="line">    [UIView animateWithDuration:1.0f animations:^&#123;</div><div class="line">        [redView setBounds:CGRectMake(0, 0, 120, 120)];</div><div class="line">        [yellowView setBounds:CGRectMake(0, 0, 90, 90)];</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        [self logViewInfo];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)doChangeRedViewBounds:(id)sender</div><div class="line">&#123;</div><div class="line">    [UIView animateWithDuration:1.0f animations:^&#123;</div><div class="line">        [redView setBounds:CGRectMake(-20, -20, 120, 120)];</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        [self logViewInfo];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)doChangeYellowViewBounds:(id)sender</div><div class="line">&#123;</div><div class="line">    [UIView animateWithDuration:1.0f animations:^&#123;</div><div class="line">        [yellowView setBounds:CGRectMake(-20, -20, 90, 90)];</div><div class="line">    &#125; completion:^(BOOL finished) &#123;</div><div class="line">        [self logViewInfo];</div><div class="line">    &#125;];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark Display Debug Info.</div><div class="line"></div><div class="line">- (void)logViewInfo</div><div class="line">&#123;</div><div class="line">    NSString *log4rView = [NSString stringWithFormat:@&quot;RedView\nframe:%@ \nbounds:%@&quot;,</div><div class="line">                           NSStringFromCGRect(redView.frame), NSStringFromCGRect(redView.bounds)];</div><div class="line">    NSString *log4yView = [NSString stringWithFormat:@&quot;YellowView\nframe:%@ \nbounds:%@&quot;,</div><div class="line">                           NSStringFromCGRect(yellowView.frame), NSStringFromCGRect(yellowView.bounds)];</div><div class="line">    NSString *log4bView = [NSString stringWithFormat:@&quot;BlueView\nframe:%@ \nbounds:%@&quot;,</div><div class="line">                           NSStringFromCGRect(blueView.frame), NSStringFromCGRect(blueView.bounds)];</div><div class="line">    </div><div class="line">    NSString *log = [NSString stringWithFormat:@&quot;%@\n%@\n%@&quot;, log4rView, log4yView, log4bView];</div><div class="line">    [self display:log];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)display:(NSString *)content</div><div class="line">&#123;</div><div class="line">    self.displayedText.text = content;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>frame, 描述的是当前视图在其父视图中的位置和大小.<br>bounds, 描述的是当前视图在其自身坐标系统中的位置和大小.</li>
</ul>
<p>所以, bounds 默认是 <code>(0, 0, frame.size.width, frame.size.height)</code></p>
<p>另外, 还有一个 <code>center</code> 描述的是当前视图的中心点在其父视图中的位置.</p>
<ul>
<li>bounds 和 frame 是两个不等同的概念, 改变 bounds 会影响子视图的位置(人眼看到其改变了位置), 设置 bounds 可以修改自己坐标系的原点位置. 但是不会改变子视图的 bounds 和 frame.</li>
</ul>
<blockquote>
<p>明白上面的道理很重要, iOS 中滚动视图能让你看到其中的内容, 正是利用了 contentoffset 和 bounds 属性.</p>
<p>这里以 tableView 为例子, 当我们向上滚动 tableView, tableView 的 contentOffset 和 bounds 的坐标都是正数, 相当于其本地坐标(0, 0)改变了即增加了(坐标系往下为增加), 那么其子视图就会向上去.</p>
<p>向下滑动时, 也是同一个道理.<br>可以通过运行 <a href="https://github.com/veryitman/iOSDemo/tree/master/na" target="_blank" rel="noopener">完整 Demo</a> 中[查看 TableView]按钮来打开例子, 看日志.</p>
</blockquote>
<ul>
<li><p>改变子视图所有父视图的 bounds, 子视图的位置是累加改变的.<br>如上面改变 redView 和 yellowView 的 bounds, blueView 的位置相对 redView 往下移动了 40.</p>
</li>
<li><p>当同一个视图的 bounds 大于 frame, 会导致 frame 被撑大，frame 的 x, y, width, height 都会被改变. 反之, bounds 小于 frame, frame 也会变小.</p>
</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ol>
<li><p>GitHub 上面可以下载 <a href="https://github.com/veryitman/iOSDemo/tree/master/na" target="_blank" rel="noopener">完整 Demo</a></p>
</li>
<li><p>推荐之前写在 CSDN 上的博文: <a href="http://blog.csdn.net/veryitman/article/details/51622235" target="_blank" rel="noopener">iOS UI 技巧: 视图无法被点击
</a></p>
</li>
</ol>
<p>可关注我的微信公众号:<br><img src="/upload/me/qrcode_wx.jpg" alt="1"></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS frame bounds </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RN: 模拟 Mobx]]></title>
      <url>/2016/10/11/RN-%E6%A8%A1%E6%8B%9F-Mobx/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看过 [React Native 使用 Mobx] 这篇博客的同学, 对 Mobx 应该有了一个简单直观的认识.</p>
<p>其实, 我们完全可以使用 RN 中的 State 来达到同样的效果.</p>
<p>今天的主要内容是使用 State 来模拟 Mobx, 也算是对 Mobx 的进一步认识.</p>
<p>效果</p>
<p>实现效果和 [React Native 使用 Mobx] 中的效果一致, 只是代码没有使用 Mobx 框架.</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="LegacyCounter-js"><a href="#LegacyCounter-js" class="headerlink" title="LegacyCounter.js"></a>LegacyCounter.js</h3><blockquote>
<p>Add 和 Minus 两个按钮分别触发各自的回调, 来更新 state.<br>使用 state 的变化来到达更新 View (计数的 Text 会相应的做出变化)的目的.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 模拟 Mobx 在 ReactNative 上的一个小例子.</div><div class="line"> * </div><div class="line"> * state -&gt; view</div><div class="line"> */</div><div class="line">&apos;use strict&apos;;</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  TouchableHighlight</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">class LegacyCounter extends Component &#123;</div><div class="line">    //构造方法</div><div class="line">    constructor(props) &#123;</div><div class="line">        super(props);</div><div class="line">    </div><div class="line">        this.state = &#123;</div><div class="line">            //计数</div><div class="line">            counter: 0</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    render () &#123;</div><div class="line">        return (</div><div class="line">          &lt;View style = &#123;styles.container&#125;&gt;</div><div class="line">            &#123;/*加一*/&#125;</div><div class="line">            &lt;TouchableHighlight</div><div class="line">                onPress = &#123;() =&gt; &#123;this.setState(&#123;</div><div class="line">                    counter: ++this.state.counter</div><div class="line">                &#125;)&#125;&#125;&gt;</div><div class="line">                &lt;Text&gt;Add&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">            &#123;/* 显示处理结果 */&#125;</div><div class="line">            &lt;Text style = &#123;styles.resultTxtStyle&#125;&gt;</div><div class="line">            &#123;this.state.counter&#125;</div><div class="line">            &lt;/Text&gt;</div><div class="line">            &#123;/*减一*/&#125;</div><div class="line">            &lt;TouchableHighlight </div><div class="line">                onPress = &#123;() =&gt; &#123;this.setState(&#123;</div><div class="line">                    counter: --this.state.counter</div><div class="line">                &#125;)&#125;&#125;&gt;</div><div class="line">                &lt;Text&gt;Minus&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export default class LegacyComponent extends Component &#123;</div><div class="line">    render () &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style = &#123;&#123;flex: 1, marginTop: 64&#125;&#125;&gt;</div><div class="line">            </div><div class="line">                &lt;LegacyCounter/&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/* 样式定义 */</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flexDirection: &apos;row&apos;,</div><div class="line">        justifyContent: &apos;space-around&apos;</div><div class="line">    &#125;,</div><div class="line">    resultTxtStyle: &#123;</div><div class="line">        fontSize: 22, </div><div class="line">        color: &apos;red&apos;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="index-ios-js"><a href="#index-ios-js" class="headerlink" title="index.ios.js"></a>index.ios.js</h3><blockquote>
<p>这个文件很简单, 只是调用 LegacyCounter 中的组件.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">//引入自定义模块</div><div class="line">import LegacyComponent from &apos;./js/Mobx/LegacyCounter&apos;</div><div class="line">import &#123;</div><div class="line">  AppRegistry</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">class RNMobxDemo extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">            &lt;LegacyComponent/&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent(&apos;RNMobxDemo&apos;, () =&gt; MZRNTutorial);</div></pre></td></tr></table></figure>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果你想了解更多关于 RN 中 State 的知识, 请移步官方文档查阅 State 的用法.</p>
<p>后续会给大家带来更多关于 RN 这些方面的东西.</p>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS Android ReactNative </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RN: 使用 Mobx]]></title>
      <url>/2016/10/06/RN-%E4%BD%BF%E7%94%A8-Mobx/</url>
      <content type="html"><![CDATA[<h2 id="来由"><a href="#来由" class="headerlink" title="来由"></a>来由</h2><p>在 <a href="https://jsfiddle.net/24u7juu0/" target="_blank" rel="noopener">JSFiddler</a> 上面看到 React 结合 Mobx 的一个小例子.</p>
<p>爱不释手, 遂拿来改造一下, 让其能在 RN 上面一展雄风.</p>
<p>之前听过 Mobx, 说是要替代 Redux, 反正我是不知道这些东东, 第一次听说没有什么感觉!<br>如今又再次偶遇 Mobx, 决定认真学习一下它.</p>
<h2 id="Mobx-简介"><a href="#Mobx-简介" class="headerlink" title="Mobx 简介"></a>Mobx 简介</h2><p>Mobx 的 <a href="https://github.com/mobxjs/mobx" target="_blank" rel="noopener">github</a> 地址.<br>目前关于他和 React Native 的(中文)资料不多, 大多数是关于 React 的.</p>
<p>看来想学好 React Native, 还是要做好 React 的功课呀!</p>
<p>官网给了一个 Mobx 的图:<br><img src="/upload/images/2016/10/08/rn_mobx_ef4.png" alt="1"></p>
<p>我也是刚接触这个「牛逼闪闪」的 Mobx, 共勉!</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>今天的例子很简单, 效果图如下<br><img src="/upload/images/2016/10/08/rn_mobx_ef1.png" alt="1"></p>
<p>点击 Add<br><img src="/upload/images/2016/10/08/rn_mobx_ef3.png" alt="1"></p>
<p>点击 Minus<br><img src="/upload/images/2016/10/08/rn_mobx_ef2.png" alt="1"></p>
<p>下面具体说说如何搞定这个 Demo.</p>
<h2 id="准备「材料」"><a href="#准备「材料」" class="headerlink" title="准备「材料」"></a>准备「材料」</h2><p>这里假设你已经具备 React Native 的基本开发环境, 至少成功运行过一次 React Native 的程序.</p>
<h3 id="1-创建-React-Native-项目"><a href="#1-创建-React-Native-项目" class="headerlink" title="1.创建 React Native 项目"></a>1.创建 React Native 项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native init RNMobxDemo</div></pre></td></tr></table></figure>
<p>你也可以给你的工程取一个你喜欢的名字.<br>这里姑且称之为 RNMobxDemo</p>
<h3 id="2-安装-mobx-和-mobx-react"><a href="#2-安装-mobx-和-mobx-react" class="headerlink" title="2.安装 mobx 和 mobx-react"></a>2.安装 mobx 和 mobx-react</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i mobx mobx-react --save</div></pre></td></tr></table></figure>
<h3 id="3-Counter-js"><a href="#3-Counter-js" class="headerlink" title="3.Counter.js"></a>3.Counter.js</h3><blockquote>
<p>该文件使用了 mobx 和 mobx-react 的组件.</p>
</blockquote>
<p>具体代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  TouchableHighlight</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">import &#123; observer &#125; from &apos;mobx-react/native&apos;;</div><div class="line">import &#123; observable &#125; from &apos;mobx&apos;;</div><div class="line">// 被观察者, 观察 counter 变量  </div><div class="line">const storer = observable(&#123;</div><div class="line">    counter: 0</div><div class="line">&#125;);</div><div class="line">//---------------------------------</div><div class="line">//  ES6 写法: Arrow Function</div><div class="line">//---------------------------------</div><div class="line">storer.plus =  () =&gt; &#123;</div><div class="line">    storer.counter ++;</div><div class="line">&#125;;</div><div class="line">storer.minus = () =&gt; &#123;</div><div class="line">    storer.counter --;</div><div class="line">&#125;;</div><div class="line">class Counter extends Component &#123;</div><div class="line">    render () &#123;</div><div class="line">        return (</div><div class="line">          &lt;View style = &#123;styles.container&#125;&gt;</div><div class="line">            &#123;/*加一*/&#125;</div><div class="line">            &lt;TouchableHighlight</div><div class="line">                onPress = &#123;() =&gt; &#123;this.props.store.plus()&#125;&#125;&gt;</div><div class="line">                &lt;Text&gt;Add&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">            &#123;/* 显示处理结果 */&#125;</div><div class="line">            &lt;Text style = &#123;styles.resultTxtStyle&#125;&gt;</div><div class="line">            &#123;this.props.store.counter&#125;</div><div class="line">            &lt;/Text&gt;</div><div class="line">            &#123;/*减一*/&#125;</div><div class="line">            &lt;TouchableHighlight </div><div class="line">                onPress = &#123;() =&gt; &#123;storer.minus()&#125;&#125;&gt;</div><div class="line">                &lt;Text&gt;Minus&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 使用 observer 创建</div><div class="line">const CounterComponent = observer(Counter);</div><div class="line">export default class ReactionsComponent extends Component &#123;</div><div class="line">    render () &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style = &#123;&#123;flex: 1, marginTop: 64&#125;&#125;&gt;</div><div class="line">            </div><div class="line">                &lt;CounterComponent store = &#123;storer&#125; /&gt; </div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/* 样式定义 */</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flexDirection: &apos;row&apos;,</div><div class="line">        justifyContent: &apos;space-around&apos;</div><div class="line">    &#125;,</div><div class="line">    resultTxtStyle: &#123;</div><div class="line">        fontSize: 22, </div><div class="line">        color: &apos;red&apos;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h3 id="4-index-ios-js"><a href="#4-index-ios-js" class="headerlink" title="4.index.ios.js"></a>4.index.ios.js</h3><blockquote>
<p>该文件使用自定义的组件 ReactionsComponent</p>
</blockquote>
<p>具体代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">//引入自定义模块</div><div class="line">import ReactionsComponent from &apos;./js/Mobx/Counter&apos;</div><div class="line">import &#123;</div><div class="line">  AppRegistry</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">class RNMobxDemo extends Component &#123;</div><div class="line">    render() &#123;</div><div class="line">        return(</div><div class="line">            &lt;ReactionsComponent/&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent(&apos;RNMobxDemo&apos;, () =&gt; MZRNTutorial);</div></pre></td></tr></table></figure>
<p>Mobx 支持「注解」.</p>
<p>这里的注解就是 ES7 中的 decorators (装饰者模式).</p>
<p>下面代码是使用注解的方式来声明, 但是你需要安装相关的插件(babel plugin)来支持.</p>
<p>安装该插件很简单, 在项目根目录按照下面步骤即可:</p>
<blockquote>
<p>Step 1: 创建 .babelrc 文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch .babelrc</div></pre></td></tr></table></figure>
<blockquote>
<p>Step 2: 编辑 .babelrc 文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"> &apos;presets&apos;: [&apos;react-native&apos;],</div><div class="line"> &apos;plugins&apos;: [&apos;transform-decorators-legacy&apos;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>Step 3: 安装插件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i babel-plugin-transform-decorators-legacy babel-preset-react-native-stage-0 --save-dev</div></pre></td></tr></table></figure>
<p>修改「Counter.js」, 代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  Text,</div><div class="line">  TouchableHighlight</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">import &#123; observer &#125; from &apos;mobx-react/native&apos;;</div><div class="line">import &#123; observable &#125; from &apos;mobx&apos;;</div><div class="line">// 被观察者, 观察 counter 变量  </div><div class="line">const storer = observable(&#123;</div><div class="line">    counter: 0</div><div class="line">&#125;);</div><div class="line">//---------------------------------</div><div class="line">//  ES6 写法: Arrow Function</div><div class="line">//---------------------------------</div><div class="line">storer.plus =  () =&gt; &#123;</div><div class="line">    storer.counter ++;</div><div class="line">&#125;;</div><div class="line">storer.minus = () =&gt; &#123;</div><div class="line">    storer.counter --;</div><div class="line">&#125;;</div><div class="line">@observer //使用@方式来前置声明</div><div class="line">class Counter extends Component &#123;</div><div class="line">    render () &#123;</div><div class="line">        return (</div><div class="line">          &lt;View style = &#123;styles.container&#125;&gt;</div><div class="line">            &#123;/*加一*/&#125;</div><div class="line">            &lt;TouchableHighlight</div><div class="line">                onPress = &#123;() =&gt; &#123;this.props.store.plus()&#125;&#125;&gt;</div><div class="line">                &lt;Text&gt;Add&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">            &#123;/* 显示处理结果 */&#125;</div><div class="line">            &lt;Text style = &#123;styles.resultTxtStyle&#125;&gt;</div><div class="line">            &#123;this.props.store.counter&#125;</div><div class="line">            &lt;/Text&gt;</div><div class="line">            &#123;/*减一*/&#125;</div><div class="line">            &lt;TouchableHighlight </div><div class="line">                onPress = &#123;() =&gt; &#123;storer.minus()&#125;&#125;&gt;</div><div class="line">                &lt;Text&gt;Minus&lt;/Text&gt;</div><div class="line">            &lt;/TouchableHighlight&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export default class ReactionsComponent extends Component &#123;</div><div class="line">    render () &#123;</div><div class="line">        return (</div><div class="line">            &lt;View style = &#123;&#123;flex: 1, marginTop: 64&#125;&#125;&gt;</div><div class="line">            </div><div class="line">                &lt;Counter store = &#123;storer&#125; /&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">/* 样式定义 */</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    container: &#123;</div><div class="line">        flexDirection: &apos;row&apos;,</div><div class="line">        justifyContent: &apos;space-around&apos;</div><div class="line">    &#125;,</div><div class="line">    resultTxtStyle: &#123;</div><div class="line">        fontSize: 22, </div><div class="line">        color: &apos;red&apos;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>从例子可以看出, storer 相当于 state, 当 state 发生改变了, 视图 View 也跟着变化.<br>也就是状态驱动.</p>
<p>Android 开发的同学应该知道 Adapter 和 notifyDatasetChanged 的机制, 当数据源发生变化的时候, 可以通知视图进行刷新操作.</p>
<p>这里的 Mobx 也可以这么简单的理解.</p>
<p>Mobx 的强大之处还有很多, 需要慢慢学习和挖掘.</p>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS Android ReactNative </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RN: 0.34 运行在 Android 的问题]]></title>
      <url>/2016/09/26/RN-0-34-%E8%BF%90%E8%A1%8C%E5%9C%A8-Android-%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>今天闲来无事, 想使用 RN 工程在 Android 设备上面跑跑.</p>
<p>想看看运行效果怎么样?!</p>
<h2 id="适合读者"><a href="#适合读者" class="headerlink" title="适合读者"></a>适合读者</h2><ul>
<li>有 Android 开发基础.</li>
<li>会使用 Android Studio.</li>
<li>初级 React Native 的开发者.</li>
</ul>
<h2 id="开发环境和工具"><a href="#开发环境和工具" class="headerlink" title="开发环境和工具"></a>开发环境和工具</h2><ul>
<li>Android Studio 2.2</li>
<li>ReactNative 0.34</li>
<li>Android 模拟器</li>
<li>Mac 操作系统</li>
</ul>
<h2 id="预期效果"><a href="#预期效果" class="headerlink" title="预期效果"></a>预期效果</h2><p>不出所料, 真的不能一帆风顺的 Run.</p>
<p>在我的博客 ReactNative: 不一样的 HelloWorld 中展示了 RN 在 iOS 上面的运行情况.</p>
<p>今天还是这个例子, 部署和运行到 Android 上面.</p>
<p>效果如下:<br><img src="/upload/images/2016/9/26/rn_and_eff_01.png" alt="1"></p>
<p>在这个过程中, 遇到几个问题.</p>
<p>特此记录.</p>
<h2 id="问题描述和解决"><a href="#问题描述和解决" class="headerlink" title="问题描述和解决"></a>问题描述和解决</h2><h3 id="问题1-直接运行-crash"><a href="#问题1-直接运行-crash" class="headerlink" title="问题1: 直接运行 crash"></a>问题1: 直接运行 crash</h3><p>log 描述(部分)</p>
<blockquote>
<p>E/AndroidRuntime: FATAL EXCEPTION: main<br>Process: com.mzrntutorial, PID: 5849<br>java.lang.RuntimeException:<br>Unable to start activity ComponentInfo{com.mzrntutorial/com.mzrntutorial.MainActivity}: java.lang.ClassCastException: android.app.Application cannot be cast to com.facebook.react.ReactApplication<br>at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2416)<br>at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2476)     </p>
</blockquote>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>Manifest.xml 配置 Application 名称</p>
<p>android:name=”.MainApplication”</p>
<h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2:"></a>问题2:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">could not get batchedbridge make sure your bundle is packaged correctly</div></pre></td></tr></table></figure>
<p>解决问题1后, 再次运行, 会报问题2.<br>该问题是因为没有启动本地的 server.</p>
<p>使用 Xcode 可以自动运行本地 server.<br>可以参考博客 React Native 如何启动 local server</p>
<h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>手动启动 server.</p>
<p>cd 项目根目录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native start</div></pre></td></tr></table></figure>
<h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3:"></a>问题3:</h3><blockquote>
<p>模拟器没有 menu 按键, 无法 Reload</p>
</blockquote>
<p>这个其实不是什么大问题, 但是对于初学者, 也算是一个问题.</p>
<p>新版的 Android SDK 创建的模拟器没有 menu 按键了</p>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案:"></a>解决方案:</h3><p>连续按两次字母 r 即可刷新.</p>
<p>这些问题, FB 后面肯定会解决的.<br>阿门!</p>
<h2 id="附录-代码"><a href="#附录-代码" class="headerlink" title="附录(代码)"></a>附录(代码)</h2><p>index.ios.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;getPlatformString, isIOS&#125; from &apos;./js/Generals/Utils/IDSRNPlatformUtil&apos;;</div><div class="line">import MZButton from &apos;./js/ReactUIKit/MZButton&apos;</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Platform,</div><div class="line">  TouchableOpacity,</div><div class="line">  TouchableHighlight</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">// 调用其他模块方法</div><div class="line">var os = getPlatformString();</div><div class="line">var iosPlatform = isIOS();//when run on &apos;ios&apos; true</div><div class="line">class MZRNTutorial extends Component &#123;</div><div class="line">  constructor(props)</div><div class="line">  &#123;</div><div class="line">      super(props);</div><div class="line">      this.state = &#123;status:1&#125;;</div><div class="line">  &#125;</div><div class="line">  customPressHandler = () =&gt; &#123;</div><div class="line">      alert(&apos;当前状态: &apos; + this.state.status);</div><div class="line">      this.state.status = 2;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    console.log(&apos;render ...&apos;);</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">          Near use React Native!</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          To get started, edit index.android.js</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">          Press &apos;R&apos; twice to reload,&#123;&apos;\n&apos;&#125;</div><div class="line">          or shake for dev menu</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &#123;/* 显示当前平台信息*/&#125;</div><div class="line">        &lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">            current os: &#123;Platform.OS&#125;</div><div class="line">        &lt;/Text&gt;</div><div class="line">        &#123;/*</div><div class="line">        &lt;TouchableOpacity</div><div class="line">            style=&#123;styles.button&#125;</div><div class="line">            onPress=&#123;this.customPressHandler&#125;</div><div class="line">            &gt;</div><div class="line">            &lt;Text style=&#123;styles.buttonText&#125;&gt;确定&lt;/Text&gt;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">        */&#125;</div><div class="line">        &lt;MZButton text=&quot;确定?&quot; bgColor=&quot;green&quot; dianjishijian=&#123;()=&gt;&#123;alert(&apos;居然点击确定?!&apos;)&#125;&#125;&gt;</div><div class="line">        &lt;/MZButton&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  button: &#123;</div><div class="line">    height: 40,</div><div class="line">    width: 150,</div><div class="line">    borderRadius: 20,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;green&apos;,</div><div class="line">    overflow: &apos;hidden&apos;</div><div class="line">  &#125;,</div><div class="line">  buttonText: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;white&apos;</div><div class="line">  &#125;,</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: &apos;center&apos;,</div><div class="line">    alignItems: &apos;center&apos;,</div><div class="line">    backgroundColor: &apos;#F5FCFF&apos;,</div><div class="line">  &#125;,</div><div class="line">  welcome: &#123;</div><div class="line">    fontSize: 20,</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    margin: 10,</div><div class="line">  &#125;,</div><div class="line">  instructions: &#123;</div><div class="line">    textAlign: &apos;center&apos;,</div><div class="line">    color: &apos;#333333&apos;,</div><div class="line">    marginBottom: 5,</div><div class="line">  &#125;,</div><div class="line">  flowRight: &#123;</div><div class="line">   flexDirection: &apos;row&apos;,</div><div class="line">   alignItems: &apos;center&apos;,</div><div class="line">   alignSelf: &apos;stretch&apos;</div><div class="line"> &#125;,</div><div class="line">&#125;);</div><div class="line">AppRegistry.registerComponent(&apos;MZRNTutorial&apos;, () =&gt; MZRNTutorial);</div></pre></td></tr></table></figure>
<p>MZButton.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Platform,</div><div class="line">  TouchableOpacity</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">//-----------------------------------------------------</div><div class="line">//外部使用该模块, ES6需要使用关键字 export default</div><div class="line">//-----------------------------------------------------</div><div class="line">export default class MZButton extends Component</div><div class="line">&#123;</div><div class="line">    constructor(props)</div><div class="line">    &#123;</div><div class="line">        super(props);</div><div class="line">        this.state = &#123;status:1&#125;;</div><div class="line">    &#125;</div><div class="line">    costumPressHandler = () =&gt; &#123;</div><div class="line">        alert(&apos;当前状态:&apos; + this.state.status);</div><div class="line">        const &#123;dianjishijian&#125; = this.props;</div><div class="line">        dianjishijian();</div><div class="line">    &#125;;</div><div class="line">    // 使用属性值设置背景颜色</div><div class="line">    // style=&#123;[styles.button], &#123;backgroundColor:this.props.beijingyanse&#125;&#125;</div><div class="line">    render() &#123;</div><div class="line">        //解构</div><div class="line">        const &#123;text, bgColor&#125; = this.props;</div><div class="line">        return (</div><div class="line">            &lt;TouchableOpacity</div><div class="line">                style=&#123;[styles.button], &#123;backgroundColor:bgColor&#125;&#125;</div><div class="line">                onPress = &#123;this.costumPressHandler&#125;</div><div class="line">                &gt;</div><div class="line">                &lt;Text style=&#123;styles.buttonText&#125;&gt;</div><div class="line">                    &#123;/* 使用属性值 */&#125;</div><div class="line">                    &#123;this.props.text&#125;</div><div class="line">                &lt;/Text&gt;</div><div class="line">            &lt;/TouchableOpacity&gt;</div><div class="line">        )</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">    button: &#123;</div><div class="line">      height: 40,</div><div class="line">      width: 150,</div><div class="line">      borderRadius: 20,</div><div class="line">      justifyContent: &apos;center&apos;,</div><div class="line">      backgroundColor: &apos;green&apos;,</div><div class="line">      overflow: &apos;hidden&apos;</div><div class="line">    &#125;,</div><div class="line">    buttonText: &#123;</div><div class="line">      textAlign: &apos;center&apos;,</div><div class="line">      color: &apos;white&apos;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>IDSRNPlatformUtil.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class="line">import &#123;</div><div class="line">    Platform</div><div class="line">&#125; from &apos;react-native&apos;;</div><div class="line">export function getPlatformString()</div><div class="line">&#123;</div><div class="line">    console.log(Platform.OS);</div><div class="line">    </div><div class="line">    return Platform.OS;</div><div class="line">&#125;</div><div class="line">export function isIOS()</div><div class="line">&#123;</div><div class="line">    return Platform.OS === &apos;ios&apos;;</div><div class="line">&#125;</div><div class="line">export function isAndroid()</div><div class="line">&#123;</div><div class="line">    return Platform.OS == &apos;android&apos;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android ReactNative </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS 项目: 打造本地 pod 库]]></title>
      <url>/2016/09/25/iOS-%E9%A1%B9%E7%9B%AE-%E6%89%93%E9%80%A0%E6%9C%AC%E5%9C%B0-pod-%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>本篇的姊妹篇 <a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/" target="_blank" rel="noopener">Cocoapods 管理开源项目</a> 已准备完毕，直戳 <a href="http://www.veryitman.com/2016/11/01/Cocoapods-%E7%AE%A1%E7%90%86%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/" target="_blank" rel="noopener">链接</a> 即可达到。</p>
<h2 id="Cocoapods-管理代码的必要性"><a href="#Cocoapods-管理代码的必要性" class="headerlink" title="Cocoapods 管理代码的必要性"></a>Cocoapods 管理代码的必要性</h2><p>项目到了一定规模, 代码组织和结构显得尤为重要.</p>
<p>重构项目结构，可以从分离代码开始，代码分离，可以把常用稳定的组件封装抽离出来.</p>
<p>分离代码, 常用的有几种方式:</p>
<blockquote>
<ol>
<li>放到不同的文件夹, 管理和组织代码.</li>
<li>使用 framework 的方式, 提供给项目使用.</li>
<li>工具管理如 Cocoapods.</li>
</ol>
</blockquote>
<p>这几种方式, 各有所长, 各有优劣, 无所谓好与坏, 根据自己的项目特点来组织即可.</p>
<p>我的做法是使用 cocoapods 来管理.</p>
<p>下面进入今天的主题:</p>
<blockquote>
<p>使用 cocoapods 管理自己的本地代码.</p>
</blockquote>
<p>博客 <a href="http://blog.csdn.net/veryitman/article/details/50769069" target="_blank" rel="noopener">Mac OSX 10.11.1+ 安装 Cocoapods</a><br>介绍了如何在最新版 MacOS 中安装 Cocoapods 以及注意事项, 并且作者保证持续「更新, 更正」内容.</p>
<h2 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h2><p>使用 Xcode 创建一个工程, 工程名就起为 <code>TestPods</code> 吧.</p>
<blockquote>
<p>工程目录可以防止在桌面或者你喜欢的目录下面都可以.</p>
</blockquote>
<p>在 TestPods 下面创建 LocalLib 目录, 用来放置分离的代码.当然, 你也可以将 LocalLib 这个目录放到其他目录.</p>
<p>在 LocalLib 下面, 我的 pod 库代码名称为 download.</p>
<p>可以新建这个目录.</p>
<p>目录如下:<br><img src="/upload/images/2016/9/25/pod_lib_dir.png" alt="1"></p>
<h2 id="创建-podspec-文件"><a href="#创建-podspec-文件" class="headerlink" title="创建 podspec 文件"></a>创建 podspec 文件</h2><p>在 download 目录下面, 创建 podspec 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create download</div></pre></td></tr></table></figure>
<p>创建完成后, 会生成 download.podspec 文件.</p>
<p>具体内容, 创建后, 大家可以自行查看.</p>
<h2 id="修改-podspec-文件"><a href="#修改-podspec-文件" class="headerlink" title="修改 podspec 文件"></a>修改 podspec 文件</h2><p>修改 download.podspec, 主要修改几个关键地方:</p>
<blockquote>
<p>源码位置<br>源码版本</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">――― Source Location ―――――――――――――――――――――――――――――――――――――――――――――#</div><div class="line">  #</div><div class="line">  #  Specify the location from where the source should be retrieved.</div><div class="line">  #  Supports git, hg, bzr, svn and HTTP.</div><div class="line">  #</div><div class="line">  s.source       = &#123; :git =&gt; &quot;&quot;, :tag =&gt; &quot;0.0.1&quot; &#125;</div><div class="line">  # ――― Source Code ――――――――――――――――――――――――――――――――――――――――――――#</div><div class="line">  #</div><div class="line">  #  CocoaPods is smart about how it includes source code. For source files</div><div class="line">  #  giving a folder will include any swift, h, m, mm, c &amp; cpp files.</div><div class="line">  #  For header files it will include any header in the folder.</div><div class="line">  #  Not including the public_header_files will make all headers public.</div><div class="line">  #</div><div class="line">  s.source_files  = &quot;Source&quot;, &quot;Source/**/*.&#123;h,m&#125;&quot;</div><div class="line">  s.exclude_files = &quot;Source/Exclude&quot;</div></pre></td></tr></table></figure>
<p>另外, 配置好相关描述信息, 不要包含 ‘Example’ 的字样, 不然, 新版的 Cocoapods 执行 pod install 时候, 会报出警告和错误.</p>
<p>这样, 工程可以使用 pods 库了.</p>
<h2 id="工程使用-pod-库"><a href="#工程使用-pod-库" class="headerlink" title="工程使用 pod 库"></a>工程使用 pod 库</h2><p>将 TestPods 改为 cocoapods 项目.</p>
<p>在 TestPods 目录, 执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod init</div></pre></td></tr></table></figure>
<p>会生成 Podfile 等文件.</p>
<p>修改 Podfile 文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># Uncomment this line to define a global platform for your project</div><div class="line"># platform :ios, &apos;7.0&apos;</div><div class="line"># Uncomment this line if you&apos;re using Swift</div><div class="line"># use_frameworks!</div><div class="line">target &apos;TestPods&apos; do</div><div class="line">pod &apos;download&apos;, :path =&gt; &apos;./LocalLib/download/&apos;</div><div class="line">#pod &apos;core_lib_spec&apos;, :svn =&gt; &apos;http://svn.ids111.com/o2o/client/ios/trunks/master/Frameworks/CoreLibrary&apos;</div><div class="line">end</div><div class="line">target &apos;TestPodsTests&apos; do</div><div class="line">end</div><div class="line">target &apos;TestPodsUITests&apos; do</div><div class="line">end</div></pre></td></tr></table></figure>
<p>关键是指明 pod 库的位置.<br>路径一定要正确.否则无法找到该库.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod &apos;download&apos;, :path =&gt; &apos;./LocalLib/download/&apos;</div></pre></td></tr></table></figure>
<p>在 TestPods 下面, pod install 即可.</p>
<p>如果, pod install 报错, 一般都是你的 pod 库的配置文件(.podspec)里面写的不符合要求.</p>
<p>根据报错信息, 加以修改即可.</p>
<p>xcode 打开工程.<br><img src="/upload/images/2016/9/25/pod_lib_pro.png" alt="1"></p>
<h2 id="示例下载"><a href="#示例下载" class="headerlink" title="示例下载"></a>示例下载</h2><p>工程示例代码, 可以 <a href="http://download.csdn.net/download/androidbluetooth/9520262" target="_blank" rel="noopener">戳这里下载</a> 玩耍!</p>
<hr>
<p><strong>扫码关注，你我就各多一个朋友~</strong></p>
<p><img src="/upload/me/qrcode_wx.jpg" alt=""></p>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS Cocoapods </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RN: 如何启动 local server]]></title>
      <url>/2016/09/22/RN-%E5%A6%82%E4%BD%95%E5%90%AF%E5%8A%A8-local-server/</url>
      <content type="html"><![CDATA[<p>使用 <code>react-native init</code> 创建的工程, 在 xcode 中运行会自动启动一个 RN 的本地 Server.</p>
<p>像下面图片展示这样:<br><img src="/upload/images/2016/9/22/rn_1.png" alt="1"></p>
<p>那么, 这里问题来了.</p>
<p>比如, 我想暂时不启动这个本地 Server, 那么如何关闭呢?</p>
<p>下面跟大家一起探讨和追究一下.</p>
<h2 id="找到启动的根源"><a href="#找到启动的根源" class="headerlink" title="找到启动的根源"></a>找到启动的根源</h2><p>启动这个终端的是在一个 React.xcodeproj 工程的 「Build Phases」中脚本里面配置的.</p>
<p>脚本内容如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">if nc -w 5 -z localhost 8081 ; then</div><div class="line">  if ! curl -s &quot;http://localhost:8081/status&quot; | grep -q &quot;packager-status:running&quot; ; then</div><div class="line">    echo &quot;Port 8081 already in use, packager is either not running or not running correctly&quot;</div><div class="line">    exit 2</div><div class="line">  fi</div><div class="line">else</div><div class="line">  open &quot;$SRCROOT/../packager/launchPackager.command&quot; || echo &quot;Can&apos;t start packager automatically&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<p>真正起作用的是:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open &quot;$SRCROOT/../packager/launchPackager.command&quot;</div></pre></td></tr></table></figure>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>这样我们就可以关闭这个自启动了, 示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">if nc -w 5 -z localhost 8081 ; then</div><div class="line">  if ! curl -s &quot;http://localhost:8081/status&quot; | grep -q &quot;packager-status:running&quot; ; then</div><div class="line">    echo &quot;Port 8081 already in use, packager is either not running or not running correctly&quot;</div><div class="line">    exit 2</div><div class="line">  fi</div><div class="line">else</div><div class="line">#open &quot;$SRCROOT/../packager/launchPackager.command&quot; || echo &quot;Can&apos;t start packager automatically&quot;</div><div class="line">    echo &quot;Nothing...&quot;</div><div class="line">fi</div></pre></td></tr></table></figure>
<h2 id="看看-launchPackager-command"><a href="#看看-launchPackager-command" class="headerlink" title="看看 launchPackager.command"></a>看看 launchPackager.command</h2><p>这个文件在「node_modules/react-native/packager/」下面.</p>
<p>该文件是启动另外一个脚本 packager.sh, 核心代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ./packager.sh</div></pre></td></tr></table></figure>
<p>最终执行:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node &quot;$THIS_DIR/../local-cli/cli.js&quot; start &quot;$@&quot;</div></pre></td></tr></table></figure>
<p>大家有兴趣可以去看看源码, 一探究竟.</p>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ReactNative iOS Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RN: 创建iOS工程代码的indent问题]]></title>
      <url>/2016/09/19/RN-%E5%88%9B%E5%BB%BAiOS%E5%B7%A5%E7%A8%8B%E4%BB%A3%E7%A0%81%E7%9A%84indent%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>使用最新版RN(0.33)来创建工程, 大家可以发现, OC 代码的退格变成了两个空格.<br>如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions</div><div class="line">&#123;</div><div class="line">  NSURL *jsCodeLocation;</div><div class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@&quot;index.ios&quot; fallbackResource:nil];</div><div class="line">  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</div><div class="line">                                                      moduleName:@&quot;Mark&quot;</div><div class="line">                                               initialProperties:nil</div><div class="line">                                                   launchOptions:launchOptions];</div><div class="line">  rootView.backgroundColor = [[UIColor alloc] initWithRed:1.0f green:1.0f blue:1.0f alpha:1];</div><div class="line">  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];</div><div class="line">  UIViewController *rootViewController = [UIViewController new];</div><div class="line">  rootViewController.view = rootView;</div><div class="line">  self.window.rootViewController = rootViewController;</div><div class="line">  [self.window makeKeyAndVisible];</div><div class="line">  return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>无论你回车或者 tab 或者格式化(<code>右键/Structure/Re-Indent</code>)代码, 会发现, 都是这种调调.</p>
<p>面对这突如其来的变化, 我开始觉得有点淡淡的忧伤.</p>
<p>对于一直使用 <code>tab width = 4</code> 的我来说, 无法忍受. 必须改过来.</p>
<h2 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h2><p>打开 Xcode 的 preferences, 看到其『设置』正常的不要不要的.</p>
<p>所以可以断定不是 Xcode 的问题.</p>
<p><img src="/upload/images/2016/9/19/xcode_pref.png" alt="1"></p>
<p>因为升级了 Xcode 到最新版 Xcode8, 还以为是 Xcode8 的 bug, 打开之前的 React Native 工程或者其他 Xcode 工程, 就没有这个「蛋疼」的问题.</p>
<p>最终猜想是工程配置文件引起的…</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>既然和 Xcode 没有关系, 那么问题就一定出现在配置文件上面.</p>
<p>罪魁祸首 <code>project.pbxproj</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">indentWidth = 2;</div><div class="line">sourceTree = &quot;&lt;group&gt;&quot;;</div><div class="line">tabWidth = 2;</div></pre></td></tr></table></figure>
<p>修改为:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">indentWidth = 4;</div><div class="line">sourceTree = &quot;&lt;group&gt;&quot;;</div><div class="line">tabWidth = 4;</div></pre></td></tr></table></figure>
<p>或者直接删除:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">indentWidth = 2;</div><div class="line">tabWidth = 2;</div></pre></td></tr></table></figure>
<p>关闭工程, 重启 Xcode 就可以了.</p>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ReactNative iOS Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RN: Mac 配置 ES6 简易开发环境]]></title>
      <url>/2016/09/16/RN-Mac-%E9%85%8D%E7%BD%AE-ES6-%E7%AE%80%E6%98%93%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      <content type="html"><![CDATA[<h2 id="创建文件夹-ES6"><a href="#创建文件夹-ES6" class="headerlink" title="创建文件夹 ES6"></a>创建文件夹 ES6</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ES6</div><div class="line">-lib</div><div class="line">-src</div></pre></td></tr></table></figure>
<p>你可以任意取一个你喜欢的目录名称.</p>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
<p>填写项目信息.</p>
<p>查看一下 package.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat package.json</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;name&quot;: &quot;es6tutorials&quot;,</div><div class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</div><div class="line">  &quot;description&quot;: &quot;Tutorial&quot;,</div><div class="line">  &quot;main&quot;: &quot;index.js&quot;,</div><div class="line">  &quot;scripts&quot;: &#123;</div><div class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;keywords&quot;: [</div><div class="line">    &quot;es6&quot;,</div><div class="line">    &quot;.etc&quot;</div><div class="line">  ],</div><div class="line">  &quot;author&quot;: &quot;mark.zhang&quot;,</div><div class="line">  &quot;license&quot;: &quot;MIT&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>目录结构如下</p>
<p><img src="/upload/images/2016/9/10/1.jpg" alt="1"></p>
<h3 id="安装-babel-cli"><a href="#安装-babel-cli" class="headerlink" title="安装 babel-cli"></a>安装 babel-cli</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev babel-cli</div></pre></td></tr></table></figure>
<p>也可以全局安装</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-cli -g</div></pre></td></tr></table></figure>
<p>全局安装上后，会安装如下四个程序到全局环境中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">babel</div><div class="line">babel-node</div><div class="line">babel-doctor</div><div class="line">babel-external-helpers</div></pre></td></tr></table></figure>
<h2 id="安装-babel-core"><a href="#安装-babel-core" class="headerlink" title="安装 babel-core"></a>安装 babel-core</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-core --save</div></pre></td></tr></table></figure>
<h2 id="安装-ES2015-插件"><a href="#安装-ES2015-插件" class="headerlink" title="安装 ES2015 插件"></a>安装 ES2015 插件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install babel-preset-es2015</div></pre></td></tr></table></figure>
<p>编写配置文件 .babelrc</p>
<p>注意该文件有个点符号.</p>
<p>在工程目录下新建该文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch .babelrc</div></pre></td></tr></table></figure>
<p>写入如下内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;presets&quot;: [</div><div class="line">      &quot;es2015&quot;,</div><div class="line">    ],</div><div class="line">    &quot;plugins&quot;: []</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写测试代码 tutorials.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">function test()</div><div class="line">&#123;</div><div class="line">    console.log(a);</div><div class="line">    var a = 0;</div><div class="line">&#125;</div><div class="line">test();</div><div class="line">var a = [];</div><div class="line">for (var i = 0; i &lt; 10; i++) &#123;</div><div class="line">  var c = i;</div><div class="line">  a[i] = function () &#123;</div><div class="line">    console.log(c);</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">a[6](); // 9</div><div class="line">var b = [];</div><div class="line">for (var i=0; i&lt;10; i++) &#123;</div><div class="line">    let c = i; //let 是 es6中的关键字</div><div class="line">    b[i] = function() &#123;</div><div class="line">        console.log(c)</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line">b[6]();</div></pre></td></tr></table></figure>
<p>编译</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel src/tutorials.js</div></pre></td></tr></table></figure>
<p>运行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel-node src/tutorials.js</div></pre></td></tr></table></figure>
<p><img src="/upload/images/2016/9/10/2.jpg" alt="1"></p>
<p>这里可以下载 <a href="https://github.com/veryitman/ES6Tutorials" target="_blank" rel="noopener">工程源码</a>.</p>
<h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="1-将-ES6-语法的文件转换为-ES5-的语法"><a href="#1-将-ES6-语法的文件转换为-ES5-的语法" class="headerlink" title="1.将 ES6 语法的文件转换为 ES5 的语法"></a>1.将 ES6 语法的文件转换为 ES5 的语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel -d lib/ src/</div></pre></td></tr></table></figure>
<p>在 lib 目录下会生成 src 目录中对应的文件.</p>
<h3 id="2-进入交互模式"><a href="#2-进入交互模式" class="headerlink" title="2.进入交互模式"></a>2.进入交互模式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel-node</div></pre></td></tr></table></figure>
<p>两次 ctrl+c 退出</p>
<h3 id="3-检查babel状况"><a href="#3-检查babel状况" class="headerlink" title="3.检查babel状况"></a>3.检查babel状况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">babel-doctor</div></pre></td></tr></table></figure>
<p>检查以下内容</p>
<ul>
<li><p>配置文件.babelrc</p>
</li>
<li><p>是否有重复的babel安装包，比如说安装了5和6</p>
</li>
<li><p>babel安装包是否已经升级到了最新版</p>
</li>
<li><p>npm &gt;= 3.3.0</p>
</li>
</ul>
<p><img src="/upload/images/2016/9/10/3.jpg" alt="1"></p>
<h3 id="4-卸载全局的-babel-cli"><a href="#4-卸载全局的-babel-cli" class="headerlink" title="4.卸载全局的 babel-cli"></a>4.卸载全局的 babel-cli</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm uninstall --global babel-cli</div></pre></td></tr></table></figure>
<h2 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h2><ul>
<li><p><a href="https://babeljs.io/docs/usage/cli/" target="_blank" rel="noopener">Babel comes with a built-in CLI which can be used to compile files from the command line.</a></p>
</li>
<li><p>阮一峰老师的 <a href="https://www.gitbook.com/book/wohugb/ecmascript-6/details" target="_blank" rel="noopener">ECMAScript 6入门</a></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> ReactNative </category>
            
        </categories>
        
        
        <tags>
            
            <tag> ReactNative </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS: 手机是否设置网络代理]]></title>
      <url>/2016/09/16/iOS-%E6%89%8B%E6%9C%BA%E6%98%AF%E5%90%A6%E8%AE%BE%E7%BD%AE%E7%BD%91%E7%BB%9C%E4%BB%A3%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h2><p>项目开发过程中, 会遇到下面这样一种情景:</p>
<blockquote>
<p>产品或者设计同事需要体验目前产品开发的进度, 然后要求开发人员, 将现在的版本给他们体验.<br>做过程序开发的人都知道, 开发版本会有不少问题.<br>这时, 产品和设计同事就会抱怨, 怎么登录不了, 这里没有数据了!<br>有个小伙伴被折腾的实在受不了, 连网页都打不开了.<br>最后找到原因:<br>他手机被之前的程序猿设置了网络代理, 代理到程序猿哥哥的电脑上来抓包调试问题, 忘记取消设置了.</p>
</blockquote>
<p>假如可以判断当前手机是否设置了网络代理, 就可以很好地解决上面情景中提到的问题了.</p>
<h2 id="找到线索"><a href="#找到线索" class="headerlink" title="找到线索"></a>找到线索</h2><p>在 ASIHttpRequest 中找到如下方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">- (BOOL)configureProxies</div><div class="line">&#123;</div><div class="line">    // Have details of the proxy been set on this request</div><div class="line">    if (![self isPACFileRequest] &amp;&amp; (![self proxyHost] &amp;&amp; ![self proxyPort])) &#123;</div><div class="line">        // If not, we need to figure out what they&apos;ll be</div><div class="line">        NSArray *proxies = nil;</div><div class="line">        // Have we been given a proxy auto config file?</div><div class="line">        if ([self PACurl]) &#123;</div><div class="line">            // If yes, we&apos;ll need to fetch the PAC file asynchronously, so we stop this request to wait until we have the proxy details.</div><div class="line">            [self fetchPACFile];</div><div class="line">            return NO;</div><div class="line">            // Detect proxy settings and apply them</div><div class="line">        &#125; else &#123;</div><div class="line">#if TARGET_OS_IPHONE</div><div class="line">            NSDictionary *proxySettings = [NSMakeCollectable(CFNetworkCopySystemProxySettings()) autorelease];</div><div class="line">#else</div><div class="line">            NSDictionary *proxySettings = [NSMakeCollectable(SCDynamicStoreCopyProxies(NULL)) autorelease];</div><div class="line">#endif</div><div class="line">            proxies = [NSMakeCollectable(CFNetworkCopyProxiesForURL((CFURLRef)[self url], (CFDictionaryRef)proxySettings)) autorelease];</div><div class="line">            // Now check to see if the proxy settings contained a PAC url, we need to run the script to get the real list of proxies if so</div><div class="line">            NSDictionary *settings = [proxies objectAtIndex:0];</div><div class="line">            if ([settings objectForKey:(NSString *)kCFProxyAutoConfigurationURLKey]) &#123;</div><div class="line">                [self setPACurl:[settings objectForKey:(NSString *)kCFProxyAutoConfigurationURLKey]];</div><div class="line">                [self fetchPACFile];</div><div class="line">                return NO;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (!proxies) &#123;</div><div class="line">            [self setReadStream:nil];</div><div class="line">            [self failWithError:[NSError errorWithDomain:NetworkRequestErrorDomain code:ASIInternalErrorWhileBuildingRequestType userInfo:[NSDictionary dictionaryWithObjectsAndKeys:@&quot;Unable to obtain information on proxy servers needed for request&quot;,NSLocalizedDescriptionKey,nil]]];</div><div class="line">            return NO;</div><div class="line">        &#125;</div><div class="line">        // I don&apos;t really understand why the dictionary returned by CFNetworkCopyProxiesForURL uses different key names from CFNetworkCopySystemProxySettings/SCDynamicStoreCopyProxies</div><div class="line">        // and why its key names are documented while those we actually need to use don&apos;t seem to be (passing the kCF* keys doesn&apos;t seem to work)</div><div class="line">        if ([proxies count] &gt; 0) &#123;</div><div class="line">            NSDictionary *settings = [proxies objectAtIndex:0];</div><div class="line">            [self setProxyHost:[settings objectForKey:(NSString *)kCFProxyHostNameKey]];</div><div class="line">            [self setProxyPort:[[settings objectForKey:(NSString *)kCFProxyPortNumberKey] intValue]];</div><div class="line">            [self setProxyType:[settings objectForKey:(NSString *)kCFProxyTypeKey]];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>踏破铁鞋无觅处…</p>
<p>判断 iphone 是否设置网络代理的示例代码如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">+ (BOOL)hasSetProxy</div><div class="line">&#123;</div><div class="line">    BOOL proxy = NO;</div><div class="line">    </div><div class="line">    NSDictionary *proxySettings = (__bridge NSDictionary *)(CFNetworkCopySystemProxySettings());</div><div class="line">    NSURL *url = [NSURL URLWithString:@&quot;http://www.baidu.com&quot;];</div><div class="line">    NSArray *proxies = (__bridge NSArray *)(CFNetworkCopyProxiesForURL((__bridge CFURLRef)(url),</div><div class="line">                                                                       (__bridge CFDictionaryRef)(proxySettings)));</div><div class="line">    MZLOG(@&quot;proxies:%@&quot;, proxies);</div><div class="line">    NSDictionary *settings = proxies[0];</div><div class="line">    MZLOG(@&quot;kCFProxyHostNameKey: %@&quot;, [settings objectForKey:(NSString *)kCFProxyHostNameKey]);</div><div class="line">    MZLOG(@&quot;kCFProxyPortNumberKey: %@&quot;, [settings objectForKey:(NSString *)kCFProxyPortNumberKey]);</div><div class="line">    MZLOG(@&quot;kCFProxyTypeKey: %@&quot;, [settings objectForKey:(NSString *)kCFProxyTypeKey]);</div><div class="line">    if ([[settings objectForKey:(NSString *)kCFProxyTypeKey] isEqualToString:@&quot;kCFProxyTypeNone&quot;]) &#123;</div><div class="line">        proxy = NO;</div><div class="line">    &#125;</div><div class="line">    else &#123;</div><div class="line">        proxy = YES;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return proxy;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用户体验"><a href="#用户体验" class="headerlink" title="用户体验"></a>用户体验</h2><p>判断如果设置了代理, 提示用户, 帮他直接跳到 wifi 设置界面.</p>
<p>下面说说如何跳到系统的 wifi 设置界面.</p>
<p>1.配置 URL TYPES</p>
<p><img src="/upload/images/2016/9/16/1.jpeg" alt="1"></p>
<p>注意这里的配置是 <code>prefs</code>.</p>
<p>2.openURL</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">NSString * urlString = @&quot;prefs:root=WIFI&quot;;</div><div class="line">NSURL *url = [NSURL URLWithString:urlString];</div><div class="line">UIApplication *app = [UIApplication sharedApplication];</div><div class="line">if ([app canOpenURL:[NSURL URLWithString:urlString]]) &#123;</div><div class="line"> </div><div class="line">    if ([[UIDevice currentDevice].systemVersion doubleValue] &gt;= 10.0) &#123;</div><div class="line">    </div><div class="line">    	[app openURL:url options:@&#123;&#125; completionHandler:nil];</div><div class="line">    &#125; </div><div class="line">    else &#123;</div><div class="line">    </div><div class="line">    	[app openURL:url];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外, 跳转到系统其他界面的 URL 如下:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">1.系统设置</div><div class="line">prefs:root=INTERNET_TETHERING</div><div class="line">2.WIFI设置</div><div class="line">prefs:root=WIFI</div><div class="line">3.蓝牙设置</div><div class="line">prefs:root=Bluetooth</div><div class="line">4.系统通知</div><div class="line">prefs:root=NOTIFICATIONS_ID</div><div class="line">5.通用设置</div><div class="line">prefs:root=General</div><div class="line">6.显示设置</div><div class="line">prefs:root=DISPLAY&amp;BRIGHTNESS</div><div class="line">7.壁纸设置</div><div class="line">prefs:root=Wallpaper</div><div class="line">8.声音设置</div><div class="line">prefs:root=Sounds</div><div class="line">9.隐私设置</div><div class="line">prefs:root=privacy</div><div class="line">10.打开 APP Store</div><div class="line">prefs:root=STORE</div><div class="line">11.打开 Notes</div><div class="line">prefs:root=NOTES</div><div class="line">12.打开 Safari</div><div class="line">prefs:root=Safari</div><div class="line">13.打开 Music</div><div class="line">prefs:root=MUSIC</div><div class="line">14.打开 photo</div><div class="line">prefs:root=Photos</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> iOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS proxy </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[与 CSDN 的诀别]]></title>
      <url>/2016/09/10/%E4%B8%8E-CSDN-%E7%9A%84%E8%AF%80%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>写这个话题, 内心还是蛮沉重的.</p>
<p>几年前与 CSDN 不期而遇, 在里面各种折腾, 翻阅大牛们的博客, 写评论, 甚至打印出来. 在技术论坛不停地”灌水”, 订阅 CSDN 杂志, 准备练就一身武艺.</p>
<p>互联网的蓬勃发展, 让我原来不安的心有了更加狂躁的冲动.</p>
<p>在某个夜深人静的夜晚, 开启了奋笔疾书的历程, 踏上了 CSDN 的博客之旅.<br>这么多年以来, CSDN 就像我的一个朋友, 不管是家长里短, 还是技术讨论, 各种心酸, 我都会记录在那里.</p>
<p>一坚持就是几年…</p>
<p>如今, 要离开 CSDN 的博客了, 不准备在那里继续’耕耘’了.<br>总结起来有如下几个原因:</p>
<blockquote>
<ol>
<li>文章被任意的转载, 没经过本人的允许.我在论坛也问过该事, 没有任何回应, 很失望!</li>
<li>广告越来越多.</li>
<li>相比以前, 很难找到让人满意的有质量的文章.</li>
</ol>
</blockquote>
<p>再见, CSDN! 请原谅我的不辞而别!</p>
]]></content>
      
        <categories>
            
            <category> 随笔 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 写作 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
